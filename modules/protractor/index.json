[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "AxiosError",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85",
    "longname": "AxiosError",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "AxiosInstance",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L130",
    "longname": "AxiosInstance",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "AxiosRequestConfig",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L44",
    "longname": "AxiosRequestConfig",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "AxiosPromise",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L94",
    "longname": "AxiosPromise",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "AxiosResponse",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L76",
    "longname": "AxiosResponse",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "longname": "Proxy",
    "memberof": "src/.imports-from-mdn.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "ProtractorConfig",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/config.ts",
    "longname": "protractor~ProtractorConfig",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "Runner",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/runner.ts",
    "longname": "protractor~Runner",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "ElementArrayFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementArrayFinder",
    "longname": "ElementArrayFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "ElementFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementFinder",
    "longname": "ElementFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "ProtractorBrowser",
    "externalLink": "https://www.protractortest.org/#/api?view=ProtractorBrowser",
    "longname": "ProtractorBrowser",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "Actions",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html",
    "longname": "selenium-webdriver~Actions",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "AlertPromise",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_AlertPromise.html",
    "longname": "selenium-webdriver~AlertPromise",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "By",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/by_exports_By.html",
    "longname": "selenium-webdriver~By",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "Capabilities",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Capabilities.html",
    "longname": "selenium-webdriver~Capabilities",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "Key",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Key.html",
    "longname": "selenium-webdriver~Key",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Navigation",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_Navigation.html",
    "longname": "selenium-webdriver~Navigation",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "Options",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/ie_exports_Options.html",
    "longname": "selenium-webdriver~Options",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "WebElement",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html",
    "longname": "selenium-webdriver~WebElement",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "Ensure",
    "externalLink": "/modules/assertions/class/src/Ensure.ts~Ensure.html",
    "longname": "@serenity-js/assertions~Ensure",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "and",
    "externalLink": "/modules/assertions/function/index.html#static-function-and",
    "longname": "@serenity-js/assertions/lib/expectations~and",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "contain",
    "externalLink": "/modules/assertions/function/index.html#static-function-contain",
    "longname": "@serenity-js/assertions/lib/expectations~contain",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "containAtLeastOneItemThat",
    "externalLink": "/modules/assertions/function/index.html#static-function-containAtLeastOneItemThat",
    "longname": "@serenity-js/assertions/lib/expectations~containAtLeastOneItemThat",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "containItemsWhereEachItem",
    "externalLink": "/modules/assertions/function/index.html#static-function-containItemsWhereEachItem",
    "longname": "@serenity-js/assertions/lib/expectations~containItemsWhereEachItem",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "endsWith",
    "externalLink": "/modules/assertions/function/index.html#static-function-endsWith",
    "longname": "@serenity-js/assertions/lib/expectations~endsWith",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "equals",
    "externalLink": "/modules/assertions/function/index.html#static-function-equals",
    "longname": "@serenity-js/assertions/lib/expectations~equals",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "includes",
    "externalLink": "/modules/assertions/function/index.html#static-function-includes",
    "longname": "@serenity-js/assertions/lib/expectations~includes",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "isAfter",
    "externalLink": "/modules/assertions/function/index.html#static-function-isAfter",
    "longname": "@serenity-js/assertions/lib/expectations~isAfter",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "isBefore",
    "externalLink": "/modules/assertions/function/index.html#static-function-isBefore",
    "longname": "@serenity-js/assertions/lib/expectations~isBefore",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "isFalse",
    "externalLink": "/modules/assertions/function/index.html#static-function-isFalse",
    "longname": "@serenity-js/assertions/lib/expectations~isFalse",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "isGreaterThan",
    "externalLink": "/modules/assertions/function/index.html#static-function-isGreaterThan",
    "longname": "@serenity-js/assertions/lib/expectations~isGreaterThan",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "isLessThan",
    "externalLink": "/modules/assertions/function/index.html#static-function-isLessThan",
    "longname": "@serenity-js/assertions/lib/expectations~isLessThan",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "isTrue",
    "externalLink": "/modules/assertions/function/index.html#static-function-isTrue",
    "longname": "@serenity-js/assertions/lib/expectations~isTrue",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "matches",
    "externalLink": "/modules/assertions/function/index.html#static-function-matches",
    "longname": "@serenity-js/assertions/lib/expectations~matches",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "not",
    "externalLink": "/modules/assertions/function/index.html#static-function-not",
    "longname": "@serenity-js/assertions/lib/expectations~not",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "or",
    "externalLink": "/modules/assertions/function/index.html#static-function-or",
    "longname": "@serenity-js/assertions/lib/expectations~or",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "property",
    "externalLink": "/modules/assertions/function/index.html#static-function-property",
    "longname": "@serenity-js/assertions/lib/expectations~property",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "startsWith",
    "externalLink": "/modules/assertions/function/index.html#static-function-startsWith",
    "longname": "@serenity-js/assertions/lib/expectations~startsWith",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Serenity",
    "externalLink": "/modules/core/class/src/Serenity.ts~Serenity.html",
    "longname": "@serenity-js/core~Serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "SerenityConfig",
    "externalLink": "/modules/core/class/src/SerenityConfig.ts~SerenityConfig.html",
    "longname": "@serenity-js/core~SerenityConfig",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "AssertionError",
    "externalLink": "/modules/core/class/src/errors/AssertionError.ts~AssertionError.html",
    "longname": "@serenity-js/core/lib/errors~AssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "ConfigurationError",
    "externalLink": "/modules/core/class/src/errors/ConfigurationError.ts~ConfigurationError.html",
    "longname": "@serenity-js/core/lib/errors~ConfigurationError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "ImplementationPendingError",
    "externalLink": "/modules/core/class/src/errors/ImplementationPendingError.ts~ImplementationPendingError.html",
    "longname": "@serenity-js/core/lib/errors~ImplementationPendingError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "LogicError",
    "externalLink": "/modules/core/class/src/errors/LogicError.ts~LogicError.html",
    "longname": "@serenity-js/core/lib/errors~LogicError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "RuntimeError",
    "externalLink": "/modules/core/class/src/errors/RuntimeError.ts~RuntimeError.html",
    "longname": "@serenity-js/core/lib/errors~RuntimeError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "TestCompromisedError",
    "externalLink": "/modules/core/class/src/errors/TestCompromisedError.ts~TestCompromisedError.html",
    "longname": "@serenity-js/core/lib/errors~TestCompromisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "UnknownError",
    "externalLink": "/modules/core/class/src/errors/UnknownError.ts~UnknownError.html",
    "longname": "@serenity-js/core/lib/errors~UnknownError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "ActivityFinished",
    "externalLink": "/modules/core/class/src/events/ActivityFinished.ts~ActivityFinished.html",
    "longname": "@serenity-js/core/lib/events~ActivityFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "ActivityRelatedArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "ActivityRelatedArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "ActivityStarts",
    "externalLink": "/modules/core/class/src/events/ActivityStarts.ts~ActivityStarts.html",
    "longname": "@serenity-js/core/lib/events~ActivityStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "ArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ArtifactArchived.ts~ArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "ArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ArtifactGenerated.ts~ArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "AsyncOperationAttempted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationAttempted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "AsyncOperationCompleted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationCompleted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "AsyncOperationFailed",
    "externalLink": "/modules/core/class/src/events/AsyncOperationFailed.ts~AsyncOperationFailed.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationFailed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "BusinessRuleDetected",
    "externalLink": "/modules/core/class/src/events/BusinessRuleDetected.ts~BusinessRuleDetected.html",
    "longname": "@serenity-js/core/lib/events~BusinessRuleDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "DomainEvent",
    "externalLink": "/modules/core/class/src/events/DomainEvent.ts~DomainEvent.html",
    "longname": "@serenity-js/core/lib/events~DomainEvent",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "FeatureNarrativeDetected",
    "externalLink": "/modules/core/class/src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.html",
    "longname": "@serenity-js/core/lib/events~FeatureNarrativeDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "InteractionFinished",
    "externalLink": "/modules/core/class/src/events/InteractionFinished.ts~InteractionFinished.html",
    "longname": "@serenity-js/core/lib/events~InteractionFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "InteractionStarts",
    "externalLink": "/modules/core/class/src/events/InteractionStarts.ts~InteractionStarts.html",
    "longname": "@serenity-js/core/lib/events~InteractionStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "SceneBackgroundDetected",
    "externalLink": "/modules/core/class/src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneBackgroundDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "SceneDescriptionDetected",
    "externalLink": "/modules/core/class/src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneDescriptionDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "SceneFinished",
    "externalLink": "/modules/core/class/src/events/SceneFinished.ts~SceneFinished.html",
    "longname": "@serenity-js/core/lib/events~SceneFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "SceneFinishes",
    "externalLink": "/modules/core/class/src/events/SceneFinishes.ts~SceneFinishes.html",
    "longname": "@serenity-js/core/lib/events~SceneFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "SceneParametersDetected",
    "externalLink": "/modules/core/class/src/events/SceneParametersDetected.ts~SceneParametersDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneParametersDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "SceneSequenceDetected",
    "externalLink": "/modules/core/class/src/events/SceneSequenceDetected.ts~SceneSequenceDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneSequenceDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "SceneStarts",
    "externalLink": "/modules/core/class/src/events/SceneStarts.ts~SceneStarts.html",
    "longname": "@serenity-js/core/lib/events~SceneStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "SceneTagged",
    "externalLink": "/modules/core/class/src/events/SceneTagged.ts~SceneTagged.html",
    "longname": "@serenity-js/core/lib/events~SceneTagged",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "SceneTemplateDetected",
    "externalLink": "/modules/core/class/src/events/SceneTemplateDetected.ts~SceneTemplateDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneTemplateDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "TaskFinished",
    "externalLink": "/modules/core/class/src/events/TaskFinished.ts~TaskFinished.html",
    "longname": "@serenity-js/core/lib/events~TaskFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "TaskStarts",
    "externalLink": "/modules/core/class/src/events/TaskStarts.ts~TaskStarts.html",
    "longname": "@serenity-js/core/lib/events~TaskStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "TestRunFinished",
    "externalLink": "/modules/core/class/src/events/TestRunFinished.ts~TestRunFinished.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "TestRunFinishes",
    "externalLink": "/modules/core/class/src/events/TestRunFinishes.ts~TestRunFinishes.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "TestRunStarts",
    "externalLink": "/modules/core/class/src/events/TestRunStarts.ts~TestRunStarts.html",
    "longname": "@serenity-js/core/lib/events~TestRunStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "TestRunnerDetected",
    "externalLink": "/modules/core/class/src/events/TestRunnerDetected.ts~TestRunnerDetected.html",
    "longname": "@serenity-js/core/lib/events~TestRunnerDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "TestSuiteFinished",
    "externalLink": "/modules/core/class/src/events/TestSuiteFinished.ts~TestSuiteFinished.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "TestSuiteStarts",
    "externalLink": "/modules/core/class/src/events/TestSuiteStarts.ts~TestSuiteStarts.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "serenity",
    "externalLink": "/modules/core/variable/src/instance.ts~serenity.html",
    "longname": "@serenity-js/core~serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "configure",
    "externalLink": "/modules/core/function/index.html#static-function-configure",
    "longname": "@serenity-js/core~configure",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "engage",
    "externalLink": "/modules/core/function/index.html#static-function-engage",
    "longname": "@serenity-js/core~engage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "actorCalled",
    "externalLink": "/modules/core/function/index.html#static-function-actorCalled",
    "longname": "@serenity-js/core~actorCalled",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "actorInTheSpotlight",
    "externalLink": "/modules/core/function/index.html#static-function-actorInTheSpotlight",
    "longname": "@serenity-js/core~actorInTheSpotlight",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "AssertionReportDiffer",
    "externalLink": "/modules/core/class/src/io/AssertionReportDiffer.ts~AssertionReportDiffer.html",
    "longname": "@serenity-js/core/lib/io~AssertionReportDiffer",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "Config",
    "externalLink": "/modules/core/class/src/io/Config.ts~Config.html",
    "longname": "@serenity-js/core/lib/io~Config",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "SerialisedError",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~SerialisedError.html",
    "longname": "@serenity-js/core/lib/io~SerialisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "ErrorSerialiser",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~ErrorSerialiser.html",
    "longname": "@serenity-js/core/lib/io~ErrorSerialiser",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "FileFinder",
    "externalLink": "/modules/core/class/src/io/FileFinder.ts~FileFinder.html",
    "longname": "@serenity-js/core/lib/io~FileFinder",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "/modules/core/class/src/io/FileSystem.ts~FileSystem.html",
    "longname": "@serenity-js/core/lib/io~FileSystem",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "FileSystemLocation",
    "externalLink": "/modules/core/class/src/io/FileSystemLocation.ts~FileSystemLocation.html",
    "longname": "@serenity-js/core/lib/io~FileSystemLocation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "ModuleLoader",
    "externalLink": "/modules/core/class/src/io/ModuleLoader.ts~ModuleLoader.html",
    "longname": "@serenity-js/core/lib/io~ModuleLoader",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "Path",
    "externalLink": "/modules/core/class/src/io/Path.ts~Path.html",
    "longname": "@serenity-js/core/lib/io~Path",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "TestRunnerAdapter",
    "externalLink": "/modules/core/class/src/io/TestRunnerAdapter.ts~TestRunnerAdapter.html",
    "longname": "@serenity-js/core/lib/io~TestRunnerAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "Version",
    "externalLink": "/modules/core/class/src/io/Version.ts~Version.html",
    "longname": "@serenity-js/core/lib/io~Version",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "Mappable",
    "externalLink": "/modules/core/class/src/io/collections/mappable.ts~Mappable.html",
    "longname": "@serenity-js/core/lib/io/collections~Mappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "isMappable",
    "externalLink": "/modules/core/function/index.html#static-function-isMappable",
    "longname": "@serenity-js/core/lib/io/collections~isMappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "Reducible",
    "externalLink": "/modules/core/class/src/io/collections/reducible.ts~Reducible.html",
    "longname": "@serenity-js/core/lib/io/collections~Reducible",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "commaSeparated",
    "externalLink": "/modules/core/function/index.html#static-function-commaSeparated",
    "longname": "@serenity-js/core/lib/io~commaSeparated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "formatted",
    "externalLink": "/modules/core/function/index.html#static-function-formatted",
    "longname": "@serenity-js/core/lib/io~formatted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "inspected",
    "externalLink": "/modules/core/function/index.html#static-function-inspected",
    "longname": "@serenity-js/core/lib/io~inspected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "stringify",
    "externalLink": "/modules/core/function/index.html#static-function-stringify",
    "longname": "@serenity-js/core/lib/io/json~stringify",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "parse",
    "externalLink": "/modules/core/function/index.html#static-function-parse",
    "longname": "@serenity-js/core/lib/io/json~parse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "trimmed",
    "externalLink": "/modules/core/function/index.html#static-function-trimmed",
    "longname": "@serenity-js/core/lib/io~trimmed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "ActivityDetails",
    "externalLink": "/modules/core/class/src/model/ActivityDetails.ts~ActivityDetails.html",
    "longname": "@serenity-js/core/lib/model~ActivityDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Artifact",
    "externalLink": "/modules/core/class/src/model/Artifact.ts~Artifact.html",
    "longname": "@serenity-js/core/lib/model~Artifact",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "BusinessRule",
    "externalLink": "/modules/core/class/src/model/BusinessRule.ts~BusinessRule.html",
    "longname": "@serenity-js/core/lib/model~BusinessRule",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Category",
    "externalLink": "/modules/core/class/src/model/Category.ts~Category.html",
    "longname": "@serenity-js/core/lib/model~Category",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "CorrelationId",
    "externalLink": "/modules/core/class/src/model/CorrelationId.ts~CorrelationId.html",
    "longname": "@serenity-js/core/lib/model~CorrelationId",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "Description",
    "externalLink": "/modules/core/class/src/model/Description.ts~Description.html",
    "longname": "@serenity-js/core/lib/model~Description",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "Duration",
    "externalLink": "/modules/core/class/src/model/Duration.ts~Duration.html",
    "longname": "@serenity-js/core/lib/model~Duration",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "Name",
    "externalLink": "/modules/core/class/src/model/Name.ts~Name.html",
    "longname": "@serenity-js/core/lib/model~Name",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "ScenarioDetails",
    "externalLink": "/modules/core/class/src/model/ScenarioDetails.ts~ScenarioDetails.html",
    "longname": "@serenity-js/core/lib/model~ScenarioDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "ScenarioParameters",
    "externalLink": "/modules/core/class/src/model/ScenarioParameters.ts~ScenarioParameters.html",
    "longname": "@serenity-js/core/lib/model~ScenarioParameters",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "TestSuiteDetails",
    "externalLink": "/modules/core/class/src/model/TestSuiteDetails.ts~TestSuiteDetails.html",
    "longname": "@serenity-js/core/lib/model~TestSuiteDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "Timestamp",
    "externalLink": "/modules/core/class/src/model/Timestamp.ts~Timestamp.html",
    "longname": "@serenity-js/core/lib/model~Timestamp",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "AssertionReport",
    "externalLink": "/modules/core/class/src/model/artifacts/AssertionReport.ts~AssertionReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~AssertionReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "RequestAndResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~RequestAndResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "HTTPRequestResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~HTTPRequestResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "JSONData",
    "externalLink": "/modules/core/class/src/model/artifacts/JSONData.ts~JSONData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~JSONData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "LogEntry",
    "externalLink": "/modules/core/class/src/model/artifacts/LogEntry.ts~LogEntry.html",
    "longname": "@serenity-js/core/lib/model/artifacts~LogEntry",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "Photo",
    "externalLink": "/modules/core/class/src/model/artifacts/Photo.ts~Photo.html",
    "longname": "@serenity-js/core/lib/model/artifacts~Photo",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "TestReport",
    "externalLink": "/modules/core/class/src/model/artifacts/TestReport.ts~TestReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TestReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "TextData",
    "externalLink": "/modules/core/class/src/model/artifacts/TextData.ts~TextData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TextData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/core/lib/model~Outcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "ProblemIndication",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ProblemIndication.html",
    "longname": "@serenity-js/core/lib/model~ProblemIndication",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "ExecutionCompromised",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionCompromised.html",
    "longname": "@serenity-js/core/lib/model~ExecutionCompromised",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "ExecutionFailedWithError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "ExecutionFailedWithAssertionError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithAssertionError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithAssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "ImplementationPending",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ImplementationPending.html",
    "longname": "@serenity-js/core/lib/model~ImplementationPending",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "ExecutionIgnored",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionIgnored.html",
    "longname": "@serenity-js/core/lib/model~ExecutionIgnored",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "ExecutionSkipped",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSkipped.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSkipped",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "ExecutionSuccessful",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSuccessful.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSuccessful",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "ArbitraryTag",
    "externalLink": "/modules/core/class/src/model/tags/ArbitraryTag.ts~ArbitraryTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ArbitraryTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "BrowserTag",
    "externalLink": "/modules/core/class/src/model/tags/BrowserTag.ts~BrowserTag.html",
    "longname": "@serenity-js/core/lib/model/tags~BrowserTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "CapabilityTag",
    "externalLink": "/modules/core/class/src/model/tags/CapabilityTag.ts~CapabilityTag.html",
    "longname": "@serenity-js/core/lib/model/tags~CapabilityTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "ContextTag",
    "externalLink": "/modules/core/class/src/model/tags/ContextTag.ts~ContextTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ContextTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "ExecutionRetriedTag",
    "externalLink": "/modules/core/class/src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ExecutionRetriedTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "FeatureTag",
    "externalLink": "/modules/core/class/src/model/tags/FeatureTag.ts~FeatureTag.html",
    "longname": "@serenity-js/core/lib/model/tags~FeatureTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "IssueTag",
    "externalLink": "/modules/core/class/src/model/tags/IssueTag.ts~IssueTag.html",
    "longname": "@serenity-js/core/lib/model/tags~IssueTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "ManualTag",
    "externalLink": "/modules/core/class/src/model/tags/ManualTag.ts~ManualTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ManualTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "PlatformTag",
    "externalLink": "/modules/core/class/src/model/tags/PlatformTag.ts~PlatformTag.html",
    "longname": "@serenity-js/core/lib/model/tags~PlatformTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/core/class/src/model/tags/Tag.ts~Tag.html",
    "longname": "@serenity-js/core/lib/model/tags~Tag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "name": "ThemeTag",
    "externalLink": "/modules/core/class/src/model/tags/ThemeTag.ts~ThemeTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ThemeTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "name": "Ability",
    "externalLink": "/modules/core/class/src/screenplay/Ability.ts~Ability.html",
    "longname": "@serenity-js/core/lib/screenplay~Ability",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "AbilityType",
    "externalLink": "/modules/core/class/src/screenplay/AbilityType.ts~AbilityType.html",
    "longname": "@serenity-js/core/lib/screenplay~AbilityType",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "Activity",
    "externalLink": "/modules/core/class/src/screenplay/Activity.ts~Activity.html",
    "longname": "@serenity-js/core/lib/screenplay~Activity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "Interaction",
    "externalLink": "/modules/core/class/src/screenplay/Interaction.ts~Interaction.html",
    "longname": "@serenity-js/core/lib/screenplay~Interaction",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "Question",
    "externalLink": "/modules/core/class/src/screenplay/Question.ts~Question.html",
    "longname": "@serenity-js/core/lib/screenplay~Question",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "Task",
    "externalLink": "/modules/core/class/src/screenplay/Task.ts~Task.html",
    "longname": "@serenity-js/core/lib/screenplay~Task",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "Discardable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Discardable.ts~Discardable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Discardable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "Initialisable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Initialisable.ts~Initialisable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Initialisable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "TakeNotes",
    "externalLink": "/modules/core/class/src/screenplay/abilities/TakeNotes.ts~TakeNotes.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~TakeNotes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "Actor",
    "externalLink": "/modules/core/class/src/screenplay/actor/Actor.ts~Actor.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~Actor",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "name": "AnswersQuestions",
    "externalLink": "/modules/core/class/src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~AnswersQuestions",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "CanHaveAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CanHaveAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "CollectsArtifacts",
    "externalLink": "/modules/core/class/src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CollectsArtifacts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "name": "ListensToDomainEvents",
    "externalLink": "/modules/core/class/src/screenplay/actor/ListensToDomainEvents.ts~ListensToDomainEvents.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~ListensToDomainEvents",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "name": "PerformsActivities",
    "externalLink": "/modules/core/class/src/screenplay/actor/PerformsActivities.ts~PerformsActivities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~PerformsActivities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "name": "UsesAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/UsesAbilities.ts~UsesAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~UsesAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "name": "Log",
    "externalLink": "/modules/core/class/src/screenplay/interactions/Log.ts~Log.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~Log",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "name": "See",
    "externalLink": "/modules/core/class/src/screenplay/interactions/See.ts~See.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~See",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "name": "TakeNote",
    "externalLink": "/modules/core/class/src/screenplay/interactions/TakeNote.ts~TakeNote.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~TakeNote",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "name": "Check",
    "externalLink": "/modules/core/class/src/screenplay/questions/Check.ts~Check.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Check",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "name": "Expectation",
    "externalLink": "/modules/core/class/src/screenplay/questions/Expectation.ts~Expectation.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Expectation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "name": "List",
    "externalLink": "/modules/core/class/src/screenplay/questions/List.ts~List.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~List",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "name": "MetaQuestion",
    "externalLink": "/modules/core/class/src/screenplay/questions/MetaQuestion.ts~MetaQuestion.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~MetaQuestion",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "name": "Note",
    "externalLink": "/modules/core/class/src/screenplay/questions/Note.ts~Note.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Note",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "name": "Property",
    "externalLink": "/modules/core/class/src/screenplay/questions/Property.ts~Property.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Property",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "name": "Transform",
    "externalLink": "/modules/core/class/src/screenplay/questions/Transform.ts~Transform.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Transform",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "name": "ExpectationMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationMet.ts~ExpectationMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "name": "ExpectationNotMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationNotMet.ts~ExpectationNotMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationNotMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "name": "ExpectationOutcome",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationOutcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "name": "ArrayListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ArrayListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "name": "ListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ListAdapter.ts~ListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "name": "append",
    "externalLink": "/modules/core/function/index.html#static-function-append",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~append",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "name": "normalize",
    "externalLink": "/modules/core/function/index.html#static-function-normalize",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~normalize",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "name": "replace",
    "externalLink": "/modules/core/function/index.html#static-function-replace",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~replace",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "name": "slice",
    "externalLink": "/modules/core/function/index.html#static-function-slice",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~slice",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "name": "split",
    "externalLink": "/modules/core/function/index.html#static-function-split",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~split",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "name": "toLocaleLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "name": "toLocaleUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "name": "toLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "name": "toNumber",
    "externalLink": "/modules/core/function/index.html#static-function-toNumber",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toNumber",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "name": "toUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "name": "trim",
    "externalLink": "/modules/core/function/index.html#static-function-trim",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~trim",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "name": "q",
    "externalLink": "/modules/core/function/index.html#static-function-q",
    "longname": "@serenity-js/core/lib/screenplay/questions~q",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "name": "Loop",
    "externalLink": "/modules/core/class/src/screenplay/tasks/Loop.ts~Loop.html",
    "longname": "@serenity-js/core/lib/screenplay/tasks~Loop",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "name": "Cast",
    "externalLink": "/modules/core/class/src/stage/Cast.ts~Cast.html",
    "longname": "@serenity-js/core/lib/stage~Cast",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "name": "Clock",
    "externalLink": "/modules/core/class/src/stage/Clock.ts~Clock.html",
    "longname": "@serenity-js/core/lib/stage~Clock",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "name": "DressingRoom",
    "externalLink": "/modules/core/class/src/stage/DressingRoom.ts~DressingRoom.html",
    "longname": "@serenity-js/core/lib/stage~DressingRoom",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "name": "Stage",
    "externalLink": "/modules/core/class/src/stage/Stage.ts~Stage.html",
    "longname": "@serenity-js/core/lib/stage~Stage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "name": "StageCrewMember",
    "externalLink": "/modules/core/class/src/stage/StageCrewMember.ts~StageCrewMember.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMember",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "name": "StageManager",
    "externalLink": "/modules/core/class/src/stage/StageManager.ts~StageManager.html",
    "longname": "@serenity-js/core/lib/stage~StageManager",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "name": "WithStage",
    "externalLink": "/modules/core/class/src/stage/WithStage.ts~WithStage.html",
    "longname": "@serenity-js/core/lib/stage~WithStage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "name": "ArtifactArchiver",
    "externalLink": "/modules/core/class/src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.html",
    "longname": "@serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "name": "StreamReporter",
    "externalLink": "/modules/core/class/src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter.html",
    "longname": "@serenity-js/core/lib/stage/crew/stream-reporter~StreamReporter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "name": "CucumberCLIAdapter",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberCLIAdapter",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "name": "CucumberConfig",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberConfig",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "name": "CucumberFormat",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberFormat.ts~CucumberFormat.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberFormat",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "name": "AmbiguousStepDefinitionError",
    "externalLink": "/modules/cucumber/class/src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError.html",
    "longname": "@serenity-js/cucumber/lib/errors~AmbiguousStepDefinitionError",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "name": "createListener",
    "externalLink": "/modules/cucumber/function/index.html#static-function-createListener",
    "longname": "@serenity-js/cucumber/lib/listeners/legacy~createListener",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "name": "createListener",
    "externalLink": "/modules/cucumber/function/index.html#static-function-createListener",
    "longname": "@serenity-js/cucumber/lib/listeners/messages~createListener",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "name": "SerenityReporterForJasmine",
    "externalLink": "/modules/jasmine/class/src/SerenityReporterForJasmine.ts~SerenityReporterForJasmine.html",
    "longname": "@serenity-js/jasmine~SerenityReporterForJasmine",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "name": "JasmineAdapter",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineAdapter.ts~JasmineAdapter.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineAdapter",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "name": "JasmineConfig",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineConfig",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "name": "bootstrap",
    "externalLink": "/modules/jasmine/function/index.html#static-function-bootstrap",
    "longname": "@serenity-js/jasmine~bootstrap",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "name": "monkeyPatched",
    "externalLink": "/modules/jasmine/function/index.html#static-function-monkeyPatched",
    "longname": "@serenity-js/jasmine~monkeyPatched",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "name": "ManageALocalServer",
    "externalLink": "/modules/local/class/src/screenplay/abilities/ManageALocalServer.ts~ManageALocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/abilities~ManageALocalServer",
    "memberof": "src/.imports-from-serenity-js-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "name": "StartLocalServer",
    "externalLink": "/modules/local/class/src/screenplay/interactions/StartLocalServer.ts~StartLocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/interactions~StartLocalServer",
    "memberof": "src/.imports-from-serenity-js-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "name": "StopLocalServer",
    "externalLink": "/modules/local/class/src/screenplay/interactions/StopLocalServer.ts~StopLocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/interactions~StopLocalServer",
    "memberof": "src/.imports-from-serenity-js-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "name": "LocalServer",
    "externalLink": "/modules/local/class/src/screenplay/questions/LocalServer.ts~LocalServer.html",
    "longname": "@serenity-js/local-server/lib/screenplay/questions~LocalServer",
    "memberof": "src/.imports-from-serenity-js-local-server.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "name": "MochaAdapter",
    "externalLink": "/modules/mocha/class/src/adapter/MochaAdapter.ts~MochaAdapter.html",
    "longname": "@serenity-js/mocha/lib/adapter~MochaAdapter",
    "memberof": "src/.imports-from-serenity-js-mocha.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "name": "MochaConfig",
    "externalLink": "/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html",
    "longname": "@serenity-js/mocha/lib/adapter~MochaConfig",
    "memberof": "src/.imports-from-serenity-js-mocha.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "name": "DeleteRequest",
    "externalLink": "/modules/rest/class/src/model/DeleteRequest.ts~DeleteRequest.html",
    "longname": "@serenity-js/rest/lib/model~DeleteRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "name": "GetRequest",
    "externalLink": "/modules/rest/class/src/model/GetRequest.ts~GetRequest.html",
    "longname": "@serenity-js/rest/lib/model~GetRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "name": "HTTPRequest",
    "externalLink": "/modules/rest/class/src/model/HTTPRequest.ts~HTTPRequest.html",
    "longname": "@serenity-js/rest/lib/model~HTTPRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "name": "HeadRequest",
    "externalLink": "/modules/rest/class/src/model/HeadRequest.ts~HeadRequest.html",
    "longname": "@serenity-js/rest/lib/model~HeadRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "name": "OptionsRequest",
    "externalLink": "/modules/rest/class/src/model/OptionsRequest.ts~OptionsRequest.html",
    "longname": "@serenity-js/rest/lib/model~OptionsRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "name": "PatchRequest",
    "externalLink": "/modules/rest/class/src/model/PatchRequest.ts~PatchRequest.html",
    "longname": "@serenity-js/rest/lib/model~PatchRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "name": "PostRequest",
    "externalLink": "/modules/rest/class/src/model/PostRequest.ts~PostRequest.html",
    "longname": "@serenity-js/rest/lib/model~PostRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "name": "PutRequest",
    "externalLink": "/modules/rest/class/src/model/PutRequest.ts~PutRequest.html",
    "longname": "@serenity-js/rest/lib/model~PutRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "name": "CallAnApi",
    "externalLink": "/modules/rest/class/src/screenplay/abilities/CallAnApi.ts~CallAnApi.html",
    "longname": "@serenity-js/rest/lib/screenplay/abilities~CallAnApi",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "name": "ChangeApiConfig",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/ChangeApiConfig.ts~ChangeApiConfig.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~ChangeApiConfig",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "name": "ChangeApiUrl",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/ChangeApiUrl.ts~ChangeApiUrl.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~ChangeApiUrl",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "name": "Send",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/Send.ts~Send.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~Send",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "name": "LastResponse",
    "externalLink": "/modules/rest/class/src/screenplay/questions/LastResponse.ts~LastResponse.html",
    "longname": "@serenity-js/rest/lib/screenplay/questions~LastResponse",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/adapter/Config.ts",
    "content": "import { SerenityConfig } from '@serenity-js/core';\nimport { Config as ProtractorConfig } from 'protractor';\n\n/**\n * @desc\n *  Protractor configuration object with an additional\n *  section to configure the Serenity/JS framework.\n *\n * @public\n * @interface\n *\n * @see {@link @serenity-js/core~SerenityConfig}\n *\n * @see https://github.com/angular/protractor/blob/master/lib/config.ts\n * @see {@link @serenity-js/core~configure}\n */\nexport interface Config extends ProtractorConfig {\n    serenity: SerenityConfig & { runner?: string };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/Config.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "class",
    "name": "Config",
    "memberof": "src/adapter/Config.ts",
    "static": true,
    "longname": "src/adapter/Config.ts~Config",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter",
    "importStyle": "{Config}",
    "description": " Protractor configuration object with an additional\n section to configure the Serenity/JS framework.",
    "see": [
      "{@link @serenity-js/core~SerenityConfig}",
      "https://github.com/angular/protractor/blob/master/lib/config.ts",
      "{@link @serenity-js/core~configure}"
    ],
    "lineNumber": 24,
    "interface": true,
    "extends": [
      "protractor~ProtractorConfig"
    ]
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "serenity",
    "memberof": "src/adapter/Config.ts~Config",
    "static": false,
    "longname": "src/adapter/Config.ts~Config#serenity",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "SerenityConfig & undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/adapter/ProtractorFrameworkAdapter.ts",
    "content": "import { ArtifactArchiver, Serenity } from '@serenity-js/core';\nimport { isPlainObject } from 'is-plain-object'; // tslint:disable-line:no-var-requires fails when using default import\nimport { protractor, Runner } from 'protractor';\nimport deepmerge = require('deepmerge');\n\nimport { BrowserDetector, StandardisedCapabilities } from './browser-detector';\nimport { Config } from './Config';\nimport { ProtractorReport, ProtractorReporter } from './reporter';\nimport { TestRunnerDetector } from './runner';\n\n/**\n * @private\n */\nexport class ProtractorFrameworkAdapter {\n    constructor(\n        private readonly serenity: Serenity,\n        private readonly protractorRunner: Runner,\n        private readonly detector: TestRunnerDetector,\n    ) {\n    }\n\n    /**\n     * @param {string[]} specs\n     *  Paths to spec files\n     *\n     * @return {Promise<ProtractorReport>}\n     */\n    run(specs: string[]): Promise<ProtractorReport> {\n\n        const noop      = () => void 0;\n\n        const runner    = this.detector.runnerFor(this.protractorRunner.getConfig());\n        const reporter  = new ProtractorReporter(this.protractorRunner, runner.successThreshold());\n\n        const config    = deepmerge<Config>(this.defaultConfig(), this.protractorRunner.getConfig(), {\n            isMergeableObject: isPlainObject,\n        });\n\n        this.serenity.configure({\n            cueTimeout:     config.serenity.cueTimeout,\n            actors:         config.serenity.actors,\n            crew:           [\n                BrowserDetector.with(StandardisedCapabilities.of(() => protractor.browser)),\n                ...config.serenity.crew,\n                reporter,\n            ],\n        });\n\n        return Promise.resolve()\n            .then(() => this.protractorRunner.runTestPreparer(TestRunnerDetector.protractorCliOptions()))\n            .then(() => runner.run(specs))\n            .then(() => Promise.resolve((config.onComplete || noop)()))\n            .then(() => reporter.report());\n    }\n\n    private defaultConfig(): Config {\n        return {\n            serenity: {\n                crew: [\n                    ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),\n                ],\n            },\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/ProtractorFrameworkAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "ProtractorFrameworkAdapter",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts",
    "static": true,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/ProtractorFrameworkAdapter.ts",
    "importStyle": "{ProtractorFrameworkAdapter}",
    "description": "",
    "lineNumber": 21,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#run",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": "Paths to spec files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ProtractorReport>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "defaultConfig",
    "memberof": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/ProtractorFrameworkAdapter.ts~ProtractorFrameworkAdapter#defaultConfig",
    "access": "private",
    "description": " ",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "Config"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/adapter/browser-detector/BrowserDetector.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport { AsyncOperationAttempted, AsyncOperationCompleted, DomainEvent, SceneStarts, SceneTagged } from '@serenity-js/core/lib/events';\nimport { BrowserTag, CorrelationId, Description, PlatformTag } from '@serenity-js/core/lib/model';\nimport { StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { platform } from 'os';\nimport { protractor } from 'protractor';\nimport { StandardisedCapabilities } from './StandardisedCapabilities';\n\n/**\n * @private\n *\n * @see https://github.com/serenity-js/serenity-js/issues/455\n * @see https://github.com/serenity-bdd/serenity-core/pull/1860/files\n * @see https://github.com/serenity-js/serenity-js/issues/132\n */\nexport class BrowserDetector implements StageCrewMember {\n\n    static with(capabilities: StandardisedCapabilities) {\n        return new BrowserDetector(capabilities);\n    }\n\n    constructor(\n        private readonly capabilities: StandardisedCapabilities,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        return new BrowserDetector(this.capabilities, stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            const id = CorrelationId.create();\n\n            this.stage.announce(new AsyncOperationAttempted(\n                new Description(`[${ this.constructor.name }] Detecting web browser details...`),\n                id,\n                this.stage.currentTime(),\n            ));\n\n            Promise.all([\n                this.capabilities.browserName(),\n                this.capabilities.browserVersion(),\n                this.capabilities.platformName(),\n                this.capabilities.platformVersion(),\n            ]).\n            then(([browserName, browserVersion, platformName, platformVersion]) => {\n\n                this.stage.announce(new SceneTagged(\n                    event.sceneId,\n                    new BrowserTag(browserName, browserVersion),\n                    this.stage.currentTime(),\n                ));\n\n                this.stage.announce(new SceneTagged(\n                    event.sceneId,\n                    new PlatformTag(platformName, platformVersion),\n                    this.stage.currentTime(),\n                ));\n\n                this.stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Detected web browser details`),\n                    id,\n                    this.stage.currentTime(),\n                ));\n            });\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/BrowserDetector.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "BrowserDetector",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts",
    "static": true,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/browser-detector/BrowserDetector.ts",
    "importStyle": "{BrowserDetector}",
    "description": "",
    "see": [
      "https://github.com/serenity-js/serenity-js/issues/455",
      "https://github.com/serenity-bdd/serenity-core/pull/1860/files",
      "https://github.com/serenity-js/serenity-js/issues/132"
    ],
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "with",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector.with",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "StandardisedCapabilities"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/BrowserDetector.ts~BrowserDetector#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/adapter/browser-detector/StandardisedCapabilities.ts",
    "content": "import { Capabilities, ProtractorBrowser } from 'protractor';\n\n/**\n * @private\n */\nexport class StandardisedCapabilities {\n    static of(currentBrowser: () => ProtractorBrowser) {\n        return new StandardisedCapabilities(currentBrowser);\n    }\n\n    constructor(private currentBrowser: () => ProtractorBrowser) {\n    }\n\n    browserName(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('browserName'),\n        );\n    }\n\n    browserVersion(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('version'),\n            caps => caps.get('browserVersion'),\n            caps => caps.has('deviceManufacturer') && caps.has('deviceModel')\n                ? `${ caps.get('deviceManufacturer') } ${ caps.get('deviceModel') }`\n                : undefined,\n            caps => caps.has('mobile') && caps.get('mobile').version,\n        ).\n        then(version =>\n            this.get(\n                caps => !! caps.get('mobileEmulationEnabled') && '(mobile emulation)',\n            ).then(suffix =>\n                [\n                    version,\n                    suffix,\n                ].filter(_ => !!_).join(' '),\n            ),\n        );\n    }\n\n    platformName(): PromiseLike<string> {\n        return this.get(\n            caps => (!! caps.get('platformName') && ! /any/i.test(caps.get('platformName')))\n                ? caps.get('platformName')\n                : caps.get('platform'),\n        );\n    }\n\n    platformVersion(): PromiseLike<string> {\n        return this.get(\n            caps => caps.get('platformVersion'),\n        );\n    }\n\n    private get(...fetchers: Array<(capabilities: Capabilities) => string>): PromiseLike<string> {\n        return this.currentBrowser().getCapabilities().then(caps => {\n            for (const fetcher of fetchers) {\n                const result = fetcher(caps);\n                if (!! result) {\n                    return result;\n                }\n            }\n            return undefined;\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/StandardisedCapabilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "class",
    "name": "StandardisedCapabilities",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts",
    "static": true,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/browser-detector/StandardisedCapabilities.ts",
    "importStyle": "{StandardisedCapabilities}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "of",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities.of",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "currentBrowser",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "browserName",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#browserName",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "browserVersion",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#browserVersion",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "platformName",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#platformName",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "platformVersion",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#platformVersion",
    "access": "public",
    "description": " ",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "get",
    "memberof": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/browser-detector/StandardisedCapabilities.ts~StandardisedCapabilities#get",
    "access": "private",
    "description": " ",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fetchers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/adapter/browser-detector/index.ts",
    "content": "export * from './BrowserDetector';\nexport * from './StandardisedCapabilities';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/browser-detector/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "src/adapter/index.ts",
    "content": "export * from './ProtractorFrameworkAdapter';\nexport * from './run';\nexport * from './runner';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/adapter/reporter/ProtractorReport.ts",
    "content": "import { SpecResult } from 'protractor/built/plugins';              // tslint:disable-line:no-submodule-imports\n\n/**\n * @desc\n *  A JSON object which needs to be returned to Protractor when {@link ProtractorFrameworkAdapter}\n *  is done with executing the test scenarios.\n *\n * @see https://github.com/angular/protractor/blob/master/lib/frameworks/README.md\n *\n * @private\n */\nexport interface ProtractorReport {\n    /**\n     * Total number of failed scenarios\n     */\n    failedCount: number;\n\n    /**\n     * Results per scenario\n     *\n     * Note: duration is not part of the SpecResult, but is being used by the Jasmine reporter\n     * https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L32\n     */\n    specResults: Array<SpecResult & { duration: number }>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/ProtractorReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "ProtractorReport",
    "memberof": "src/adapter/reporter/ProtractorReport.ts",
    "static": true,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/reporter/ProtractorReport.ts",
    "importStyle": "{ProtractorReport}",
    "description": " A JSON object which needs to be returned to Protractor when {@link ProtractorFrameworkAdapter}\n is done with executing the test scenarios.",
    "see": [
      "https://github.com/angular/protractor/blob/master/lib/frameworks/README.md"
    ],
    "lineNumber": 19,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "failedCount",
    "memberof": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport#failedCount",
    "access": "public",
    "description": "Total number of failed scenarios ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "specResults",
    "memberof": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReport.ts~ProtractorReport#specResults",
    "access": "public",
    "description": "Results per scenario\n\nNote: duration is not part of the SpecResult, but is being used by the Jasmine reporter\nhttps://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L32 ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/adapter/reporter/ProtractorReporter.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent, SceneFinished, SceneFinishes, SceneStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Description, ExecutionSkipped, Outcome, ProblemIndication, Timestamp } from '@serenity-js/core/lib/model';\nimport { StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { Runner } from 'protractor';\nimport { ProtractorReport } from './ProtractorReport';\n\n/**\n * @private\n */\nexport class ProtractorReporter implements StageCrewMember {\n    private readonly startTime: { [key: string ]: Timestamp } = {};\n\n    constructor(\n        private readonly runner: Runner,\n        private readonly successThreshold: Outcome | { Code: number } = ExecutionSkipped,\n        private readonly reported: ProtractorReport = { failedCount: 0, specResults: [] },\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        return new ProtractorReporter(this.runner, this.successThreshold, this.reported, stage);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            this.recordStart(event);\n        }\n\n        else if (event instanceof SceneFinishes) {\n            this.afterEach();\n        }\n\n        else if (event instanceof SceneFinished && event.outcome.isWorseThan(this.successThreshold)) {\n            this.recordFailure(event);\n\n            this.runner.emit('testFail', {\n                name: event.details.name.value,\n                category: event.details.category.value,\n            });\n        }\n        else if (event instanceof SceneFinished && ! event.outcome.isWorseThan(this.successThreshold)) {\n            this.recordSuccess(event);\n\n            this.runner.emit('testPass', {\n                name:       event.details.name.value,\n                category:   event.details.category.value,\n            });\n        }\n    }\n\n    report(): ProtractorReport {\n        return this.reported;\n    }\n\n    private recordFailure(event: SceneFinished) {\n        const outcome = (event.outcome as ProblemIndication);\n\n        this.reported.failedCount++;\n\n        this.reported.specResults.push({\n            description: `${ event.details.category.value } ${ event.details.name.value }`,\n            duration: event.timestamp.diff(this.startTime[event.details.toString()]).inMilliseconds(),\n            assertions: [{\n                passed: false,\n                errorMsg: outcome.error.message,\n                stackTrace: outcome.error.stack,\n            }],\n        });\n    }\n\n    private recordStart(event: SceneStarts) {\n        this.startTime[event.details.toString()] = event.timestamp;\n    }\n\n    private recordSuccess(event: SceneFinished) {\n        this.reported.specResults.push({\n            description: `${ event.details.category.value } ${ event.details.name.value }`,\n            duration: event.timestamp.diff(this.startTime[event.details.toString()]).inMilliseconds(),\n            assertions: [{\n                passed: true,\n            }],\n        });\n    }\n\n    private afterEach(): PromiseLike<void> {\n        if (! this.runner.afterEach) {\n            return Promise.resolve();\n        }\n\n        const id = CorrelationId.create();\n\n        this.stage.announce(new AsyncOperationAttempted(\n            new Description(`[${ this.constructor.name }] Invoking ProtractorRunner.afterEach...`),\n            id,\n            this.stage.currentTime(),\n        ));\n\n        return Promise.resolve(this.runner.afterEach() as PromiseLike<void> | undefined)\n            .then(\n                () =>\n                    this.stage.announce(new AsyncOperationCompleted(\n                        new Description(`[${ this.constructor.name }] ProtractorRunner.afterEach succeeded`),\n                        id,\n                        this.stage.currentTime(),\n                    )),\n                error =>\n                    this.stage.announce(new AsyncOperationFailed(error, id, this.stage.currentTime())),\n            );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/ProtractorReporter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "ProtractorReporter",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts",
    "static": true,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/adapter/reporter/ProtractorReporter.ts",
    "importStyle": "{ProtractorReporter}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#startTime",
    "access": "private",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "report",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#report",
    "access": "public",
    "description": " ",
    "lineNumber": 53,
    "return": {
      "nullable": null,
      "types": [
        "ProtractorReport"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "recordFailure",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordFailure",
    "access": "private",
    "description": " ",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "recordStart",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordStart",
    "access": "private",
    "description": " ",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "recordSuccess",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#recordSuccess",
    "access": "private",
    "description": " ",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "afterEach",
    "memberof": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/ProtractorReporter.ts~ProtractorReporter#afterEach",
    "access": "private",
    "description": " ",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/adapter/reporter/index.ts",
    "content": "export * from './ProtractorReport';\nexport * from './ProtractorReporter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/reporter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "src/adapter/run.ts",
    "content": "/* istanbul ignore file */\n\nimport { serenity } from '@serenity-js/core';\nimport { Path } from '@serenity-js/core/lib/io';\nimport { Runner } from 'protractor';\nimport { ProtractorFrameworkAdapter } from './ProtractorFrameworkAdapter';\nimport { ProtractorReport } from './reporter';\nimport { TestRunnerDetector, TestRunnerLoader } from './runner';\n\n/**\n * @param {protractor~Runner} runner\n * @param {string[]} specs\n * @returns {Promise<ProtractorReport>}\n *\n * @see https://github.com/angular/protractor/blob/master/lib/frameworks/README.md#framework-adapters-for-protractor\n */\nexport function run(runner: Runner, specs: string[]): Promise<ProtractorReport> {\n    const cwd = Path.from(runner.getConfig().configDir);\n\n    return new ProtractorFrameworkAdapter(\n        serenity,\n        runner,\n        new TestRunnerDetector(new TestRunnerLoader(cwd, process.pid)),\n    ).run(specs);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/run.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "run",
    "memberof": "src/adapter/run.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/run.ts~run",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter",
    "importStyle": "{run}",
    "description": "",
    "see": [
      "https://github.com/angular/protractor/blob/master/lib/frameworks/README.md#framework-adapters-for-protractor"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<ProtractorReport>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Runner"
        ],
        "spread": false,
        "optional": false,
        "name": "runner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ProtractorReport>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/adapter/runner/CucumberAdapterConfig.ts",
    "content": "/**\n * @public\n * @interface\n */\nexport interface CucumberAdapterConfig {\n    /**\n     * @desc\n     *  Instruct Serenity/JS Cucumber Adapter to take over the stdout output of native Cucumber reporters to prevent them from clobbering the log\n     *\n     * @type {boolean}\n     */\n    useStandardOutput: boolean;\n\n    /**\n     * @desc\n     *  Add `runnerId` to names of output files produced by native Cucumber.js formatters\n     *\n     * @type {boolean}\n     */\n    uniqueFormatterOutputs: boolean;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/runner/CucumberAdapterConfig.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "CucumberAdapterConfig",
    "memberof": "src/adapter/runner/CucumberAdapterConfig.ts",
    "static": true,
    "longname": "src/adapter/runner/CucumberAdapterConfig.ts~CucumberAdapterConfig",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter/runner",
    "importStyle": "{CucumberAdapterConfig}",
    "description": "",
    "lineNumber": 12,
    "interface": true
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "useStandardOutput",
    "memberof": "src/adapter/runner/CucumberAdapterConfig.ts~CucumberAdapterConfig",
    "static": false,
    "longname": "src/adapter/runner/CucumberAdapterConfig.ts~CucumberAdapterConfig#useStandardOutput",
    "access": "public",
    "description": " Instruct Serenity/JS Cucumber Adapter to take over the stdout output of native Cucumber reporters to prevent them from clobbering the log",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "uniqueFormatterOutputs",
    "memberof": "src/adapter/runner/CucumberAdapterConfig.ts~CucumberAdapterConfig",
    "static": false,
    "longname": "src/adapter/runner/CucumberAdapterConfig.ts~CucumberAdapterConfig#uniqueFormatterOutputs",
    "access": "public",
    "description": " Add `runnerId` to names of output files produced by native Cucumber.js formatters",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/adapter/runner/TestRunnerDetector.ts",
    "content": "import { TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport { Config as ProtractorConfig } from 'protractor';\nimport { TestRunnerLoader } from './TestRunnerLoader';\n\n/**\n * @desc\n *  Detects the {@link @serenity-js/core/lib/io~TestRunnerAdapter} to use,\n *  based on Protractor configuration.\n *\n * @public\n */\nexport class TestRunnerDetector {\n\n    static cucumberOpts = 'cucumberOpts';\n    static jasmineNodeOpts = 'jasmineNodeOpts';\n    static mochaOpts = 'mochaOpts';\n\n    static protractorCliOptions() {\n        return [\n            TestRunnerDetector.cucumberOpts,\n            TestRunnerDetector.jasmineNodeOpts,\n            TestRunnerDetector.mochaOpts,\n        ];\n    }\n\n    /**\n     * @param {TestRunnerLoader} testRunnerLoader\n     */\n    constructor(private readonly testRunnerLoader: TestRunnerLoader) {\n    }\n\n    /**\n     * @param {protractor~ProtractorConfig} config\n     * @returns {TestRunnerAdapter}\n     */\n    runnerFor(config: ProtractorConfig): TestRunnerAdapter {\n\n        const\n            specifiesRunnerFor = (type: string) =>\n                !!config.serenity &&\n                !!config.serenity.runner &&\n                config.serenity.runner === type;\n\n        switch (true) {\n            case specifiesRunnerFor('cucumber'):\n                return this.useCucumber(config);\n            case specifiesRunnerFor('jasmine'):\n                return this.useJasmine(config);\n            case specifiesRunnerFor('mocha'):\n                return this.useMocha(config);\n            case !! config.cucumberOpts:\n                return this.useCucumber(config);\n            case !! config.mochaOpts:\n                return this.useMocha(config);\n            case !! config.jasmineNodeOpts:\n            default:\n                return this.useJasmine(config);\n        }\n    }\n\n    private useJasmine(config: ProtractorConfig): TestRunnerAdapter {\n        return this.testRunnerLoader.forJasmine(this.mergedConfigFor(config, TestRunnerDetector.jasmineNodeOpts));\n    }\n\n    private useMocha(config: ProtractorConfig): TestRunnerAdapter {\n        return this.testRunnerLoader.forMocha(this.mergedConfigFor(config, TestRunnerDetector.mochaOpts));\n    }\n\n    private useCucumber(config: ProtractorConfig): TestRunnerAdapter {\n\n        const serenityReportingServicesConfigured  = config?.serenity?.crew?.length > 0;\n\n        return this.testRunnerLoader.forCucumber(this.mergedConfigFor(config, TestRunnerDetector.cucumberOpts), {\n            useStandardOutput:      serenityReportingServicesConfigured,\n            uniqueFormatterOutputs: this.multiCapabilitiesOrTestShardingEnabled(config),\n        })\n    }\n\n    private mergedConfigFor<K extends keyof ProtractorConfig>(config: ProtractorConfig = {}, key: K): ProtractorConfig[K] {\n        // tslint:disable-next-line:prefer-object-spread\n        return Object.assign(\n            {},\n            config[key],\n            (config.capabilities || {})[key],\n        );\n    }\n\n    private multiCapabilitiesOrTestShardingEnabled(config: ProtractorConfig): boolean {\n        return !! (\n            (Array.isArray(config.multiCapabilities) && config.multiCapabilities.length > 0)\n            || typeof config.getMultiCapabilities === 'function'\n            || config.capabilities?.shardTestFiles\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/runner/TestRunnerDetector.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "TestRunnerDetector",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts",
    "static": true,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter/runner",
    "importStyle": "{TestRunnerDetector}",
    "description": " Detects the {@link @serenity-js/core/lib/io~TestRunnerAdapter} to use,\n based on Protractor configuration.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "cucumberOpts",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "static": true,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector.cucumberOpts",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "jasmineNodeOpts",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "static": true,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector.jasmineNodeOpts",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "mochaOpts",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "static": true,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector.mochaOpts",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "protractorCliOptions",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector.protractorCliOptions",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestRunnerLoader"
        ],
        "spread": false,
        "optional": false,
        "name": "testRunnerLoader",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "runnerFor",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#runnerFor",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TestRunnerAdapter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "useJasmine",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#useJasmine",
    "access": "private",
    "description": " ",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "useMocha",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#useMocha",
    "access": "private",
    "description": " ",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "useCucumber",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#useCucumber",
    "access": "private",
    "description": " ",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "mergedConfigFor",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#mergedConfigFor",
    "access": "private",
    "description": " ",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "multiCapabilitiesOrTestShardingEnabled",
    "memberof": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerDetector.ts~TestRunnerDetector#multiCapabilitiesOrTestShardingEnabled",
    "access": "private",
    "description": " ",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "src/adapter/runner/TestRunnerLoader.ts",
    "content": "import { Config, FileFinder, FileSystem, ModuleLoader, Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport { CucumberConfig } from '@serenity-js/cucumber/lib/cli'; // tslint:disable-line:no-submodule-imports\nimport { CucumberAdapterConfig } from './CucumberAdapterConfig';\n\n/**\n * @desc\n *  Loads a {@link @serenity-js/core/lib/io~TestRunnerAdapter}, needed to invoke\n *  the chosen test runner programmatically.\n *\n * @public\n */\nexport class TestRunnerLoader {\n\n    private readonly moduleLoader: ModuleLoader;\n    private readonly fileSystem: FileSystem;\n    private readonly finder: FileFinder;\n\n    /**\n     * @param {@serenity-js/core/lib/io~Path} cwd\n     *  Current working directory; used to resolve glob paths to files for Cucumber.js to `require`,\n     *  and instructing Serenity/JS where to look for this module's optional\n     *  dependencies, like [`@serenity-js/cucumber`](/modules/cucumber),\n     *  [`@serenity-js/mocha`](/modules/mocha),\n     *  [`@serenity-js/jasmine`](/modules/jasmine), etc.\n     *\n     * @param {number | string} runnerId\n     *  Unique identifier used to differentiate output files produced by native Cucumber.js formatters.\n     *  For example, `process.pid`\n     */\n    constructor(cwd: Path, private readonly runnerId: number | string) {\n        this.moduleLoader   = new ModuleLoader(cwd.value);\n        this.fileSystem     = new FileSystem(cwd);\n        this.finder         = new FileFinder(cwd);\n    }\n\n    /**\n     * @param {@serenity-js/jasmine/lib/adapter~JasmineConfig} jasmineNodeOpts\n     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}\n     */\n    forJasmine(jasmineNodeOpts: object /* JasmineConfig */): TestRunnerAdapter {\n        const { JasmineAdapter } = this.moduleLoader.require('@serenity-js/jasmine/lib/adapter')\n        return new JasmineAdapter(jasmineNodeOpts, this.moduleLoader);\n    }\n\n    /**\n     * @param {@serenity-js/mocha/lib/adapter~MochaConfig} mochaOpts\n     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}\n     */\n    forMocha(mochaOpts: object /* MochaConfig */): TestRunnerAdapter {\n        const { MochaAdapter } = this.moduleLoader.require('@serenity-js/mocha/lib/adapter')\n        return new MochaAdapter(mochaOpts, this.moduleLoader);\n    }\n\n    /**\n     *\n     * @param {@serenity-js/cucumber/lib/cli~CucumberConfig} cucumberOpts\n     * @param {CucumberAdapterConfig} adapterConfig\n     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}\n     */\n    forCucumber(cucumberOpts: object /* CucumberConfig */, adapterConfig: CucumberAdapterConfig): TestRunnerAdapter {\n        const { CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput } = this.moduleLoader.require('@serenity-js/cucumber/lib/cli');\n\n        const config = new Config<CucumberConfig>(cucumberOpts)\n            .where('require', requires =>\n                this.finder.filesMatching(requires).map(p => p.value)\n            )\n            .whereIf(adapterConfig.uniqueFormatterOutputs, 'format', values =>\n                [].concat(values).map(value => {\n                    const format = new CucumberFormat(value);\n\n                    if (format.output === '') {\n                        return format.value;\n                    }\n\n                    const basename = Path.from(format.output).basename();\n                    const filenameParts = basename.split('.');\n\n                    if (filenameParts[0] === basename) {\n                        return `${ format.formatter }:${ format.output }.${ this.runnerId }`;\n                    }\n\n                    filenameParts.splice(-1, 0, `${ this.runnerId }`);\n\n                    return `${ format.formatter }:${ format.output.replace(basename, filenameParts.join('.')) }`;\n                })\n            );\n\n        const output = adapterConfig.useStandardOutput\n            ? new StandardOutput()\n            : new TempFileOutput(this.fileSystem);\n\n        return new CucumberCLIAdapter(config.object(), this.moduleLoader, output);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/runner/TestRunnerLoader.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "class",
    "name": "TestRunnerLoader",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts",
    "static": true,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/adapter/runner",
    "importStyle": "{TestRunnerLoader}",
    "description": " Loads a {@link @serenity-js/core/lib/io~TestRunnerAdapter}, needed to invoke\n the chosen test runner programmatically.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "moduleLoader",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#moduleLoader",
    "access": "private",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "ModuleLoader"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "fileSystem",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#fileSystem",
    "access": "private",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "FileSystem"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "finder",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#finder",
    "access": "private",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "FileFinder"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "cwd",
        "description": "Current working directory; used to resolve glob paths to files for Cucumber.js to `require`,\n and instructing Serenity/JS where to look for this module's optional\n dependencies, like [`@serenity-js/cucumber`](/modules/cucumber),\n [`@serenity-js/mocha`](/modules/mocha),\n [`@serenity-js/jasmine`](/modules/jasmine), etc."
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " string"
        ],
        "spread": false,
        "optional": false,
        "name": "runnerId",
        "description": "Unique identifier used to differentiate output files produced by native Cucumber.js formatters.\n For example, `process.pid`"
      }
    ]
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "forJasmine",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#forJasmine",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/io~TestRunnerAdapter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JasmineConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "jasmineNodeOpts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "forMocha",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#forMocha",
    "access": "public",
    "description": "",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/io~TestRunnerAdapter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MochaConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "mochaOpts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "forCucumber",
    "memberof": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/runner/TestRunnerLoader.ts~TestRunnerLoader#forCucumber",
    "access": "public",
    "description": "",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/io~TestRunnerAdapter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "CucumberConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "cucumberOpts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "CucumberAdapterConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "adapterConfig",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 309,
    "kind": "file",
    "name": "src/adapter/runner/index.ts",
    "content": "export * from './CucumberAdapterConfig';\nexport * from './TestRunnerLoader';\nexport * from './TestRunnerDetector';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/adapter/runner/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "src/expectations/ElementFinderExpectation.ts",
    "content": "import { AnswersQuestions, Expectation, ExpectationMet, ExpectationNotMet, ExpectationOutcome } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { promiseOf } from '../promiseOf';\n\n/**\n * @access private\n */\nexport class ElementFinderExpectation extends Expectation<any, ElementFinder> {\n    static forElementTo(message: string, fn: (actual: ElementFinder) => PromiseLike<boolean>): Expectation<any, ElementFinder> {\n        return new ElementFinderExpectation(message, fn);\n    }\n\n    constructor(\n        subject: string,\n        private readonly fn: (actual: ElementFinder) => PromiseLike<boolean>,\n    ) {\n        super(subject);\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: ElementFinder) => Promise<ExpectationOutcome<boolean, ElementFinder>> {\n\n        return (actual: ElementFinder) =>\n            promiseOf(this.fn(actual)).then(_ => _\n                ? new ExpectationMet(this.toString(), null, actual)\n                : new ExpectationNotMet(this.toString(), null, actual),\n            );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/ElementFinderExpectation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "class",
    "name": "ElementFinderExpectation",
    "memberof": "src/expectations/ElementFinderExpectation.ts",
    "static": true,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/expectations/ElementFinderExpectation.ts",
    "importStyle": "{ElementFinderExpectation}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "@serenity-js/core~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "forElementTo",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation.forElementTo",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementFinderExpectation.ts~ElementFinderExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "src/expectations/index.ts",
    "content": "export * from './isActive';\nexport * from './isClickable';\nexport * from './isEnabled';\nexport * from './isPresent';\nexport * from './isSelected';\nexport * from './isVisible';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/expectations/isActive.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { ElementFinder, WebElement } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is active.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isActive(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become active', (actual: ElementFinder) =>\n        actual.getWebElement().then(element =>\n            element.getDriver().switchTo().activeElement().then((active: WebElement) =>\n                actual.equals(active),\n            ),\n        ),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isActive.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "isActive",
    "memberof": "src/expectations/isActive.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isActive.ts~isActive",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isActive}",
    "description": " Expectation that the element is active.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "src/expectations/isClickable.ts",
    "content": "import { and } from '@serenity-js/assertions';\nimport { Expectation } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { isEnabled } from './isEnabled';\nimport { isVisible } from './isVisible';\n\n/**\n * @desc\n *  Expectation that the element is visible and enabled, and therefore clickable\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isClickable(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become clickable').soThatActual(and(isVisible(), isEnabled()));\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isClickable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "isClickable",
    "memberof": "src/expectations/isClickable.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isClickable.ts~isClickable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isClickable}",
    "description": " Expectation that the element is visible and enabled, and therefore clickable",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "src/expectations/isEnabled.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is enabled.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isEnabled(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become enabled', actual => actual.isEnabled());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isEnabled.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "isEnabled",
    "memberof": "src/expectations/isEnabled.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isEnabled.ts~isEnabled",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isEnabled}",
    "description": " Expectation that the element is enabled.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "src/expectations/isPresent.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of a page.\n *  Please note that this does not necessarily mean that the element is visible.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isPresent(): Expectation<boolean, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become present', actual => actual.isPresent());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isPresent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "function",
    "name": "isPresent",
    "memberof": "src/expectations/isPresent.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isPresent.ts~isPresent",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isPresent}",
    "description": " Expectation that the element is present in the DOM of a page.\n Please note that this does not necessarily mean that the element is visible.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/expectations/isSelected.ts",
    "content": "import { and } from '@serenity-js/assertions';\nimport { Expectation } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\nimport { isPresent } from './isPresent';\n\n/**\n * @desc\n *  Expectation that the element is present and selected\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isSelected(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become selected').soThatActual(and(\n        isPresent(),\n        ElementFinderExpectation.forElementTo('become selected', actual => actual.isSelected()),\n    ));\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isSelected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "isSelected",
    "memberof": "src/expectations/isSelected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isSelected.ts~isSelected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isSelected}",
    "description": " Expectation that the element is present and selected",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "file",
    "name": "src/expectations/isVisible.ts",
    "content": "import { and } from '@serenity-js/assertions';\nimport { Expectation } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { ElementFinderExpectation } from './ElementFinderExpectation';\nimport { isPresent } from './isPresent';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of the page and visible.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}\n *\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions~Check}\n * @see {@link Wait}\n */\nexport function isVisible(): Expectation<any, ElementFinder> {\n    return Expectation.to<ElementFinder>('become visible').soThatActual(and(\n        isPresent(),\n        isDisplayed(),\n    ));\n}\n\nfunction isDisplayed(): Expectation<any, ElementFinder> {\n    return ElementFinderExpectation.forElementTo('become displayed', actual => actual.isDisplayed());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/expectations/isVisible.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "isVisible",
    "memberof": "src/expectations/isVisible.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isVisible.ts~isVisible",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/expectations",
    "importStyle": "{isVisible}",
    "description": " Expectation that the element is present in the DOM of the page and visible.",
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "isDisplayed",
    "memberof": "src/expectations/isVisible.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isVisible.ts~isDisplayed",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/expectations/isVisible.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './expectations';\nexport * from './screenplay';\nexport * from './stage';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "src/promiseOf.ts",
    "content": "/**\n * @desc\n *  Wraps Webdriver promise into a Node-native promise to allow for correct promise chaining.\n *\n * @private\n *\n * @param promiseLike\n * @returns {Promise<T>}\n */\nexport function promiseOf<T>(promiseLike: PromiseLike<T>): Promise<T> {\n    return new Promise((resolve, reject) => {\n        promiseLike.then(resolve, reject);\n    });\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/promiseOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "promiseOf",
    "memberof": "src/promiseOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/promiseOf.ts~promiseOf",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/promiseOf.ts",
    "importStyle": "{promiseOf}",
    "description": " Wraps Webdriver promise into a Node-native promise to allow for correct promise chaining.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "promiseLike",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<T>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/screenplay/abilities/BrowseTheWeb.ts",
    "content": "// tslint:disable:member-ordering\n\nimport { Ability, ConfigurationError, LogicError, UsesAbilities } from '@serenity-js/core';\nimport { ActionSequence, ElementArrayFinder, ElementFinder, Locator, protractor, ProtractorBrowser } from 'protractor';\nimport { AlertPromise, Capabilities, Navigation, Options, WebElement } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\n\n/**\n * @desc\n *  An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link Actor} to interact with web front-ends using {@link protractor}.\n *\n * @example <caption>Using the protractor.browser</caption>\n *  import { Actor } from '@serenity-js/core';\n *  import { BrowseTheWeb, Navigate, Target } from '@serenity-js/protractor'\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { by, protractor } from 'protractor';\n *\n *  const actor = Actor.named('Wendy').whoCan(\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  const HomePage = {\n *      Title: Target.the('title').located(by.css('h1')),\n *  };\n *\n *  actor.attemptsTo(\n *      Navigate.to(`https://serenity-js.org`),\n *      Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n *  );\n *\n * @see https://www.protractortest.org/\n *\n * @public\n * @implements {@serenity-js/core/lib/screenplay~Ability}\n * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n */\nexport class BrowseTheWeb implements Ability {\n\n    /**\n     * @private\n     */\n    private lastScriptExecutionSummary: LastScriptExecutionSummary;\n\n    /**\n     * @private\n     */\n    private originalWindowHandle: string;\n\n    /**\n     * @desc\n     *  Ability to interact with web front-ends using a given protractor browser instance.\n     *\n     * @param {ProtractorBrowser} browser\n     * @returns {BrowseTheWeb}\n     */\n    static using(browser: ProtractorBrowser): BrowseTheWeb {\n        return new BrowseTheWeb(browser);\n    }\n\n    /**\n     * @desc\n     *  Used to access the Actor's ability to {@link BrowseTheWeb} from within the {@link Interaction} classes,\n     *  such as {@link Navigate}.\n     *\n     * @param {UsesAbilities} actor\n     * @return {BrowseTheWeb}\n     */\n    static as(actor: UsesAbilities): BrowseTheWeb {\n        return actor.abilityTo(BrowseTheWeb);\n    }\n\n    /**\n     * @param {ProtractorBrowser} browser\n     *  An instance of a protractor browser\n     */\n    constructor(protected browser: ProtractorBrowser) {\n    }\n\n    /**\n     * @desc\n     *  Navigate to the given destination and loads mock modules before Angular.\n     *  Assumes that the page being loaded uses Angular.\n     *\n     * @param {string} destination\n     * @param {number?} timeoutInMillis\n     *\n     * @returns {Promise<void>}\n     */\n    get(destination: string, timeoutInMillis?: number): Promise<void> {\n        return promiseOf(this.browser.get(destination, timeoutInMillis)\n            .then(() => this.browser.getWindowHandle())\n            .then(handle => {\n                this.originalWindowHandle = handle;\n            }),\n        );\n    }\n\n    /**\n     * @desc\n     *  Interface for navigating back and forth in the browser history.\n     *\n     *  @returns {Navigation}\n     */\n    navigate(): Navigation {\n        return this.browser.navigate();\n    }\n\n    /**\n     * @desc\n     *  Interface for defining sequences of complex user interactions.\n     *  Each sequence will not be executed until `perform` is called.\n     *\n     * @returns {ActionSequence}\n     *\n     * @see https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/actions.html\n     */\n    actions(): ActionSequence {\n        return this.browser.actions();\n    }\n\n    /**\n     * @desc\n     *  Interface for managing browser and driver state.\n     *\n     * @returns {Options}\n     *\n     * @see https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_WebDriver.html#manage\n     */\n    manage(): Options {\n        /*\n        this.browser.manage().deleteCookie();\n        this.browser.manage().deleteAllCookies();\n        return this.browser.manage().getCookie('asd');\n         */\n\n        return this.browser.manage();\n    }\n\n    /**\n     * @desc\n     *  Changes focus to the active modal dialog,\n     *  such as those opened by\n     *  [`Window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert),\n     *  [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt), or\n     *  [`Window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm).\n     *\n     * The returned promise will be rejected with an [`error.NoSuchAlertError`](https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/error_exports_NoSuchAlertError.html)\n     * if there are no open alerts.\n     *\n     * @returns {AlertPromise}\n     *\n     * @see https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_TargetLocator.html#alert\n     */\n    alert(): AlertPromise {\n        return this.browser.switchTo().alert();\n    }\n\n    /**\n     * @desc\n     *  Switches the focus to a [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame) or\n     *  [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) identified by `elementOrIndexOrName`,\n     *  which can be specified either as {@link selenium-webdriver~WebElement}, the name of the frame, or its index.\n     *\n     * @param {number | string | WebElement} elementOrIndexOrName\n     *\n     * @returns {Promise<void>}\n     */\n    switchToFrame(elementOrIndexOrName: number | string | WebElement): Promise<void> {\n        // incorrect type definition in selenium-webdriver prevents us from providing a string arg\n        return promiseOf(this.browser.switchTo().frame(elementOrIndexOrName as any));\n    }\n\n    /**\n     * @desc\n     *  Switches the focus from any [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame) or\n     *  [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) back to its parent iframe.\n     *\n     * @returns {Promise<void>}\n     */\n    switchToParentFrame(): Promise<void> {\n        return promiseOf(this.browser.driver.switchToParentFrame());\n    }\n\n    /**\n     * @desc\n     *  Switches the focus from any [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame)\n     *  or [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) back to default content,\n     *  a.k.a. \"the main window\".\n     *\n     * @returns {Promise<void>}\n     */\n    switchToDefaultContent(): Promise<void> {\n        return promiseOf(this.browser.switchTo().defaultContent());\n    }\n\n    /**\n     * @desc\n     *  Switches browser window/tab to the one identified by `nameOrHandleOrIndex`,\n     *  which can be specified as the name of the window to switch to, its handle, or numeric index.\n     *\n     * @param {string | number} nameOrHandleOrIndex\n     *\n     * @returns {Promise<void>}\n     */\n    switchToWindow(nameOrHandleOrIndex: string | number): Promise<void> {\n        return typeof nameOrHandleOrIndex === 'string'\n            ? this.switchToWindowByNameOrHandle(nameOrHandleOrIndex)\n            : this.switchToWindowByIndex(nameOrHandleOrIndex);\n    }\n\n    /**\n     * @param {string} nameOrHandle\n     * @private\n     */\n    private switchToWindowByNameOrHandle(nameOrHandle: string): Promise<void> {\n        return promiseOf(this.browser.switchTo().window(nameOrHandle));\n    }\n\n    /**\n     * @param {number} index\n     * @private\n     */\n    private switchToWindowByIndex(index: number): Promise<void> {\n        return promiseOf(this.browser.getAllWindowHandles().then(handles => {\n            const handle = handles[index];\n\n            if (! handle) {\n                throw new LogicError(`Window ${ index } doesn't exist`)\n            }\n\n            return this.browser.switchTo().window(handle);\n        }));\n    }\n\n    /**\n     * @desc\n     *  Switches the window back to the original one that was used to call {@link get}.\n     *\n     * @returns {Promise<void>}\n     */\n    switchToOriginalWindow(): Promise<void> {\n        return !! this.originalWindowHandle\n            ? promiseOf(this.browser.switchTo().window(this.originalWindowHandle))\n            : Promise.resolve();\n    }\n\n    /**\n     * @desc\n     *  Returns the handle of the browser window last used to navigate to a URL.\n     *\n     * @returns {Promise<string>}\n     *  A window handle\n     *\n     * @see {@link get}\n     */\n    getOriginalWindowHandle(): Promise<string> {\n        return Promise.resolve(this.originalWindowHandle);\n    }\n\n    /**\n     * @desc\n     *  Returns the current window handle.\n     *  Please note that the current handle changes with each browser window you {@link Switch} to.\n     *\n     * @returns {Promise<string>}\n     *  A window handle\n     *\n     * @see {@link get}\n     */\n    getCurrentWindowHandle(): Promise<string> {\n        return promiseOf(this.browser.getWindowHandle());\n    }\n\n    /**\n     * @desc\n     *  Returns the handles of all the available windows.\n     *\n     *  Please note that while some browsers organise entries of this list in the same order\n     *  new windows have been spawned, other browsers order it alphabetically.\n     *  For this reason, you should not make any assumptions about how this list is ordered.\n     *\n     * @returns {Promise<string[]>}\n     *  A list of window handles\n     */\n    getAllWindowHandles(): Promise<string[]> {\n        return promiseOf(this.browser.getAllWindowHandles());\n    }\n\n    /**\n     * @desc\n     *  Closes the currently active browser window/tab.\n     *\n     * @returns {Promise<void>}\n     */\n    closeCurrentWindow(): Promise<void> {\n        return promiseOf(this.browser.close());\n    }\n\n    /**\n     * @desc\n     *  Locates a single element identified by the locator\n     *\n     * @param {Locator} locator\n     * @returns {ElementFinder}\n     */\n    locate(locator: Locator): ElementFinder {\n        return this.browser.element(locator);\n    }\n\n    /**\n     * @desc\n     *  Locates all elements identified by the locator\n     *\n     * @param {Locator} locator\n     * @returns {ElementArrayFinder}\n     */\n    locateAll(locator: Locator): ElementArrayFinder {\n        return this.browser.element.all(locator);\n    }\n\n    /**\n     * @desc\n     * If set to false, Protractor will not wait for Angular $http and $timeout\n     * tasks to complete before interacting with the browser.\n     *\n     * This can be useful when:\n     * - you need to switch to a non-Angular app during your tests (i.e. SSO login gateway)\n     * - your app continuously polls an API with $timeout\n     *\n     * If you're not testing an Angular app, it's better to disable Angular synchronisation completely\n     * in protractor configuration:\n     *\n     * @example <caption>protractor.conf.js</caption>\n     * exports.config = {\n     *     onPrepare: function () {\n     *         return browser.waitForAngularEnabled(false);\n     *     },\n     *\n     *     // ... other config\n     * };\n     *\n     * @param {boolean} enable\n     *\n     * @returns {Promise<boolean>}\n     */\n    enableAngularSynchronisation(enable: boolean): Promise<boolean> {\n        return promiseOf(this.browser.waitForAngularEnabled(enable));\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  The script may refer to any variables accessible from the current window.\n     *  Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n     *  to the current document. Any local variables will not be available once the script has finished executing,\n     *  though global variables will persist.\n     *\n     *  If the script has a return value (i.e. if the script contains a `return` statement),\n     *  then the following steps will be taken for resolving this functions return value:\n     *\n     *  For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   return arguments[0].tagName;\n     * `, Target.the('header').located(by.css(h1))\n     *\n     * @see https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeScript\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string} description  - useful for debugging\n     * @param {string | Function} script\n     * @param {any[]} args\n     *\n     * @returns {Promise<any>}\n     *\n     * @see {@link BrowseTheWeb#getLastScriptExecutionResult}\n     */\n    executeScript(description: string, script: string | Function, ...args: any[]): Promise<any> {        // tslint:disable-line:ban-types\n        return promiseOf(this.browser.executeScriptWithDescription(script, description, ...args))\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary(\n                    result,\n                );\n                return result;\n            });\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  The following steps will be taken for resolving this functions return value against\n     *  the first argument to the script's callback function:\n     *\n     *  - For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var delay    = arguments[0];\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   window.setTimeout(callback, delay);\n     * `, 500)\n     *\n     * @example <caption>Return a value asynchronously</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   callback('some return value')\n     * `).then(value => doSomethingWithThe(value))\n     *\n     * @see https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string|Function} script\n     * @param {any[]} args\n     *\n     * @returns {Promise<any>}\n     *\n     * @see {@link BrowseTheWeb#getLastScriptExecutionResult}\n     */\n    executeAsyncScript(script: string | Function, ...args: any[]): Promise<any> {   // tslint:disable-line:ban-types\n        return promiseOf(this.browser.executeAsyncScript(script, ...args))\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary(\n                    result,\n                );\n                return result;\n            });\n        // todo: should I wrap this an provide additional diagnostic information? execution time? error handling?\n    }\n\n    /**\n     * @desc\n     *  Schedule a command to take a screenshot. The driver makes a best effort to\n     *  return a base64-encoded screenshot of the following, in order of preference:\n     *\n     *  1. Entire page\n     *  2. Current window\n     *  3. Visible portion of the current frame\n     *  4. The entire display containing the browser\n     *\n     * @return {Promise<string>} A promise that will be resolved to a base64-encoded screenshot PNG\n     */\n    takeScreenshot(): Promise<string> {\n        return promiseOf(this.browser.takeScreenshot());\n    }\n\n    /**\n     * @desc\n     *  Returns the title of the current page.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\n     *\n     * @returns {Promise<string>}\n     */\n    getTitle(): Promise<string> {\n        return promiseOf(this.browser.getTitle());\n    }\n\n    /**\n     * @desc\n     *  Returns the url of the current page.\n     *\n     * @returns {Promise<string>}\n     */\n    getCurrentUrl(): Promise<string> {\n        return promiseOf(this.browser.getCurrentUrl());\n    }\n\n    /**\n     * @desc\n     *  Returns the  capabilities of the browser used in the current session.\n     *\n     *  By default, the session `capabilities` specified in the `protractor.conf.js`\n     *  indicate the _desired_ properties of the remote browser. However, if the remote cannot satisfy\n     *  all the requirements, it will still create a session.\n     *\n     * @returns {Promise<Capabilities>} The actual capabilities of this browser.\n     */\n    getCapabilities(): Promise<Capabilities> {\n        return promiseOf(this.browser.getCapabilities());\n    }\n\n    /**\n     * @desc\n     *  Pause the actor flow for a specified number of milliseconds.\n     *\n     * @param {number} millis\n     * @returns {Promise<void>}\n     */\n    sleep(millis: number): Promise<void> {\n        return promiseOf(this.browser.sleep(millis));\n    }\n\n    /**\n     * @desc\n     *  Pause the actor flow until the condition is met or the timeout expires.\n     *\n     * @param {function(): Promise<boolean>} condition\n     * @param {number} timeoutInMillis\n     * @returns {Promise<boolean>}\n     */\n    wait(condition: () => Promise<boolean>, timeoutInMillis: number): Promise<boolean> {\n        return promiseOf(this.browser.wait(condition, timeoutInMillis));\n    }\n\n    /**\n     * @desc\n     *  Returns the last result of calling {@link BrowseTheWeb#executeAsyncScript}\n     *  or {@link BrowseTheWeb#executeScript}\n     *\n     * @returns {any}\n     */\n    getLastScriptExecutionResult(): any {\n        if (! this.lastScriptExecutionSummary) {\n            throw new LogicError(`Make sure to execute a script before checking on the result`);\n        }\n\n        return this.lastScriptExecutionSummary.result;\n    }\n\n    /**\n     * @desc\n     *  Returns Protractor configuration parameter at `path`.\n     *\n     * @example <caption>protractor.conf.js</caption>\n     *  exports.config = {\n     *    params: {\n     *        login: {\n     *            username: 'jane@example.org'\n     *            password: process.env.PASSWORD\n     *        }\n     *    }\n     *    // ...\n     * }\n     *\n     * @example <caption>Retrieving config param by name</caption>\n     *  BrowseTheWeb.as(actor).param('login') // returns object with username and password\n     *\n     * @example <caption>Retrieving config param by path</caption>\n     *  BrowseTheWeb.as(actor).param('login.username') // returns string 'jane@example.org'\n     *\n     * @param {string} path\n     *  Either a name or a dot-delimited path to the param.\n     *\n     * @returns {T}\n     *\n     * @throws {@serenity-js/core/lib/errors~ConfigurationError}\n     *  Throws a `ConfigurationError` if the parameter is `undefined`\n     */\n    param<T = any>(path: string): T {\n        return path.split('.')\n            .reduce((config, segment) => {\n                if (! (config && config[segment] !== undefined)) {\n                    throw new ConfigurationError(`Protractor param '${ path }' is undefined`);\n                }\n\n                return config[segment];\n            }, this.browser.params);\n    }\n}\n\n/**\n * @package\n */\nclass LastScriptExecutionSummary {\n    constructor(public readonly result: any) {}\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/abilities/BrowseTheWeb.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "BrowseTheWeb",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/abilities",
    "importStyle": "{BrowseTheWeb}",
    "description": " An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link Actor} to interact with web front-ends using {@link protractor}.",
    "examples": [
      "<caption>Using the protractor.browser</caption>\n import { Actor } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate, Target } from '@serenity-js/protractor'\n import { Ensure, equals } from '@serenity-js/assertions';\n import { by, protractor } from 'protractor';\n\n const actor = Actor.named('Wendy').whoCan(\n     BrowseTheWeb.using(protractor.browser),\n );\n\n const HomePage = {\n     Title: Target.the('title').located(by.css('h1')),\n };\n\n actor.attemptsTo(\n     Navigate.to(`https://serenity-js.org`),\n     Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n );"
    ],
    "see": [
      "https://www.protractortest.org/",
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}"
    ],
    "lineNumber": 44,
    "interface": false,
    "implements": [
      "Ability"
    ]
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "lastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#lastScriptExecutionSummary",
    "access": "private",
    "description": "",
    "lineNumber": 60,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "originalWindowHandle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#originalWindowHandle",
    "access": "private",
    "description": "",
    "lineNumber": 76,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "using",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.using",
    "access": "public",
    "description": " Ability to interact with web front-ends using a given protractor browser instance.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BrowseTheWeb}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorBrowser"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.as",
    "access": "public",
    "description": " Used to access the Actor's ability to {@link BrowseTheWeb} from within the {@link Interaction} classes,\n such as {@link Navigate}.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProtractorBrowser"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "An instance of a protractor browser"
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#get",
    "access": "public",
    "description": " Navigate to the given destination and loads mock modules before Angular.\n Assumes that the page being loaded uses Angular.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number?"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutInMillis",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "navigate",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#navigate",
    "access": "public",
    "description": " Interface for navigating back and forth in the browser history.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Navigation}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Navigation"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "actions",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#actions",
    "access": "public",
    "description": " Interface for defining sequences of complex user interactions.\n Each sequence will not be executed until `perform` is called.",
    "see": [
      "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/actions.html"
    ],
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ActionSequence}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActionSequence"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "manage",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#manage",
    "access": "public",
    "description": " Interface for managing browser and driver state.",
    "see": [
      "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_WebDriver.html#manage"
    ],
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Options}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Options"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "alert",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#alert",
    "access": "public",
    "description": " Changes focus to the active modal dialog,\n such as those opened by\n [`Window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert),\n [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt), or\n [`Window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm).\n\nThe returned promise will be rejected with an [`error.NoSuchAlertError`](https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/error_exports_NoSuchAlertError.html)\nif there are no open alerts.",
    "see": [
      "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_TargetLocator.html#alert"
    ],
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AlertPromise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AlertPromise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "switchToFrame",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToFrame",
    "access": "public",
    "description": " Switches the focus to a [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame) or\n [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) identified by `elementOrIndexOrName`,\n which can be specified either as {@link selenium-webdriver~WebElement}, the name of the frame, or its index.",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number ",
          " string ",
          " WebElement"
        ],
        "spread": false,
        "optional": false,
        "name": "elementOrIndexOrName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "switchToParentFrame",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToParentFrame",
    "access": "public",
    "description": " Switches the focus from any [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame) or\n [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) back to its parent iframe.",
    "lineNumber": 322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "switchToDefaultContent",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToDefaultContent",
    "access": "public",
    "description": " Switches the focus from any [`frame`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame)\n or [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) back to default content,\n a.k.a. \"the main window\".",
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "switchToWindow",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToWindow",
    "access": "public",
    "description": " Switches browser window/tab to the one identified by `nameOrHandleOrIndex`,\n which can be specified as the name of the window to switch to, its handle, or numeric index.",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " number"
        ],
        "spread": false,
        "optional": false,
        "name": "nameOrHandleOrIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "switchToWindowByNameOrHandle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToWindowByNameOrHandle",
    "access": "private",
    "description": "",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nameOrHandle",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "switchToWindowByIndex",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToWindowByIndex",
    "access": "private",
    "description": "",
    "lineNumber": 415,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "switchToOriginalWindow",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#switchToOriginalWindow",
    "access": "public",
    "description": " Switches the window back to the original one that was used to call {@link get}.",
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "getOriginalWindowHandle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getOriginalWindowHandle",
    "access": "public",
    "description": " Returns the handle of the browser window last used to navigate to a URL.",
    "see": [
      "{@link get}"
    ],
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}\n A window handle"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "A window handle"
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "getCurrentWindowHandle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getCurrentWindowHandle",
    "access": "public",
    "description": " Returns the current window handle.\n Please note that the current handle changes with each browser window you {@link Switch} to.",
    "see": [
      "{@link get}"
    ],
    "lineNumber": 495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}\n A window handle"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "A window handle"
    },
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "getAllWindowHandles",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getAllWindowHandles",
    "access": "public",
    "description": " Returns the handles of all the available windows.\n\n Please note that while some browsers organise entries of this list in the same order\n new windows have been spawned, other browsers order it alphabetically.\n For this reason, you should not make any assumptions about how this list is ordered.",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string[]>}\n A list of window handles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string[]>"
      ],
      "spread": false,
      "description": "A list of window handles"
    },
    "params": []
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "closeCurrentWindow",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#closeCurrentWindow",
    "access": "public",
    "description": " Closes the currently active browser window/tab.",
    "lineNumber": 542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "locate",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#locate",
    "access": "public",
    "description": " Locates a single element identified by the locator",
    "lineNumber": 566,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "locateAll",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#locateAll",
    "access": "public",
    "description": " Locates all elements identified by the locator",
    "lineNumber": 590,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementArrayFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementArrayFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "enableAngularSynchronisation",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#enableAngularSynchronisation",
    "access": "public",
    "description": "If set to false, Protractor will not wait for Angular $http and $timeout\ntasks to complete before interacting with the browser.\n\nThis can be useful when:\n- you need to switch to a non-Angular app during your tests (i.e. SSO login gateway)\n- your app continuously polls an API with $timeout\n\nIf you're not testing an Angular app, it's better to disable Angular synchronisation completely\nin protractor configuration:",
    "examples": [
      "<caption>protractor.conf.js</caption>\nexports.config = {\n    onPrepare: function () {\n        return browser.waitForAngularEnabled(false);\n    },\n\n    // ... other config\n};"
    ],
    "lineNumber": 632,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "executeScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeScript",
    "access": "public",
    "description": " Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n The script may refer to any variables accessible from the current window.\n Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n to the current document. Any local variables will not be available once the script has finished executing,\n though global variables will persist.\n\n If the script has a return value (i.e. if the script contains a `return` statement),\n then the following steps will be taken for resolving this functions return value:\n\n For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  return arguments[0].tagName;\n`, Target.the('header').located(by.css(h1))"
    ],
    "see": [
      "https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeScript",
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-",
      "{@link BrowseTheWeb#getLastScriptExecutionResult}"
    ],
    "lineNumber": 695,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "useful for debugging"
      },
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "executeAsyncScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeAsyncScript",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n The following steps will be taken for resolving this functions return value against\n the first argument to the script's callback function:\n\n - For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var delay    = arguments[0];\n  var callback = arguments[arguments.length - 1];\n\n  window.setTimeout(callback, delay);\n`, 500)",
      "<caption>Return a value asynchronously</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var callback = arguments[arguments.length - 1];\n\n  callback('some return value')\n`).then(value => doSomethingWithThe(value))"
    ],
    "see": [
      "https://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript",
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-",
      "{@link BrowseTheWeb#getLastScriptExecutionResult}"
    ],
    "lineNumber": 772,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "takeScreenshot",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#takeScreenshot",
    "access": "public",
    "description": " Schedule a command to take a screenshot. The driver makes a best effort to\n return a base64-encoded screenshot of the following, in order of preference:\n\n 1. Entire page\n 2. Current window\n 3. Visible portion of the current frame\n 4. The entire display containing the browser",
    "lineNumber": 806,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "A promise that will be resolved to a base64-encoded screenshot PNG"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "getTitle",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getTitle",
    "access": "public",
    "description": " Returns the title of the current page.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title"
    ],
    "lineNumber": 829,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "getCurrentUrl",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getCurrentUrl",
    "access": "public",
    "description": " Returns the url of the current page.",
    "lineNumber": 850,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getCapabilities",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getCapabilities",
    "access": "public",
    "description": " Returns the  capabilities of the browser used in the current session.\n\n By default, the session `capabilities` specified in the `protractor.conf.js`\n indicate the _desired_ properties of the remote browser. However, if the remote cannot satisfy\n all the requirements, it will still create a session.",
    "lineNumber": 875,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Capabilities>} The actual capabilities of this browser."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Capabilities>"
      ],
      "spread": false,
      "description": "The actual capabilities of this browser."
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#sleep",
    "access": "public",
    "description": " Pause the actor flow for a specified number of milliseconds.",
    "lineNumber": 899,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "millis",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "wait",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#wait",
    "access": "public",
    "description": " Pause the actor flow until the condition is met or the timeout expires.",
    "lineNumber": 926,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(): Promise<boolean>"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutInMillis",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "getLastScriptExecutionResult",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getLastScriptExecutionResult",
    "access": "public",
    "description": " Returns the last result of calling {@link BrowseTheWeb#executeAsyncScript}\n or {@link BrowseTheWeb#executeScript}",
    "lineNumber": 948,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "param",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#param",
    "access": "public",
    "description": " Returns Protractor configuration parameter at `path`.",
    "examples": [
      "<caption>protractor.conf.js</caption>\n exports.config = {\n   params: {\n       login: {\n           username: 'jane@example.org'\n           password: process.env.PASSWORD\n       }\n   }\n   // ...\n}",
      "<caption>Retrieving config param by name</caption>\n BrowseTheWeb.as(actor).param('login') // returns object with username and password",
      "<caption>Retrieving config param by path</caption>\n BrowseTheWeb.as(actor).param('login.username') // returns string 'jane@example.org'"
    ],
    "lineNumber": 998,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{T}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Either a name or a dot-delimited path to the param."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "ConfigurationError"
        ],
        "description": "Throws a `ConfigurationError` if the parameter is `undefined`"
      }
    ]
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "LastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/abilities/BrowseTheWeb.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 1020,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 1021,
    "undocument": true
  },
  {
    "__docId__": 373,
    "kind": "file",
    "name": "src/screenplay/abilities/index.ts",
    "content": "export * from './BrowseTheWeb';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/abilities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "src/screenplay/index.ts",
    "content": "export * from './abilities';\nexport * from './interactions';\nexport * from './questions';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "src/screenplay/interactions/Accept.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { AlertPromise } from 'selenium-webdriver';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to accept\n *  a {@link ModalDialog}.\n *\n * @example <caption>Example widget</caption>\n *  <button\n *      data-test=\"trigger\"\n *      onclick=\"alert('hello!')\">Trigger Alert</button>\n *\n * @example <caption>Lean Page Object</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Widget {\n *      static trigger = Target.the('trigger button')\n *          .located(by.css('[data-test=\"trigger\"]'));\n *  }\n *\n * @example <caption>Accepting a modal dialog window</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Accept, BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Nick')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Click.on(Widget.trigger),\n *          Accept.the(ModalDialog.window()),\n *      );\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Click}\n * @see {@link Dismiss}\n * @see {@link ModalDialog}\n */\nexport class Accept extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with a {@link ModalDialog.window} the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will accept.\n     *\n     * @param {@serenity-js/core/lib/screenplay~Question<AlertPromise> | AlertPromise} modalDialogWindow\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay~Question}\n     */\n    static the(modalDialogWindow: Question<AlertPromise> | AlertPromise): Interaction {\n        return new Accept(modalDialogWindow);\n    }\n\n    /**\n     * @param {@serenity-js/core/lib/screenplay~Question<AlertPromise> | AlertPromise} modalDialogWindow\n     */\n    constructor(private readonly modalDialogWindow: Question<AlertPromise> | AlertPromise) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.modalDialogWindow)\n            .then(alert => alert.accept());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor accepts ${ this.modalDialogWindow }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Accept.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "Accept",
    "memberof": "src/screenplay/interactions/Accept.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Accept.ts~Accept",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Accept}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to accept\n a {@link ModalDialog}.",
    "examples": [
      "<caption>Example widget</caption>\n <button\n     data-test=\"trigger\"\n     onclick=\"alert('hello!')\">Trigger Alert</button>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Widget {\n     static trigger = Target.the('trigger button')\n         .located(by.css('[data-test=\"trigger\"]'));\n }",
      "<caption>Accepting a modal dialog window</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Widget.trigger),\n         Accept.the(ModalDialog.window()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Click}",
      "{@link Dismiss}",
      "{@link ModalDialog}"
    ],
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Accept.ts~Accept",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Accept.ts~Accept.the",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with a {@link ModalDialog.window} the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will accept.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay~Question}"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<AlertPromise> ",
          " AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "modalDialogWindow",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Accept.ts~Accept",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Accept.ts~Accept#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<AlertPromise> ",
          " AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "modalDialogWindow",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Accept.ts~Accept",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Accept.ts~Accept#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Accept.ts~Accept",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Accept.ts~Accept#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "src/screenplay/interactions/Clear.ts",
    "content": "import { AnswersQuestions, Interaction, LogicError, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder, protractor } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  clear the `value` of a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Clearing the value of an input field</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Clear, Enter, Value } from '@serenity-js/protractor';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Inés')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Enter.theValue('Hello world!').into(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('Hello world!')),\n *\n *          Clear.theValueOf(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('')),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Enter}\n * @see {@link Value}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Clear extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} field\n     *  The field to be cleared\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static theValueOf(field: Question<ElementFinder> | ElementFinder): Interaction {\n        return new Clear(field);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} field\n     *  The field to be cleared\n     */\n    constructor(private readonly field: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.field, (elf: ElementFinder) =>\n            elf.getAttribute('value').then(value => {\n                if (value === null) {\n                    throw new LogicError(\n                        `${ this.capitaliseFirstLetter(this.field.toString()) } doesn't seem to have a 'value' attribute that could be cleared.`,\n                    );\n                }\n\n                return this.removeCharactersFrom(elf, value.length);\n            }));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor clears the value of ${ this.field }`;\n    }\n\n    private capitaliseFirstLetter(text: string) {\n        return text.charAt(0).toUpperCase() + text.substring(1);\n    }\n\n    private removeCharactersFrom(elf: ElementFinder, numberOfCharacters: number): PromiseLike<void> {\n        return numberOfCharacters === 0\n            ? Promise.resolve(void 0)\n            : elf.sendKeys(\n                protractor.Key.END,\n                ...this.times(numberOfCharacters, protractor.Key.BACK_SPACE),\n            );\n    }\n\n    private times(n: number, key: string) {\n        return Array.from(new Array(n)).map(() => key);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Clear.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "Clear",
    "memberof": "src/screenplay/interactions/Clear.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Clear}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n clear the `value` of a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Clearing the value of an input field</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Clear, Enter, Value } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Inés')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Enter.theValue('Hello world!').into(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('Hello world!')),\n\n         Clear.theValueOf(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Enter}",
      "{@link Value}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 57,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "theValueOf",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear.theValueOf",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to be cleared"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 384,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to be cleared"
      }
    ]
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "capitaliseFirstLetter",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#capitaliseFirstLetter",
    "access": "private",
    "description": " ",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "removeCharactersFrom",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#removeCharactersFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "elf",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfCharacters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "times",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#times",
    "access": "private",
    "description": " ",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "src/screenplay/interactions/Click.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  [click](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event) on a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, isSelected } from '@serenity-js/protractor';\n *  import { Ensure } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Chloé')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Click.on(Form.exampleInput),\n *          Ensure.that(Form.exampleInput, isSelected()),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link isSelected}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Click extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be clicked on\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static on(target: Question<ElementFinder> | ElementFinder): Interaction {\n        return new Click(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be clicked on\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) => elf.click());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor clicks on ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Click.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "class",
    "name": "Click",
    "memberof": "src/screenplay/interactions/Click.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Click}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n [click](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event) on a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, isSelected } from '@serenity-js/protractor';\n import { Ensure } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Chloé')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Form.exampleInput),\n         Ensure.that(Form.exampleInput, isSelected()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link isSelected}"
    ],
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click.on",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be clicked on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 393,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be clicked on"
      }
    ]
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "src/screenplay/interactions/Close.ts",
    "content": "import { AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  close browser tabs or windows.\n *\n * @example <caption>Closing a browser tab or window</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, Close, Switch } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Caleb')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Click.on(someLinkThatOpensANewWindow),\n *\n *          Switch.toNewWindow().and(\n *              // perform activities in the context of the new window\n *              Close.currentWindow(),\n *          ),\n *      );\n *\n * @example <caption>Closing any new windows after a Jasmine test</caption>\n *  import 'jasmine';\n *\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { Close } from '@serenity-js/protractor';\n *\n *  after(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          Close.anyNewWindows(),\n *      ));\n *\n * @example <caption>Closing any new windows after a Mocha test</caption>\n *  import 'mocha';\n *\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { Close } from '@serenity-js/protractor';\n *\n *  after(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          Close.anyNewWindows(),\n *      ));\n *\n * @example <caption>Closing any new windows after a    Cucumber scenario</caption>\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { Close } from '@serenity-js/protractor';\n *  import { After } from 'cucumber';\n *\n *  After(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          Close.anyNewWindows(),\n *      ));\n *\n * @see {@link Switch}\n */\nexport class Close {\n\n    /**\n     * @desc\n     *  Closes any windows other than the original one that\n     *  the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  has {@link Navigate}d to.\n     *\n     *  When the windows are closed, it switches the context\n     *  back to the original window.\n     *\n     * @static\n     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Switch}\n     */\n    static anyNewWindows(): Interaction {\n        return new CloseWindowsOtherThan(actor => BrowseTheWeb.as(actor).getOriginalWindowHandle(), `#actor closes any new windows`);\n    }\n\n    /**\n     * @desc\n     *  Closes the currently focused browser window.\n     *\n     *  **Please note** that this interaction should be used to close\n     *  pop-up windows or any new windows/tabs opened during the test\n     *  rather than the _main_ window, which is managed by Protractor.\n     *\n     *  See tests for usage examples.\n     *\n     * @static\n     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Switch}\n     */\n    static currentWindow(): Interaction {\n        return new CloseCurrentWindow();\n    }\n}\n\n/**\n * @package\n */\nclass CloseWindowsOtherThan extends Interaction {\n    constructor(\n        private readonly windowToKeepBy: (actor: UsesAbilities & AnswersQuestions) => Promise<string>,\n        private readonly description: string = `#actor closes several windows`,\n    ) {\n        super();\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return this.windowToKeepBy(actor)\n            .then(windowToKeep => this.windowsOtherThan(windowToKeep, actor)\n                .then(windowsToClose => this.closeAll(windowsToClose, actor))\n                .then(() => this.switchTo(windowToKeep, actor)),\n            );\n    }\n\n    toString() {\n        return this.description;\n    }\n\n    /**\n     * @param {string} windowToKeep\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @private\n     */\n    private windowsOtherThan(windowToKeep: string, actor: UsesAbilities & AnswersQuestions) {\n        return BrowseTheWeb.as(actor).getAllWindowHandles()\n            .then(allWindows =>\n                this.isDefined(windowToKeep) && allWindows.length > 1\n                    ? allWindows.filter(handle => handle !== windowToKeep)\n                    : []\n        )\n    }\n\n    /**\n     * @param {string[]} windows\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @private\n     */\n    private closeAll(windows: string[], actor: UsesAbilities & AnswersQuestions) {\n        return windows.reduce(\n            (previous, handle) => {\n                return previous\n                    .then(() => BrowseTheWeb.as(actor).switchToWindow(handle))\n                    .then(() => BrowseTheWeb.as(actor).closeCurrentWindow());\n            },\n            Promise.resolve()\n        );\n    }\n\n    /**\n     * @param {string} window\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @private\n     */\n    private switchTo(window: string, actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return this.isDefined(window)\n            ? BrowseTheWeb.as(actor).switchToWindow(window)\n            : Promise.resolve();\n    }\n\n    /**\n     * @param {any} value\n     * @private\n     */\n    private isDefined(value: any) {\n        return value !== undefined && value !== null;\n    }\n}\n\n/**\n * @package\n */\nclass CloseCurrentWindow extends Interaction {\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).closeCurrentWindow();\n    }\n\n    toString() {\n        return `#actor closes current browser window`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Close.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "Close",
    "memberof": "src/screenplay/interactions/Close.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Close.ts~Close",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Close}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n close browser tabs or windows.",
    "examples": [
      "<caption>Closing a browser tab or window</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, Close, Switch } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Caleb')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(someLinkThatOpensANewWindow),\n\n         Switch.toNewWindow().and(\n             // perform activities in the context of the new window\n             Close.currentWindow(),\n         ),\n     );",
      "<caption>Closing any new windows after a Jasmine test</caption>\n import 'jasmine';\n\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { Close } from '@serenity-js/protractor';\n\n after(() =>\n     actorInTheSpotlight().attemptsTo(\n         Close.anyNewWindows(),\n     ));",
      "<caption>Closing any new windows after a Mocha test</caption>\n import 'mocha';\n\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { Close } from '@serenity-js/protractor';\n\n after(() =>\n     actorInTheSpotlight().attemptsTo(\n         Close.anyNewWindows(),\n     ));",
      "<caption>Closing any new windows after a    Cucumber scenario</caption>\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { Close } from '@serenity-js/protractor';\n import { After } from 'cucumber';\n\n After(() =>\n     actorInTheSpotlight().attemptsTo(\n         Close.anyNewWindows(),\n     ));"
    ],
    "see": [
      "{@link Switch}"
    ],
    "lineNumber": 66,
    "interface": false
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "anyNewWindows",
    "memberof": "src/screenplay/interactions/Close.ts~Close",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Close.ts~Close.anyNewWindows",
    "access": "public",
    "description": " Closes any windows other than the original one that\n the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n has {@link Navigate}d to.\n\n When the windows are closed, it switches the context\n back to the original window.",
    "see": [
      "{@link Switch}"
    ],
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "currentWindow",
    "memberof": "src/screenplay/interactions/Close.ts~Close",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Close.ts~Close.currentWindow",
    "access": "public",
    "description": " Closes the currently focused browser window.\n\n **Please note** that this interaction should be used to close\n pop-up windows or any new windows/tabs opened during the test\n rather than the _main_ window, which is managed by Protractor.\n\n See tests for usage examples.",
    "see": [
      "{@link Switch}"
    ],
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "CloseWindowsOtherThan",
    "memberof": "src/screenplay/interactions/Close.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Close.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 142,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 118,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "windowsOtherThan",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#windowsOtherThan",
    "access": "private",
    "description": "",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "windowToKeep",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "closeAll",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#closeAll",
    "access": "private",
    "description": "",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "windows",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "switchTo",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#switchTo",
    "access": "private",
    "description": "",
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "window",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "isDefined",
    "memberof": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseWindowsOtherThan#isDefined",
    "access": "private",
    "description": "",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "class",
    "name": "CloseCurrentWindow",
    "memberof": "src/screenplay/interactions/Close.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Close.ts~CloseCurrentWindow",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Close.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 296,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Close.ts~CloseCurrentWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseCurrentWindow#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Close.ts~CloseCurrentWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Close.ts~CloseCurrentWindow#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 180,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "file",
    "name": "src/screenplay/interactions/DeleteCookies.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  remove cookies from the browser.\n *\n * @example <caption>Removing a single cookie</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Navigate, DeleteCookies } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Sid')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Navigate.to('/login'),\n *          DeleteCookies.called('jwt_token'),\n *          Navigate.reloadPage(),\n *      );\n *\n * @example <caption>Removing all cookies before each Jasmine test</caption>\n *  import 'jasmine';\n *\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { DeleteCookies } from '@serenity-js/protractor';\n *\n *  before(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          DeleteCookies.all(),\n *      ));\n *\n * @example <caption>Removing all cookies before each Mocha test</caption>\n *  import 'mocha';\n *\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { DeleteCookies } from '@serenity-js/protractor';\n *\n *  before(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          DeleteCookies.all(),\n *      ));\n *\n * @example <caption>Removing all cookies before each Cucumber scenario</caption>\n *  import { actorInTheSpotlight } from '@serenity-js/core';\n *  import { DeleteCookies } from '@serenity-js/protractor';\n *  import { Before } from 'cucumber';\n *\n *  Before(() =>\n *      actorInTheSpotlight().attemptsTo(\n *          DeleteCookies.all(),\n *      ));\n *\n * @see {@link Navigate}\n */\nexport class DeleteCookies {\n\n    /**\n     * @desc\n     *  Removes a single cookie identified by `cookieName`.\n     *\n     * @param {Answerable<string>} cookieName\n     *  The name of the cookie to be deleted\n     *\n     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}\n     */\n    static called(cookieName: Answerable<string>): Interaction {\n        return new DeleteCookieCalled(cookieName);\n    }\n\n    /**\n     * @desc\n     *  Removes any cookies set.\n     *\n     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}\n     */\n    static all(): Interaction {\n        return new DeletesAllCookies();\n    }\n}\n\n/**\n * @package\n */\nclass DeleteCookieCalled implements Interaction {\n    constructor(private readonly name: Answerable<string>) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return actor.answer(this.name)\n            .then(name => BrowseTheWeb.as(actor).manage().deleteCookie(name));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor deletes the \"${ this.name }\" cookie`;\n    }\n}\n\n/**\n * @package\n */\nclass DeletesAllCookies implements Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).manage().deleteAllCookies());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor deletes all cookies`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "class",
    "name": "DeleteCookies",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{DeleteCookies}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n remove cookies from the browser.",
    "examples": [
      "<caption>Removing a single cookie</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate, DeleteCookies } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Sid')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/login'),\n         DeleteCookies.called('jwt_token'),\n         Navigate.reloadPage(),\n     );",
      "<caption>Removing all cookies before each Jasmine test</caption>\n import 'jasmine';\n\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { DeleteCookies } from '@serenity-js/protractor';\n\n before(() =>\n     actorInTheSpotlight().attemptsTo(\n         DeleteCookies.all(),\n     ));",
      "<caption>Removing all cookies before each Mocha test</caption>\n import 'mocha';\n\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { DeleteCookies } from '@serenity-js/protractor';\n\n before(() =>\n     actorInTheSpotlight().attemptsTo(\n         DeleteCookies.all(),\n     ));",
      "<caption>Removing all cookies before each Cucumber scenario</caption>\n import { actorInTheSpotlight } from '@serenity-js/core';\n import { DeleteCookies } from '@serenity-js/protractor';\n import { Before } from 'cucumber';\n\n Before(() =>\n     actorInTheSpotlight().attemptsTo(\n         DeleteCookies.all(),\n     ));"
    ],
    "see": [
      "{@link Navigate}"
    ],
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "called",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies.called",
    "access": "public",
    "description": " Removes a single cookie identified by `cookieName`.",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": "The name of the cookie to be deleted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookies.all",
    "access": "public",
    "description": " Removes any cookies set.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 415,
    "kind": "class",
    "name": "DeleteCookieCalled",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 129,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeleteCookieCalled#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 419,
    "kind": "class",
    "name": "DeletesAllCookies",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/DeleteCookies.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 197,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DeleteCookies.ts~DeletesAllCookies#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 422,
    "kind": "file",
    "name": "src/screenplay/interactions/Dismiss.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { AlertPromise } from 'selenium-webdriver';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  dismiss a {@link ModalDialog}.\n *\n * @example <caption>Example widget</caption>\n *  <button\n *      data-test=\"trigger\"\n *      onclick=\"alert('hello!')\">Trigger Alert</button>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Widget {\n *      static trigger = Target.the('trigger button')\n *          .located(by.css('[data-test=\"trigger\"]'));\n *  }\n *\n * @example <caption>Dismissing a modal dialog window</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, Dismiss, ModalDialog } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Nick')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Click.on(Widget.trigger),\n *          Dismiss.the(ModalDialog.window()),\n *      );\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n *\n * @see {@link Accept}\n * @see {@link ModalDialog}\n */\nexport class Dismiss extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with a {@link ModalDialog.window} the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will dismiss.\n     *\n     * @param {@serenity-js/core/lib/screenplay~Question<AlertPromise> | AlertPromise} modalDialogWindow\n     *  The modal dialog window to dismiss\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link ModalDialog.window}\n     * @see {@link @serenity-js/core/lib/screenplay~Question}\n     */\n    static the(modalDialogWindow: Question<AlertPromise> | AlertPromise): Interaction {\n        return new Dismiss(modalDialogWindow);\n    }\n\n    /**\n     * @param {@serenity-js/core/lib/screenplay~Question<AlertPromise> | AlertPromise} modalDialogWindow\n     *  The modal dialog window to dismiss\n     *\n     * @see {@link ModalDialog.window}\n     */\n    constructor(private readonly modalDialogWindow: Question<AlertPromise> | AlertPromise) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.modalDialogWindow)\n            .then(alert => alert.dismiss());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor dismisses ${ this.modalDialogWindow }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Dismiss.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 423,
    "kind": "class",
    "name": "Dismiss",
    "memberof": "src/screenplay/interactions/Dismiss.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Dismiss.ts~Dismiss",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Dismiss}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n dismiss a {@link ModalDialog}.",
    "examples": [
      "<caption>Example widget</caption>\n <button\n     data-test=\"trigger\"\n     onclick=\"alert('hello!')\">Trigger Alert</button>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Widget {\n     static trigger = Target.the('trigger button')\n         .located(by.css('[data-test=\"trigger\"]'));\n }",
      "<caption>Dismissing a modal dialog window</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, Dismiss, ModalDialog } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Widget.trigger),\n         Dismiss.the(ModalDialog.window()),\n     );"
    ],
    "see": [
      "{@link Accept}",
      "{@link ModalDialog}"
    ],
    "lineNumber": 48,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Dismiss.ts~Dismiss",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Dismiss.ts~Dismiss.the",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with a {@link ModalDialog.window} the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will dismiss.",
    "see": [
      "{@link ModalDialog.window}",
      "{@link @serenity-js/core/lib/screenplay~Question}"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<AlertPromise> ",
          " AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "modalDialogWindow",
        "description": "The modal dialog window to dismiss"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 425,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Dismiss.ts~Dismiss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Dismiss.ts~Dismiss#constructor",
    "access": "public",
    "description": "",
    "see": [
      "{@link ModalDialog.window}"
    ],
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<AlertPromise> ",
          " AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "modalDialogWindow",
        "description": "The modal dialog window to dismiss"
      }
    ]
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Dismiss.ts~Dismiss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Dismiss.ts~Dismiss#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Dismiss.ts~Dismiss",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Dismiss.ts~Dismiss#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "src/screenplay/interactions/DoubleClick.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  perform a double-click on a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      The editor shows up when the user double-clicks\n *      on one of the properties of their profile\n *      and let's them change the value of that property.\n *  -->\n *  <div id=\"user-profile\">\n *      <ul>\n *          <li id=\"display-name\" ondblclick=\"edit(this)\">User12345</li>\n *          <li id=\"email-address\" ondblclick=\"edit(this)\">tester@example.org</li>\n *      </ul>\n *      <form id=\"editor\" class=\"hidden\">\n *          <input type=\"text\" value=\"\" />\n *      </form>\n *  </div>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class UserProfile {\n *      static displayName = Target.the('display name')\n *          .located(by.id('display-name'));\n *      static emailAddress = Target.the('email address')\n *          .located(by.id('email-address'));\n *      static editor = Target.the('editor')\n *          .located(by.id('editor'));\n *  }\n *\n * @example <caption>Double-clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, DoubleClick, isVisible, Enter, Text, Wait } from '@serenity-js/protractor';\n *  import { Ensure, equals, not } from '@serenity-js/assertions';\n *  import { protractor, Key } from 'protractor';\n *\n *  actorCalled('Dorothy')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          DoubleClick.on(UserProfile.displayName),\n *          Wait.until(UserProfile.editor, isVisible()),\n *\n *          Enter.theValue('New username').into(UserProfile.editor),\n *          Press.the(Key.ENTER).in(UserProfile.editor),\n *\n *          Ensure.that(Text.of(UserProfile.displayName), equals('New username')),\n *          Ensure.that(UserProfile.editor, not(isVisible()))\n *      );\n *\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class DoubleClick extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be double-clicked on\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static on(target: Question<ElementFinder> | ElementFinder): Interaction {\n        return new DoubleClick(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be double-clicked on\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        // Since the deprecation of Webdriver's ControlFlow,\n        // Protractor's doubleClick might behave incorrectly when promises are used.\n        // The mouseMove/doubleClick combo works around that problem.\n        // See https://github.com/angular/protractor/issues/4578\n\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) =>\n            BrowseTheWeb.as(actor).actions()\n                .mouseMove(elf)\n                .perform()\n                .then(() => BrowseTheWeb.as(actor).actions().doubleClick().perform()));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor double-clicks on ${ this.target }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/DoubleClick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "DoubleClick",
    "memberof": "src/screenplay/interactions/DoubleClick.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{DoubleClick}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n perform a double-click on a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     The editor shows up when the user double-clicks\n     on one of the properties of their profile\n     and let's them change the value of that property.\n -->\n <div id=\"user-profile\">\n     <ul>\n         <li id=\"display-name\" ondblclick=\"edit(this)\">User12345</li>\n         <li id=\"email-address\" ondblclick=\"edit(this)\">tester@example.org</li>\n     </ul>\n     <form id=\"editor\" class=\"hidden\">\n         <input type=\"text\" value=\"\" />\n     </form>\n </div>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class UserProfile {\n     static displayName = Target.the('display name')\n         .located(by.id('display-name'));\n     static emailAddress = Target.the('email address')\n         .located(by.id('email-address'));\n     static editor = Target.the('editor')\n         .located(by.id('editor'));\n }",
      "<caption>Double-clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, DoubleClick, isVisible, Enter, Text, Wait } from '@serenity-js/protractor';\n import { Ensure, equals, not } from '@serenity-js/assertions';\n import { protractor, Key } from 'protractor';\n\n actorCalled('Dorothy')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         DoubleClick.on(UserProfile.displayName),\n         Wait.until(UserProfile.editor, isVisible()),\n\n         Enter.theValue('New username').into(UserProfile.editor),\n         Press.the(Key.ENTER).in(UserProfile.editor),\n\n         Ensure.that(Text.of(UserProfile.displayName), equals('New username')),\n         Ensure.that(UserProfile.editor, not(isVisible()))\n     );"
    ],
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 71,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick.on",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be double-clicked on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be double-clicked on"
      }
    ]
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 434,
    "kind": "file",
    "name": "src/screenplay/interactions/Enter.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { AlertPromise } from 'selenium-webdriver';\nimport { withAnswerOf } from '../withAnswerOf';\nimport { EnterBuilder } from './EnterBuilder';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  enter a value into a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) field.\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Enternig the value into a form field</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Enter } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Esme')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Enter.theValue('Hello world!').into(Form.exampleInput),\n *      );\n *\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Enter extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} value\n     *  The value to be entered\n     *\n     * @returns {EnterBuilder}\n     */\n    static theValue(value: Answerable<string | number>): EnterBuilder {\n        return {\n            into: (field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise) =>\n                new Enter(value, field),\n        };\n    }\n\n    /**\n     * @param {@serenity-js/core/lib/screenplay~Answerable<string | number>} value\n     *  The value to be entered\n     *\n     * @param {Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise} field\n     *  The field to enter the value into\n     */\n    constructor(\n        private readonly value: Answerable<string | number>,\n        private readonly field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.value)\n            .then(value => withAnswerOf(actor, this.field, (el: ElementFinder | AlertPromise) =>\n                el.sendKeys(`${ value }`))\n            );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor enters ${ this.value } into ${ this.field }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Enter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 435,
    "kind": "class",
    "name": "Enter",
    "memberof": "src/screenplay/interactions/Enter.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Enter}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n enter a value into a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) field.",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Enternig the value into a form field</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Enter } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Esme')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Enter.theValue('Hello world!').into(Form.exampleInput),\n     );"
    ],
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 49,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "theValue",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter.theValue",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EnterBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be entered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EnterBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 437,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | number>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be entered"
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to enter the value into"
      }
    ]
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "file",
    "name": "src/screenplay/interactions/EnterBuilder.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { Interaction } from '@serenity-js/core/lib/screenplay';\nimport { ElementFinder } from 'protractor';\nimport { AlertPromise } from 'selenium-webdriver';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Enter} more readable.\n *\n * @see {@link Enter}\n *\n * @interface\n */\nexport interface EnterBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Enter}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} field\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Target}\n     */\n    into: (field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/EnterBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "class",
    "name": "EnterBuilder",
    "memberof": "src/screenplay/interactions/EnterBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{EnterBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Enter} more readable.",
    "see": [
      "{@link Enter}"
    ],
    "lineNumber": 23,
    "interface": true
  },
  {
    "__docId__": 442,
    "kind": "member",
    "name": "into",
    "memberof": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder#into",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Enter}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "file",
    "name": "src/screenplay/interactions/ExecuteScript.ts",
    "content": "import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, LogicError, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Name, TextData } from '@serenity-js/core/lib/model';\n\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  execute a script within the context of the current browser window.\n *\n *  Please see the tests below for usage examples.\n *\n * @see {@link LastScriptExecution.result}\n */\nexport class ExecuteScript {\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to load a script from `sourceUrl`.\n     *\n     * @param {string} sourceUrl\n     *  The URL to load the script from\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static from(sourceUrl: string): Interaction {\n        return new ExecuteScriptFromUrl(sourceUrl);\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n     *  or `Target` (`Question<ElementFinder>`).\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  If the script invokes the `callback` with a return value, this will be made available\n     *  via the {@link LastScriptExecution.result}.\n     *\n     *  **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n     *  instead of passing it to the callback function.\n     *\n     * @example <caption>Executing an async script</caption>\n     *  actor.attemptsTo(ExecuteScript.async(\n     *    var callback = arguments[arguments.length - 1];\n     *\n     *    // do stuff\n     *\n     *    callback(result)\n     *  ));\n     *\n     * @example <caption>Passing arguments to an async script</caption>\n     *  actor.attemptsTo(ExecuteScript.async(\n     *    var name = arguments[0];\n     *    var age = arguments[1];\n     *    var callback = arguments[arguments.length - 1];\n     *\n     *    // do stuff\n     *\n     *    callback(result)\n     *  ).withArguments('Bob', 24));\n     *\n     * @example <caption>Passing Target arguments to an async script</caption>\n     *  actor.attemptsTo(ExecuteScript.async(\n     *     var header = arguments[0];    // Target gets converted to a WebElement\n     *     var callback = arguments[arguments.length - 1];\n     *\n     *     callback(header.innerText)\n     *   ).withArguments(Target.the('header').located(by.css('h1'))));\n     *\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @returns {ExecuteScriptWithArguments}\n     *\n     * @see {@link LastScriptExecution.result}\n     */\n    static async(script: string | Function): ExecuteScriptWithArguments {                // tslint:disable-line:ban-types\n        return new ExecuteAsynchronousScript(script);\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  execute a synchronous script in the context of the currently selected frame or window.\n     *\n     *  If the script returns a value, it will be made available via {@link LastScriptExecution.result}.\n     *\n     * @example <caption>Pressing keys</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, ExecuteScript, LastScriptExecution } from '@serenity-js/protractor';\n     *  import { Ensure, includes } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Joseph')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          ExecuteScript.sync('return navigator.userAgent'),\n     *          Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n     *      );\n     *\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @returns {ExecuteScriptWithArguments}\n     *\n     * @see {@link LastScriptExecution.result}\n     */\n    static sync(script: string | Function): ExecuteScriptWithArguments {                  // tslint:disable-line:ban-types\n        return new ExecuteSynchronousScript(script);\n    }\n}\n\n/**\n * @desc\n *  Allows for a script to be executed to be parametrised.\n *\n *  **Please note** that the arguments can be both synchronous and asynchronous {@link @serenity-js/core/lib/screenplay~Question}s\n *  as well as regular static values.\n *\n * @abstract\n *\n * @see {@link ExecuteScript}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport abstract class ExecuteScriptWithArguments extends Interaction {\n\n    /**\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @param {Array<Answerable<any>>} args\n     *  Arguments to parametrise the script with\n     */\n    constructor(\n        protected readonly script: string | Function,                                   // tslint:disable-line:ban-types\n        protected readonly args: Array<Answerable<any>> = [],\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Enter}.\n     *\n     * @param {...Array<Answerable<any>>} args\n     *  Arguments to parametrise the script with\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    public abstract withArguments(...args: Array<Answerable<any>>): Interaction;\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & CollectsArtifacts & AnswersQuestions): PromiseLike<void> {\n        return this.answerAll(this.args).as(actor)\n            .then(args => this.executeAs(actor, args))\n            .then(() => actor.collect(\n                TextData.fromJSON({\n                    contentType:    'text/javascript;charset=UTF-8',\n                    data:           this.script.toString(),\n                }),\n                new Name('Script source'),\n            ));\n    }\n\n    protected abstract executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any>;\n\n    /**\n     * @private\n     *\n     * @param {Array<Answerable<any>>} args\n     */\n    private answerAll(args: Array<Answerable<any>>) {\n        return {\n            as: (actor: AnswersQuestions & UsesAbilities): Promise<any[]> => Promise.all(args.map(arg => {\n                const maybeElementFinder = Question.isAQuestion(arg)\n                    ? arg.answeredBy(actor)\n                    : arg;\n\n                const maybePromise = !! maybeElementFinder.getWebElement\n                    ? maybeElementFinder.getWebElement()\n                    : maybeElementFinder;\n\n                return actor.answer(maybePromise);\n            })),\n        };\n    }\n}\n\n/**\n * @package\n */\nclass ExecuteAsynchronousScript extends ExecuteScriptWithArguments {\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteAsynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeAsyncScript(this.script, ...args);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes an asynchronous script with arguments: ${ this.args }`\n            : `#actor executes an asynchronous script`;\n    }\n}\n\n/**\n * @package\n *\n * https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n */\nclass ExecuteScriptFromUrl extends Interaction {\n    constructor(private readonly sourceUrl: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<any> {\n        return BrowseTheWeb.as(actor).executeAsyncScript(`\n            var src = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            var alreadyLoadedScripts = Array.prototype.slice\n                .call(document.getElementsByTagName('script'))\n                .map(script => script.src);\n\n            if (!! ~ alreadyLoadedScripts.indexOf(src)) {\n                return callback(\"Script from \" + src + \" has already been loaded\");\n            }\n\n            var script = document.createElement('script');\n            script.onload = function () {\n                return callback();\n            };\n            script.onerror = function () {\n                return callback(\"Couldn't load script from \" + this.src);\n            };\n\n            script.src = src;\n            script.async = true;\n            document.head.appendChild(script);\n        `, this.sourceUrl).then(errorMessage => {\n            if (!! errorMessage) {\n                throw new LogicError(errorMessage);\n            }\n        });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor executes a script from ${ this.sourceUrl }`;\n    }\n}\n\n/**\n * @package\n */\nclass ExecuteSynchronousScript extends ExecuteScriptWithArguments {\n\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteSynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeScript(this.toString(), this.script, ...args);\n    }\n\n    // tslint:disable-next-line:member-ordering\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes a synchronous script with arguments: ${ this.args }`\n            : `#actor executes a synchronous script`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/ExecuteScript.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "class",
    "name": "ExecuteScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{ExecuteScript}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n execute a script within the context of the current browser window.\n\n Please see the tests below for usage examples.",
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "from",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.from",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to load a script from `sourceUrl`.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": "The URL to load the script from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "async",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.async",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n or `Target` (`Question<ElementFinder>`).\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n If the script invokes the `callback` with a return value, this will be made available\n via the {@link LastScriptExecution.result}.\n\n **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n instead of passing it to the callback function.",
    "examples": [
      "<caption>Executing an async script</caption>\n actor.attemptsTo(ExecuteScript.async(\n   var callback = arguments[arguments.length - 1];\n\n   // do stuff\n\n   callback(result)\n ));",
      "<caption>Passing arguments to an async script</caption>\n actor.attemptsTo(ExecuteScript.async(\n   var name = arguments[0];\n   var age = arguments[1];\n   var callback = arguments[arguments.length - 1];\n\n   // do stuff\n\n   callback(result)\n ).withArguments('Bob', 24));",
      "<caption>Passing Target arguments to an async script</caption>\n actor.attemptsTo(ExecuteScript.async(\n    var header = arguments[0];    // Target gets converted to a WebElement\n    var callback = arguments[arguments.length - 1];\n\n    callback(header.innerText)\n  ).withArguments(Target.the('header').located(by.css('h1'))));"
    ],
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExecuteScriptWithArguments}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "sync",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.sync",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n execute a synchronous script in the context of the currently selected frame or window.\n\n If the script returns a value, it will be made available via {@link LastScriptExecution.result}.",
    "examples": [
      "<caption>Pressing keys</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, ExecuteScript, LastScriptExecution } from '@serenity-js/protractor';\n import { Ensure, includes } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Joseph')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         ExecuteScript.sync('return navigator.userAgent'),\n         Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n     );"
    ],
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExecuteScriptWithArguments}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 448,
    "kind": "class",
    "name": "ExecuteScriptWithArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{ExecuteScriptWithArguments}",
    "description": " Allows for a script to be executed to be parametrised.\n\n **Please note** that the arguments can be both synchronous and asynchronous {@link @serenity-js/core/lib/screenplay~Question}s\n as well as regular static values.",
    "see": [
      "{@link ExecuteScript}"
    ],
    "lineNumber": 200,
    "abstract": true,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 449,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      },
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments to parametrise the script with"
      }
    ]
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "answerAll",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments#answerAll",
    "access": "private",
    "description": "",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "{\"as\": *}"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "class",
    "name": "ExecuteAsynchronousScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 344,
    "interface": false,
    "extends": [
      "ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 232,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 456,
    "kind": "class",
    "name": "ExecuteScriptFromUrl",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 413,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 457,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "class",
    "name": "ExecuteSynchronousScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 506,
    "interface": false,
    "extends": [
      "ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 318,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 464,
    "kind": "file",
    "name": "src/screenplay/interactions/Hover.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { WebElement } from 'selenium-webdriver';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  hover the mouse pointer over a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <a data-test=\"example-link\"\n *      class=\"off\"\n *      onmouseover=\"this.className='on';\"\n *      onmouseout=\"this.className='off';\"\n *      href=\"/\">hover over me</a>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Example {\n *      static link = Target.the('example link')\n *          .located(by.css('[data-test=\"example-link\"]'));\n *  }\n *\n * @example <caption>Hovering over an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Hover, CSSClasses } from '@serenity-js/protractor';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Hank')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Ensure.that(CSSClasses.of(Example.link), equals([ 'off' ])),\n *\n *          Hover.over(Example.link),\n *          Ensure.that(CSSClasses.of(Example.link), equals([ 'on' ])),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link CSSClasses}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Hover extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be hovered over\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static over(target: Question<ElementFinder> | ElementFinder): Interaction {\n        return new Hover(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be hovered over\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, (elf: WebElement) => BrowseTheWeb.as(actor).actions().mouseMove(elf).perform());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor hovers the mouse over ${this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Hover.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "class",
    "name": "Hover",
    "memberof": "src/screenplay/interactions/Hover.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Hover}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n hover the mouse pointer over a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <a data-test=\"example-link\"\n     class=\"off\"\n     onmouseover=\"this.className='on';\"\n     onmouseout=\"this.className='off';\"\n     href=\"/\">hover over me</a>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Example {\n     static link = Target.the('example link')\n         .located(by.css('[data-test=\"example-link\"]'));\n }",
      "<caption>Hovering over an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Hover, CSSClasses } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Hank')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Ensure.that(CSSClasses.of(Example.link), equals([ 'off' ])),\n\n         Hover.over(Example.link),\n         Ensure.that(CSSClasses.of(Example.link), equals([ 'on' ])),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link CSSClasses}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 59,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "over",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover.over",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be hovered over"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 467,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be hovered over"
      }
    ]
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 470,
    "kind": "file",
    "name": "src/screenplay/interactions/Navigate.ts",
    "content": "import { Answerable, AnswersQuestions, Duration, Interaction, TestCompromisedError, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate to a specific destination,\n *  as well as back and forth in the browser history, or reload the current page.\n */\nexport class Navigate {\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  navigate to a given URL.\n     *\n     *  The URL can be:\n     *  - absolute, i.e. `https://example.org/search`\n     *  - relative, i.e. `/search`\n     *\n     *  If the URL is relative, Protractor will append it to `baseUrl` configured in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).\n     *\n     * @example <caption>protractor.conf.js</caption>\n     *  exports.config = {\n     *      baseUrl: 'https://example.org',\n     *      // ...\n     *  }\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/search'),\n     *      );\n     *\n     * @example <caption>Navigate to an absolute URL (overrides baseUrl)</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('https://mycompany.org/login'),\n     *      );\n     *\n     * @example <caption>Navigate to URL with timeout</caption>\n     *  import { actorCalled, Duration } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/search').withTimeout(Duration.ofSeconds(2)),\n     *      );\n     *\n     * @param {Answerable<string>} url\n     *  An absolute URL or path an {@link @serenity-js/core/lib/screenplay/actor~Actor} should navigate to\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction & { withTimeout: (duration: Answerable<Duration>) => Interaction }}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link @serenity-js/core~Duration}\n     */\n    static to(url: Answerable<string>): Interaction & { withTimeout: (duration: Answerable<Duration>) => Interaction } {\n        return new NavigateToUrl(url);\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  navigate back one page in the session history.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/first'),\n     *          Navigate.to('/second'),\n     *\n     *          Navigate.back(),\n     *\n     *          Ensure.that(Website.url(), endsWith('/first')),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     */\n    static back(): Interaction {\n        return new NavigateBack();\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  navigate forward one page in the session history.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/first'),\n     *          Navigate.to('/second'),\n     *\n     *          Navigate.back(),\n     *          Navigate.forward(),\n     *\n     *          Ensure.that(Website.url(), endsWith('/second')),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     */\n    static forward(): Interaction {\n        return new NavigateForward();\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  reload the current page.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { Navigate, BrowseTheWeb, DeleteCookies } from '@serenity-js/protractor';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/login'),\n     *          DeleteCookies.called('session_id'),\n     *          Navigate.reloadPage(),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link DeleteCookies}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     */\n    static reloadPage(): Interaction {\n        return new ReloadPage();\n    }\n}\n\n/**\n * @package\n */\nclass NavigateToUrl extends Interaction {\n    constructor(private readonly url: Answerable<string>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Specifies timeout to wait for an Angular app to load.\n     *  Please note that the timeout is ignored if you disable\n     *  synchronisation with Angular.\n     *\n     * @param {Answerable<Duration>} duration\n     */\n    withTimeout(duration: Answerable<Duration>): Interaction {\n        return new NavigateToUrlWithTimeout(this.url, duration);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.url)\n            .then(url =>\n                BrowseTheWeb.as(actor).get(url)\n                    .catch(error => {\n                        throw new TestCompromisedError(`Couldn't navigate to ${ url }`, error);\n                    })\n            )\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates to ${ this.url }`;\n    }\n}\n\n/**\n * @package\n */\nclass NavigateToUrlWithTimeout extends Interaction {\n    constructor(private readonly url: Answerable<string>, private readonly timeout: Answerable<Duration>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return Promise.all([\n            actor.answer(this.url),\n            actor.answer(this.timeout),\n        ]).then(([url, timeout]) =>\n            BrowseTheWeb.as(actor).get(url, timeout.inMilliseconds()),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates to ${ this.url } waiting up to ${ this.timeout } for Angular to load`;\n    }\n}\n\n/**\n * @package\n */\nclass NavigateBack extends Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().back());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates back in the browser history`;\n    }\n}\n\n/**\n * @package\n */\nclass NavigateForward extends Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().forward());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates forward in the browser history`;\n    }\n}\n\n/**\n * @package\n */\nclass ReloadPage extends Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return promiseOf(BrowseTheWeb.as(actor).navigate().refresh());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor reloads the page`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Navigate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 471,
    "kind": "class",
    "name": "Navigate",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Navigate}",
    "description": " Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate to a specific destination,\n as well as back and forth in the browser history, or reload the current page.",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.to",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n navigate to a given URL.\n\n The URL can be:\n - absolute, i.e. `https://example.org/search`\n - relative, i.e. `/search`\n\n If the URL is relative, Protractor will append it to `baseUrl` configured in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).",
    "examples": [
      "<caption>protractor.conf.js</caption>\n exports.config = {\n     baseUrl: 'https://example.org',\n     // ...\n }",
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/search'),\n     );",
      "<caption>Navigate to an absolute URL (overrides baseUrl)</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('https://mycompany.org/login'),\n     );",
      "<caption>Navigate to URL with timeout</caption>\n import { actorCalled, Duration } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/search').withTimeout(Duration.ofSeconds(2)),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/core~Duration}"
    ],
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction & { withTimeout: (duration: Answerable<Duration>) => Interaction }}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "An absolute URL or path an {@link @serenity-js/core/lib/screenplay/actor~Actor} should navigate to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction & { withTimeout: (duration: Answerable<Duration>) => Interaction }"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "back",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.back",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n navigate back one page in the session history.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/first'),\n         Navigate.to('/second'),\n\n         Navigate.back(),\n\n         Ensure.that(Website.url(), endsWith('/first')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}"
    ],
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "forward",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.forward",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n navigate forward one page in the session history.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/first'),\n         Navigate.to('/second'),\n\n         Navigate.back(),\n         Navigate.forward(),\n\n         Ensure.that(Website.url(), endsWith('/second')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}"
    ],
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "reloadPage",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.reloadPage",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n reload the current page.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { Navigate, BrowseTheWeb, DeleteCookies } from '@serenity-js/protractor';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/login'),\n         DeleteCookies.called('session_id'),\n         Navigate.reloadPage(),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link DeleteCookies}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}"
    ],
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 476,
    "kind": "class",
    "name": "NavigateToUrl",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 247,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "withTimeout",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#withTimeout",
    "access": "public",
    "description": " Specifies timeout to wait for an Angular app to load.\n Please note that the timeout is ignored if you disable\n synchronisation with Angular.",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Duration>"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 481,
    "kind": "class",
    "name": "NavigateToUrlWithTimeout",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 346,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 482,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 347,
    "undocument": true
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 378,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrlWithTimeout#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "NavigateBack",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 419,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 448,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateBack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateBack#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 488,
    "kind": "class",
    "name": "NavigateForward",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 484,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 513,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateForward",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateForward#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 534,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 491,
    "kind": "class",
    "name": "ReloadPage",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 549,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~ReloadPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~ReloadPage#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 599,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "src/screenplay/interactions/Press.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder, Key } from 'protractor';\nimport { AlertPromise } from 'selenium-webdriver';\nimport { withAnswerOf } from '../withAnswerOf';\nimport { PressBuilder } from './PressBuilder';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  send a key press or a sequence of keys to a Web element.\n *\n *  **Please note** that modifier keys, such as Command ⌘, [won't work on Mac](https://github.com/angular/protractor/issues/690)\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Pressing keys</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Press, Value } from '@serenity-js/protractor';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { protractor, Key } from 'protractor';\n *\n *  actorCalled('Priyanka')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n * @see {@link selenium-webdriver~Key}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Press extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {...keys: string[]} keys\n     *  A sequence of one or more keys to press\n     *\n     * @returns {PressBuilder}\n     */\n    static the(...keys: string[]): PressBuilder {\n        return {\n            in: (field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise) => new Press(keys, field),\n        };\n    }\n\n    /**\n     * @param {string[]} keys\n     *  A sequence of one or more keys to press\n     *\n     * @param {Question<ElementFinder> | ElementFinder} field\n     *  Web element to send the keys to\n     */\n    constructor(\n        private readonly keys: string[],\n        private readonly field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<any> {\n        return withAnswerOf(actor, this.field, (elf: ElementFinder) => elf.sendKeys(...this.keys));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor presses ${ describeSequenceOf(this.keys) } in ${ this.field.toString() }`;\n    }\n}\n\nfunction describeSequenceOf(keys: string[]) {\n    return keys.map(key => [\n        capitalised(nameOf(key)),\n        isModifier(key) ? '-' : ', ',\n    ]).\n    reduce((acc, current) => acc.concat(current), []).\n    slice(0, keys.length * 2 - 1).\n    join('');\n}\n\nfunction isModifier(key: string) {\n    return !! ~ [ Key.ALT, Key.COMMAND, Key.CONTROL, Key.SHIFT ].indexOf(key);\n}\n\nfunction nameOf(key: string) {\n\n    for (const candidate in Key) {\n        if (Key.hasOwnProperty(candidate) && Key[ candidate ] === key) {\n            return candidate;\n        }\n    }\n\n    return key;\n}\n\nfunction capitalised(name: string) {\n    return name.charAt(0).toLocaleUpperCase() + name.slice(1).toLocaleLowerCase();\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Press.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "class",
    "name": "Press",
    "memberof": "src/screenplay/interactions/Press.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Press}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n send a key press or a sequence of keys to a Web element.\n\n **Please note** that modifier keys, such as Command ⌘, [won't work on Mac](https://github.com/angular/protractor/issues/690)",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Pressing keys</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Press, Value } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor, Key } from 'protractor';\n\n actorCalled('Priyanka')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}",
      "{@link selenium-webdriver~Key}"
    ],
    "lineNumber": 56,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press.the",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PressBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...keys: string[]"
        ],
        "spread": true,
        "optional": false,
        "name": "keys",
        "description": "A sequence of one or more keys to press"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PressBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "A sequence of one or more keys to press"
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Web element to send the keys to"
      }
    ]
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 500,
    "kind": "function",
    "name": "describeSequenceOf",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~describeSequenceOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "function",
    "name": "isModifier",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~isModifier",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "nameOf",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~nameOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "capitalised",
    "memberof": "src/screenplay/interactions/Press.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~capitalised",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "src/screenplay/interactions/PressBuilder.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { Interaction } from '@serenity-js/core/lib/screenplay';\nimport { ElementFinder } from 'protractor';\nimport { AlertPromise } from 'selenium-webdriver';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Press} more readable.\n *\n * @see {@link Press}\n *\n * @interface\n */\nexport interface PressBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Press}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise} field\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Target}\n     */\n    in: (field: Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/PressBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "PressBuilder",
    "memberof": "src/screenplay/interactions/PressBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/PressBuilder.ts~PressBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{PressBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Press} more readable.",
    "see": [
      "{@link Press}"
    ],
    "lineNumber": 23,
    "interface": true
  },
  {
    "__docId__": 506,
    "kind": "member",
    "name": "in",
    "memberof": "src/screenplay/interactions/PressBuilder.ts~PressBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/PressBuilder.ts~PressBuilder#in",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Press}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "file",
    "name": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "content": "import { Interaction, UsesAbilities } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  resize the browser window.\n *\n *  **Please note** that another way to set the size of the browser window\n *  is to configure it in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).\n *\n * @see {@link Window}\n */\nexport class ResizeBrowserWindow {\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  setting the size of the browser window to maximum.\n     *\n     * @example <caption>Maximising browser window</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate, ResizeBrowserWindow, Window } from '@serenity-js/protractor';\n     *  import { Ensure, isGreaterThan } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Ventana')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/app'),\n     *          ResizeBrowserWindow.toMaximum(),\n     *          Ensure.that(Window.size(), property('width', isGreaterThan(1024))),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link Window.size}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~property}\n     * @see {@link @serenity-js/assertions/lib/expectations~isGreaterThan}\n     */\n    static toMaximum(): Interaction {\n        return new MaximiseBrowserWindow();\n    }\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  setting the size of the browser window to given `width` and `height`\n     *\n     * @example <caption>Setting specific window size</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate, ResizeBrowserWindow } from '@serenity-js/protractor';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Ventana')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Navigate.to('/app'),\n     *          ResizeBrowserWindow.to(828, 1792),\n     *      );\n     *\n     * @see {@link BrowseTheWeb}\n     *\n     * @param {number} width\n     *  Desired new width of the browser window\n     *\n     * @param {number} height\n     *  Desired new height of the browser window\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static to(width: number, height: number): Interaction {\n        return new SetBrowserWindowSize(width, height);\n    }\n}\n\n/**\n * @package\n */\nclass MaximiseBrowserWindow implements Interaction {\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).manage().window().maximize();\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor maximises the browser window`;\n    }\n}\n\n/**\n * @package\n */\nclass SetBrowserWindowSize implements Interaction {\n    constructor(private width: number, private height: number) {\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).manage().window().setSize(this.width, this.height);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `#actor sets the size of the browser window to ${this.width} x ${this.height}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 508,
    "kind": "class",
    "name": "ResizeBrowserWindow",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{ResizeBrowserWindow}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n resize the browser window.\n\n **Please note** that another way to set the size of the browser window\n is to configure it in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).",
    "see": [
      "{@link Window}"
    ],
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "toMaximum",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow.toMaximum",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n setting the size of the browser window to maximum.",
    "examples": [
      "<caption>Maximising browser window</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate, ResizeBrowserWindow, Window } from '@serenity-js/protractor';\n import { Ensure, isGreaterThan } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Ventana')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/app'),\n         ResizeBrowserWindow.toMaximum(),\n         Ensure.that(Window.size(), property('width', isGreaterThan(1024))),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Window.size}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~property}",
      "{@link @serenity-js/assertions/lib/expectations~isGreaterThan}"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~ResizeBrowserWindow.to",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n setting the size of the browser window to given `width` and `height`",
    "examples": [
      "<caption>Setting specific window size</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate, ResizeBrowserWindow } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Ventana')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/app'),\n         ResizeBrowserWindow.to(828, 1792),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}"
    ],
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Desired new width of the browser window"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Desired new height of the browser window"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 511,
    "kind": "class",
    "name": "MaximiseBrowserWindow",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 126,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~MaximiseBrowserWindow#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 514,
    "kind": "class",
    "name": "SetBrowserWindowSize",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/ResizeBrowserWindow.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 189,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ResizeBrowserWindow.ts~SetBrowserWindowSize#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 518,
    "kind": "file",
    "name": "src/screenplay/interactions/Scroll.ts",
    "content": "import { AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  scroll until a given Web element comes into view.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      an element somewhere at the bottom of the page,\n *      outside of the visible area\n *  -->\n *  <input type=\"submit\" id=\"submit\" />\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class Form {\n *      static submitButton = Target.the('submit button')\n *          .located(by.id('submit'));\n *  }\n *\n * @example <caption>Scrolling to element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, Scroll, isVisible } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Sara')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Scroll.to(Form.submitButton),\n *          Ensure.that(Form.submitButton, isVisible()),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link isVisible}\n * @see {@link @serenity-js/assertions~Ensure}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Scroll extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be scroll to\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static to(target: Question<ElementFinder> | ElementFinder) {\n        return new Scroll(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  The element to be scroll to\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return withAnswerOf(actor, this.target, (elf: ElementFinder) => BrowseTheWeb.as(actor).actions().mouseMove(elf).perform());\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor scrolls to ${this.target}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Scroll.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "class",
    "name": "Scroll",
    "memberof": "src/screenplay/interactions/Scroll.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Scroll}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n scroll until a given Web element comes into view.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     an element somewhere at the bottom of the page,\n     outside of the visible area\n -->\n <input type=\"submit\" id=\"submit\" />",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class Form {\n     static submitButton = Target.the('submit button')\n         .located(by.id('submit'));\n }",
      "<caption>Scrolling to element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure } from '@serenity-js/assertions';\n import { BrowseTheWeb, Scroll, isVisible } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Sara')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Scroll.to(Form.submitButton),\n         Ensure.that(Form.submitButton, isVisible()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link isVisible}",
      "{@link @serenity-js/assertions~Ensure}"
    ],
    "lineNumber": 55,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll.to",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be scroll to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 521,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be scroll to"
      }
    ]
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 524,
    "kind": "file",
    "name": "src/screenplay/interactions/Select.ts",
    "content": "import { Answerable, AnswersQuestions, Question } from '@serenity-js/core';\nimport { commaSeparated, formatted } from '@serenity-js/core/lib/io';\nimport { inspected } from '@serenity-js/core/lib/io/inspected';\nimport { Interaction, UsesAbilities } from '@serenity-js/core/lib/screenplay';\nimport { by, ElementFinder, protractor } from 'protractor';\nimport { promise } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\nimport { withAnswerOf } from '../withAnswerOf';\nimport { SelectBuilder } from './SelectBuilder';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  select an option from a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select),\n *  either by its display name, or by value.\n *\n * @see {@link Selected}\n */\nexport class Select {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with a [`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)\n     *  of a single [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.\n     *\n     * @example <caption>Example widget</caption>\n     *  <select data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object describing the widget</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.value('UK').from(Countries.dropdown),\n     *          Ensure.that(Selected.valueOf(Countries.dropdown), equals('UK')),\n     *      );\n     *\n     * @param {string | Answerable<string>} value\n     *  A value of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select\n     *\n     * @returns {SelectBuilder}\n     *\n     * @see {@link Selected.valueOf}\n     * @see {@link BrowseTheWeb}\n     * @see {@link Target}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~equals}\n     */\n    static value(value: string | Answerable<string>): SelectBuilder {\n        return {\n            from: (target: Question<ElementFinder> | ElementFinder): Interaction =>\n                new SelectValue(value, target)\n        };\n    }\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with [`value`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)\n     *  of multiple [`<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.\n     *\n     * @example <caption>Example widget</caption>\n     *  <select multiple data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object describing the widget</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.values('UK').from(Countries.dropdown),\n     *          Ensure.that(Selected.valuesOf(Countries.dropdown), equals([ 'UK' ])),\n     *      );\n     *\n     * @param {Array<Answerable<string[] | string>>} values\n     *  Values of the [`option` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select\n     *\n     * @returns {SelectBuilder}\n     *\n     * @see {@link Selected.valuesOf}\n     * @see {@link BrowseTheWeb}\n     * @see {@link Target}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~equals}\n     */\n    static values(...values: Array<Answerable<string[] | string>>): SelectBuilder {\n        return {\n            from: (target: Question<ElementFinder> | ElementFinder): Interaction =>\n                new SelectValues(values, target)\n        };\n    }\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with a single [`option`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.\n     *\n     * @example <caption>Example widget</caption>\n     *  <select data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object describing the widget</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.option('Poland').from(Countries.dropdown),\n     *          Ensure.that(\n     *              Selected.optionIn(Countries.dropdown),\n     *              equals('Poland')\n     *          ),\n     *      );\n     *\n     * @param {string | Answerable<string>} value\n     *  Text of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select\n     *\n     * @returns {SelectBuilder}\n     *\n     * @see {@link Selected.optionIn}\n     * @see {@link BrowseTheWeb}\n     * @see {@link Target}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~equals}\n     */\n    static option(value: string | Answerable<string>): SelectBuilder {\n        return {\n            from: (target: Question<ElementFinder> | ElementFinder): Interaction =>\n                new SelectOption(value, target)\n        };\n    }\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  with [`option`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.\n     *\n     * @example <caption>Example widget</caption>\n     *  <select multiple data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object describing the widget</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.options('Poland', 'United States').from(Countries.dropdown),\n     *          Ensure.that(\n     *              Selected.optionsIn(Countries.dropdown),\n     *              equals([ 'Poland', 'United States' ])\n     *          ),\n     *      );\n     *\n     * @param {Array<Answerable<string[] | string>>} values\n     *  Text of the [`option` elements  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select\n     *\n     * @returns {SelectBuilder}\n     *\n     * @see {@link Selected.optionsIn}\n     * @see {@link BrowseTheWeb}\n     * @see {@link Target}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~equals}\n     */\n    static options(...values: Array<Answerable<string[] | string>>): SelectBuilder {\n        return {\n            from: (target: Question<ElementFinder> | ElementFinder): Interaction =>\n                new SelectOptions(values, target)\n        };\n    }\n}\n\n/**\n * @package\n */\nclass SelectValue implements Interaction {\n\n    constructor(\n        private readonly value: string | Answerable<string>,\n        private readonly target: Question<ElementFinder> | ElementFinder\n    ) {\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return actor.answer(this.value)\n            .then(value =>\n                withAnswerOf(actor, this.target, (element: ElementFinder) =>\n                    element\n                        .element(by.css(`option[value=${ value }]`)))\n                        .click()\n            );\n    }\n\n    toString () {\n        return formatted `#actor selects value ${ this.value } from ${ this.target }`;\n    }\n}\n\n/**\n * @package\n */\nclass SelectValues implements Interaction {\n\n    constructor(\n        private readonly values: Array<Answerable<string[] | string>>,\n        private readonly target: Question<ElementFinder> | ElementFinder\n    ) {\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n\n        return Promise.all(this.values.map(value => actor.answer(value)))\n            .then(flatten)\n            .then(values => {\n\n                const\n                    hasRequiredValue = (option: ElementFinder) =>\n                        option.getAttribute('value').then(value => !! ~values.indexOf(value)),\n                    select = (option: ElementFinder) => option.click();\n\n                return promiseOf(\n                    withAnswerOf(actor, this.target, (element: ElementFinder) =>\n                        element.all(by.css('option'))\n                            .filter(optionsToSelect(hasRequiredValue))\n                            .each(select)\n                    )\n                );\n            });\n    }\n\n    toString () {\n        return `#actor selects values ${ commaSeparated(flatten(this.values), inspected) } from ${ this.target }`;\n    }\n}\n\n/**\n * @package\n */\nclass SelectOption implements Interaction {\n\n    constructor(\n        private readonly value: string | Answerable<string>,\n        private readonly target: Question<ElementFinder> | ElementFinder\n    ) {\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return actor.answer(this.value)\n            .then(value => {\n                return promiseOf(withAnswerOf(actor, this.target, (element: ElementFinder) =>\n                    element\n                        .element(by.cssContainingText('option', value)))\n                        .click());\n            });\n    }\n\n    toString () {\n        return formatted `#actor selects ${ this.value } from ${ this.target }`;\n    }\n}\n\n/**\n * @package\n */\nclass SelectOptions implements Interaction {\n\n    constructor(\n        private readonly values: Array<Answerable<string[] | string>>,\n        private readonly target: Question<ElementFinder> | ElementFinder\n    ) {\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return Promise.all(this.values.map(value => actor.answer(value)))\n            .then(flatten)\n            .then(values => {\n\n                const\n                    hasRequiredText = (option: ElementFinder) =>\n                        option.getText().then(value => !! ~values.indexOf(value)),\n                    select = (option: ElementFinder) => option.click();\n\n                return promiseOf(\n                    withAnswerOf(actor, this.target, (element: ElementFinder) =>\n                        element.all(by.css('option'))\n                            .filter(optionsToSelect(hasRequiredText))\n                            .each(select)\n                    )\n                );\n            });\n    }\n\n    toString () {\n        return `#actor selects ${ commaSeparated(flatten(this.values), inspected) } from ${ this.target }`;\n    }\n}\n\n/** @package */\nfunction flatten<T>(listOfLists: Array<T[] | T>): T[] {\n    return listOfLists\n        .map(item => [].concat(item))\n        .reduce((acc: T[], list: T[]) => acc.concat(list), []);\n}\n\n/** @package */\nfunction optionsToSelect(criterion: (option: ElementFinder) => promise.Promise<boolean>) {\n\n    const\n        isAlreadySelected = (option: ElementFinder) => option.isSelected(),\n        xor = (first: boolean, second: boolean) => first !== second;\n\n    return (option: ElementFinder) =>\n        isAlreadySelected(option)\n            .then(alreadySelected =>\n                criterion(option).then(criterionMet =>\n                    xor(alreadySelected, criterionMet)\n                )\n            );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Select.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 525,
    "kind": "class",
    "name": "Select",
    "memberof": "src/screenplay/interactions/Select.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~Select",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Select}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n select an option from a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select),\n either by its display name, or by value.",
    "see": [
      "{@link Selected}"
    ],
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "value",
    "memberof": "src/screenplay/interactions/Select.ts~Select",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~Select.value",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with a [`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)\n of a single [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.",
    "examples": [
      "<caption>Example widget</caption>\n <select data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.value('UK').from(Countries.dropdown),\n         Ensure.that(Selected.valueOf(Countries.dropdown), equals('UK')),\n     );"
    ],
    "see": [
      "{@link Selected.valueOf}",
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SelectBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A value of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SelectBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "values",
    "memberof": "src/screenplay/interactions/Select.ts~Select",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~Select.values",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with [`value`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#attr-value)\n of multiple [`<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.",
    "examples": [
      "<caption>Example widget</caption>\n <select multiple data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.values('UK').from(Countries.dropdown),\n         Ensure.that(Selected.valuesOf(Countries.dropdown), equals([ 'UK' ])),\n     );"
    ],
    "see": [
      "{@link Selected.valuesOf}",
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SelectBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<string[] | string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Values of the [`option` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SelectBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "option",
    "memberof": "src/screenplay/interactions/Select.ts~Select",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~Select.option",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with a single [`option`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.",
    "examples": [
      "<caption>Example widget</caption>\n <select data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.option('Poland').from(Countries.dropdown),\n         Ensure.that(\n             Selected.optionIn(Countries.dropdown),\n             equals('Poland')\n         ),\n     );"
    ],
    "see": [
      "{@link Selected.optionIn}",
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SelectBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Text of the [`option` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SelectBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "options",
    "memberof": "src/screenplay/interactions/Select.ts~Select",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~Select.options",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}\n with [`option`s](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select.",
    "examples": [
      "<caption>Example widget</caption>\n <select multiple data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.options('Poland', 'United States').from(Countries.dropdown),\n         Ensure.that(\n             Selected.optionsIn(Countries.dropdown),\n             equals([ 'Poland', 'United States' ])\n         ),\n     );"
    ],
    "see": [
      "{@link Selected.optionsIn}",
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SelectBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<string[] | string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "Text of the [`option` elements  ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor} to select"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SelectBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 530,
    "kind": "class",
    "name": "SelectValue",
    "memberof": "src/screenplay/interactions/Select.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~SelectValue",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 323,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 531,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 325,
    "undocument": true
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValue#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValue#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 267,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "SelectValues",
    "memberof": "src/screenplay/interactions/Select.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~SelectValues",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 378,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 535,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValues",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValues#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValues",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValues#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Select.ts~SelectValues",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectValues#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 304,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "class",
    "name": "SelectOption",
    "memberof": "src/screenplay/interactions/Select.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~SelectOption",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 444,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 539,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOption#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 446,
    "undocument": true
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOption#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOption#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 330,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "class",
    "name": "SelectOptions",
    "memberof": "src/screenplay/interactions/Select.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~SelectOptions",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 499,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 543,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 501,
    "undocument": true
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOptions#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Select.ts~SelectOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Select.ts~SelectOptions#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 366,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "function",
    "name": "flatten",
    "memberof": "src/screenplay/interactions/Select.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~flatten",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 566,
    "ignore": true,
    "params": [
      {
        "name": "listOfLists",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "function",
    "name": "optionsToSelect",
    "memberof": "src/screenplay/interactions/Select.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Select.ts~optionsToSelect",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Select.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 582,
    "ignore": true,
    "params": [
      {
        "name": "criterion",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "file",
    "name": "src/screenplay/interactions/SelectBuilder.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { Interaction } from '@serenity-js/core/lib/screenplay';\nimport { ElementFinder } from 'protractor';\n\n/**\n * @desc\n *  Configures the {@link Target} representing\n *  a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)\n *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n *  to interact with.\n *\n * @interface\n */\nexport interface SelectBuilder {\n\n    /**\n     * @desc\n     *  Configures the {@link Target} representing\n     *  a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)\n     *  for the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  to interact with\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Select}\n     * @see {@link Select.option}\n     * @see {@link Select.options}\n     * @see {@link Select.value}\n     * @see {@link Select.values}\n     * @see {@link Target}\n     */\n    from: (target: Question<ElementFinder> | ElementFinder) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/SelectBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 549,
    "kind": "class",
    "name": "SelectBuilder",
    "memberof": "src/screenplay/interactions/SelectBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/SelectBuilder.ts~SelectBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{SelectBuilder}",
    "description": " Configures the {@link Target} representing\n a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to interact with.",
    "lineNumber": 21,
    "interface": true
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "from",
    "memberof": "src/screenplay/interactions/SelectBuilder.ts~SelectBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/SelectBuilder.ts~SelectBuilder#from",
    "access": "public",
    "description": " Configures the {@link Target} representing\n a [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)\n for the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to interact with",
    "see": [
      "{@link Select}",
      "{@link Select.option}",
      "{@link Select.options}",
      "{@link Select.value}",
      "{@link Select.values}",
      "{@link Target}"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "file",
    "name": "src/screenplay/interactions/Switch.ts",
    "content": "import { Activity, Answerable, AnswersQuestions, Interaction, LogicError, PerformsActivities, Question, Task, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n *  to switch to a different [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame),\n *  [inline frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe),\n *  or browser window/tab.\n *\n * @example <caption>Lean Page Object describing a login form, embedded in an iframe</caption>\n *\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class LoginForm {\n *      static iframe           = Target.the('login form').located(by.tagName('iframe'));\n *      static usernameField    = Target.the('username field').located(by.css('[data-test=\"username\"]'));\n *      static passwordField    = Target.the('password field').located(by.css('[data-test=\"password\"]'));\n *      static submitButton     = Target.the('submit button').located(by.css(`button[type='submit']`));\n *  }\n *\n * @example <caption>Switch to an iframe and back</caption>\n *\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Switch, Enter, Click } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Francesca')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Switch.toFrame(LoginForm.iframe),\n *\n *          Enter.theValue('francesca@example.org').into(LoginForm.usernameField),\n *          Enter.theValue('correct-horse-battery-staple').into(LoginForm.passwordField),\n *          Click.on(LoginForm.submitButton),\n *\n *          Switch.toParentFrame(),\n *      );\n *\n * @example <caption>Perform activities in the context of an iframe</caption>\n *\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Switch, Enter, Click } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Francesca')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Switch.toFrame(LoginForm.iframe).and(\n *              Enter.theValue('francesca@example.org').into(LoginForm.usernameField),\n *              Enter.theValue('correct-horse-battery-staple').into(LoginForm.passwordField),\n *              Click.on(LoginForm.submitButton),\n *          ),\n *          // Note that Switch.toParentFrame() is invoked automatically\n *      );\n *\n * @example <caption>Switch to a new window/tab and back</caption>\n *\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Switch, Close } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Francesca')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Switch.toNewWindow(), // or: Switch.toWindow(...)\n *\n *          // perform some activities in the context of the new window\n *\n *          Close.currentWindow(),\n *\n *          Switch.toOriginalWindow(),\n *      );\n *\n * @example <caption>Perform activities in the context of a different window/tab</caption>\n *\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Switch, Close } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Francesca')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Switch.toNewWindow().and(\n *              // perform some activities in the context of the new window\n *\n *              Close.currentWindow()\n *          ),\n *\n *          // Note that Switch.toOriginalWindow() is invoked automatically\n *      );\n *\n * @see {@link Close}\n * @see {@link BrowseTheWeb}\n */\nexport class Switch {\n\n    /**\n     * @desc\n     *  Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to a [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame)\n     *  or an [inline frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\n     *  identified by its name, index or `Question<ElementFinder>`.\n     *\n     * @param {Answerable<ElementFinder | number | string>} targetOrIndex\n     *\n     * @returns {SwitchToFrame}\n     *\n     * @see {@link Switch.toParentFrame}\n     * @see {@link Switch.toDefaultContent}\n     * @see {@link Target}\n     */\n    static toFrame(targetOrIndex: Answerable<ElementFinder | number | string>): SwitchToFrame {\n        return new SwitchToFrame(targetOrIndex);\n    }\n\n    /**\n     * @desc\n     *  Sets the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to the parent of the current browsing context,\n     *  i.e. an `iframe` in which the current `iframe` is nested.\n     *\n     *  If the current context is the top-level browsing context, the context remains unchanged.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Switch.toFrame}\n     * @see https://w3c.github.io/webdriver/#switch-to-parent-frame\n     * @see https://w3c.github.io/webdriver/#dfn-current-browsing-context\n     */\n    static toParentFrame(): Interaction {\n        return new SwitchToParentFrame();\n    }\n\n    /**\n     * @desc\n     *  Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to the first frame on the page, or the main document\n     *  when a page contains [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)s.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Switch.toFrame}\n     */\n    static toDefaultContent(): Interaction {\n        return new SwitchToDefaultContent();\n    }\n\n    /**\n     * @desc\n     *  Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to a browser tab/window identified by its\n     *  name, index or [window handle](https://developer.mozilla.org/en-US/docs/Web/WebDriver/Commands/GetWindowHandles).\n     *\n     * @param {Answerable<string | number>} nameOrHandleOrIndex\n     * @returns {SwitchToWindow}\n     */\n    static toWindow(nameOrHandleOrIndex: Answerable<string | number>): SwitchToWindow {\n        return new SwitchToWindow(nameOrHandleOrIndex);\n    }\n\n    /**\n     * @desc\n     *  Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to the most recently opened browser tab/window.\n     *\n     *  **Please note** that this behaviour might vary in some browsers if there are more than two windows opened\n     *  at the same time.\n     *\n     * @returns {SwitchToWindow}\n     */\n    static toNewWindow(): SwitchToNewWindow {\n        return new SwitchToNewWindow();\n    }\n\n    /**\n     * @desc\n     *  Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n     *  for future commands to the original window used when the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  performed an interaction to {@link Navigate}.\n     *\n     *  **Please note** that this behaviour might vary in some browsers if there are more than two windows opened\n     *  at the same time, as window handles might be ordered alphabetically instead of the order in which they were created.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static toOriginalWindow() {\n        return new SwitchToOriginalWindow();\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToFrame extends Interaction {\n    constructor(private readonly targetOrIndex: Answerable<ElementFinder | number | string>) {\n        super();\n    }\n\n    and(...activities: Activity[]): Task {\n        return new SwitchToFrameAndPerformActivities(this.targetOrIndex, activities);\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.targetOrIndex)\n            .then(targetOrIndex =>\n                BrowseTheWeb.as(actor).switchToFrame(\n                    targetOrIndex instanceof ElementFinder\n                        ? targetOrIndex.getWebElement() // https://github.com/angular/protractor/issues/1846#issuecomment-82634739\n                        : targetOrIndex,\n                ),\n            );\n    }\n\n    toString(): string {\n        return `#actor switches to frame: ${ this.targetOrIndex }`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToFrameAndPerformActivities extends Task {\n    constructor(\n        private readonly targetOrIndex: Answerable<ElementFinder | number | string>,\n        private readonly activities: Activity[]\n    ) {\n        super();\n    }\n\n    performAs(actor: PerformsActivities): PromiseLike<void> {\n        return actor.attemptsTo(\n            new SwitchToFrame(this.targetOrIndex),\n            ...this.activities,\n            new SwitchToParentFrame()\n        )\n    }\n\n    toString(): string {\n        return `#actor switches to frame: ${ this.targetOrIndex }`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToParentFrame extends Interaction {\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).switchToParentFrame();\n    }\n\n    toString(): string {\n        return `#actor switches to parent frame`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToDefaultContent extends Interaction {\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).switchToDefaultContent();\n    }\n\n    toString(): string {\n        return `#actor switches to default content`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToWindow extends Interaction {\n    constructor(private readonly nameOrHandleOrIndex: Answerable<string | number>) {\n        super();\n    }\n\n    and(...activities: Activity[]): Task {\n        return new SwitchToWindowAndPerformActivities(this.nameOrHandleOrIndex, activities);\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.nameOrHandleOrIndex).then(index => BrowseTheWeb.as(actor).switchToWindow(index));\n    }\n\n    toString(): string {\n        return `#actor switches to window: ${this.nameOrHandleOrIndex}`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToWindowAndPerformActivities extends Task {\n    constructor(\n        private readonly nameOrHandleOrIndex: Answerable<string | number>,\n        private readonly activities: Activity[],\n    ) {\n        super();\n    }\n\n    performAs(actor: PerformsActivities & UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).getCurrentWindowHandle()\n            .then(currentWindow => {\n                return actor.attemptsTo(\n                    new SwitchToWindow(this.nameOrHandleOrIndex),\n                    ...this.activities,\n                    new SwitchToWindow(currentWindow),\n                );\n            });\n    }\n\n    toString(): string {\n        return `#actor switches to window: ${ this.nameOrHandleOrIndex }`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToNewWindow extends Interaction {\n    constructor() {\n        super();\n    }\n\n    and(...activities: Activity[]): Task {\n        return new SwitchToNewWindowAndPerformActivities(activities);\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return Promise.all([\n            BrowseTheWeb.as(actor).getCurrentWindowHandle(),\n            BrowseTheWeb.as(actor).getAllWindowHandles(),\n        ])\n        .then(([ currentHandle, handles ]: [ string, string[] ]) => handles.filter(handle => handle !== currentHandle))\n        .then(handles => {\n            if (handles.length === 0) {\n                throw new LogicError(`No new window has been opened to switch to`)\n            }\n\n            return BrowseTheWeb.as(actor).switchToWindow(handles[handles.length - 1]);\n        });\n    }\n\n    toString(): string {\n        return `#actor switches to the new browser window`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToNewWindowAndPerformActivities extends Task {\n    constructor(private readonly activities: Activity[]) {\n        super();\n    }\n\n    performAs(actor: PerformsActivities & UsesAbilities): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).getCurrentWindowHandle()\n            .then(currentWindow => {\n                return actor.attemptsTo(\n                    new SwitchToNewWindow(),\n                    ...this.activities,\n                    new SwitchToWindow(currentWindow),\n                );\n            });\n    }\n\n    toString(): string {\n        return `#actor switches to the new window`;\n    }\n}\n\n/**\n * @package\n */\nclass SwitchToOriginalWindow extends Interaction {\n    constructor() {\n        super();\n    }\n\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return BrowseTheWeb.as(actor).switchToOriginalWindow();\n    }\n\n    toString(): string {\n        return `#actor switches back to the original browser window`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Switch.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "class",
    "name": "Switch",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Switch}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to switch to a different [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame),\n [inline frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe),\n or browser window/tab.",
    "examples": [
      "<caption>Lean Page Object describing a login form, embedded in an iframe</caption>\n\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class LoginForm {\n     static iframe           = Target.the('login form').located(by.tagName('iframe'));\n     static usernameField    = Target.the('username field').located(by.css('[data-test=\"username\"]'));\n     static passwordField    = Target.the('password field').located(by.css('[data-test=\"password\"]'));\n     static submitButton     = Target.the('submit button').located(by.css(`button[type='submit']`));\n }",
      "<caption>Switch to an iframe and back</caption>\n\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Switch, Enter, Click } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Francesca')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Switch.toFrame(LoginForm.iframe),\n\n         Enter.theValue('francesca@example.org').into(LoginForm.usernameField),\n         Enter.theValue('correct-horse-battery-staple').into(LoginForm.passwordField),\n         Click.on(LoginForm.submitButton),\n\n         Switch.toParentFrame(),\n     );",
      "<caption>Perform activities in the context of an iframe</caption>\n\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Switch, Enter, Click } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Francesca')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Switch.toFrame(LoginForm.iframe).and(\n             Enter.theValue('francesca@example.org').into(LoginForm.usernameField),\n             Enter.theValue('correct-horse-battery-staple').into(LoginForm.passwordField),\n             Click.on(LoginForm.submitButton),\n         ),\n         // Note that Switch.toParentFrame() is invoked automatically\n     );",
      "<caption>Switch to a new window/tab and back</caption>\n\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Switch, Close } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Francesca')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Switch.toNewWindow(), // or: Switch.toWindow(...)\n\n         // perform some activities in the context of the new window\n\n         Close.currentWindow(),\n\n         Switch.toOriginalWindow(),\n     );",
      "<caption>Perform activities in the context of a different window/tab</caption>\n\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Switch, Close } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Francesca')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Switch.toNewWindow().and(\n             // perform some activities in the context of the new window\n\n             Close.currentWindow()\n         ),\n\n         // Note that Switch.toOriginalWindow() is invoked automatically\n     );"
    ],
    "see": [
      "{@link Close}",
      "{@link BrowseTheWeb}"
    ],
    "lineNumber": 105,
    "interface": false
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "toFrame",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toFrame",
    "access": "public",
    "description": " Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to a [frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame)\n or an [inline frame](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\n identified by its name, index or `Question<ElementFinder>`.",
    "see": [
      "{@link Switch.toParentFrame}",
      "{@link Switch.toDefaultContent}",
      "{@link Target}"
    ],
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SwitchToFrame}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<ElementFinder | number | string>"
        ],
        "spread": false,
        "optional": false,
        "name": "targetOrIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SwitchToFrame"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "toParentFrame",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toParentFrame",
    "access": "public",
    "description": " Sets the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to the parent of the current browsing context,\n i.e. an `iframe` in which the current `iframe` is nested.\n\n If the current context is the top-level browsing context, the context remains unchanged.",
    "see": [
      "{@link Switch.toFrame}",
      "https://w3c.github.io/webdriver/#switch-to-parent-frame",
      "https://w3c.github.io/webdriver/#dfn-current-browsing-context"
    ],
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "toDefaultContent",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toDefaultContent",
    "access": "public",
    "description": " Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to the first frame on the page, or the main document\n when a page contains [`iframe`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)s.",
    "see": [
      "{@link Switch.toFrame}"
    ],
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "toWindow",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toWindow",
    "access": "public",
    "description": " Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to a browser tab/window identified by its\n name, index or [window handle](https://developer.mozilla.org/en-US/docs/Web/WebDriver/Commands/GetWindowHandles).",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SwitchToWindow}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | number>"
        ],
        "spread": false,
        "optional": false,
        "name": "nameOrHandleOrIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SwitchToWindow"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "toNewWindow",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toNewWindow",
    "access": "public",
    "description": " Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to the most recently opened browser tab/window.\n\n **Please note** that this behaviour might vary in some browsers if there are more than two windows opened\n at the same time.",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SwitchToWindow}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SwitchToWindow"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "toOriginalWindow",
    "memberof": "src/screenplay/interactions/Switch.ts~Switch",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~Switch.toOriginalWindow",
    "access": "public",
    "description": " Switches the current [browsing context](https://w3c.github.io/webdriver/#dfn-current-browsing-context)\n for future commands to the original window used when the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n performed an interaction to {@link Navigate}.\n\n **Please note** that this behaviour might vary in some browsers if there are more than two windows opened\n at the same time, as window handles might be ordered alphabetically instead of the order in which they were created.",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 559,
    "kind": "class",
    "name": "SwitchToFrame",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrame",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 291,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "and",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrame#and",
    "access": "public",
    "description": " ",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrame#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrame#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 217,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 564,
    "kind": "class",
    "name": "SwitchToFrameAndPerformActivities",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 363,
    "interface": false,
    "extends": [
      "@serenity-js/core~Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 565,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToFrameAndPerformActivities#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 241,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 568,
    "kind": "class",
    "name": "SwitchToParentFrame",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToParentFrame",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 418,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToParentFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToParentFrame#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToParentFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToParentFrame#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 254,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 571,
    "kind": "class",
    "name": "SwitchToDefaultContent",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToDefaultContent",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 462,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToDefaultContent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToDefaultContent#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToDefaultContent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToDefaultContent#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 267,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 574,
    "kind": "class",
    "name": "SwitchToWindow",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindow",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 506,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindow#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "and",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindow#and",
    "access": "public",
    "description": " ",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindow#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindow#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 288,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 579,
    "kind": "class",
    "name": "SwitchToWindowAndPerformActivities",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 571,
    "interface": false,
    "extends": [
      "@serenity-js/core~Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 572,
    "undocument": true
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToWindowAndPerformActivities#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 315,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 583,
    "kind": "class",
    "name": "SwitchToNewWindow",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 629,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 584,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 630,
    "undocument": true
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "and",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow#and",
    "access": "public",
    "description": " ",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindow#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 347,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 588,
    "kind": "class",
    "name": "SwitchToNewWindowAndPerformActivities",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 705,
    "interface": false,
    "extends": [
      "@serenity-js/core~Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 706,
    "undocument": true
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToNewWindowAndPerformActivities#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 371,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 592,
    "kind": "class",
    "name": "SwitchToOriginalWindow",
    "memberof": "src/screenplay/interactions/Switch.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Switch.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 760,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 761,
    "undocument": true
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Switch.ts~SwitchToOriginalWindow#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 388,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 596,
    "kind": "file",
    "name": "src/screenplay/interactions/TakeScreenshot.ts",
    "content": "import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Name, Photo } from '@serenity-js/core/lib/model';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  take a screenshot and emit an {@link @serenity-js/core/lib/model~Artifact},\n *  which can then be persisted by {@link @serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver}\n *  and reported by [Serenity BDD reporter](/modules/serenity-bdd).\n *\n * @example <caption>Clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Navigate, TakeScreenshot } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Tania')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Navigate.to('/app'),\n *          TakeScreenshot.of('my app'),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}\n * @see {@link @serenity-js/core/lib/model~Artifact}\n * @see {@link @serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class TakeScreenshot extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<string>} name\n     *  The name to associate the screenshot with\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static of(name: Answerable<string>): Interaction {\n        return new TakeScreenshot(name);\n    }\n\n    /**\n     * @param {Answerable<string>} name\n     *  The name to associate the screenshot with\n     */\n    constructor(private readonly name: Answerable<string>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions & CollectsArtifacts): PromiseLike<void> {\n        return Promise.all([\n            BrowseTheWeb.as(actor).takeScreenshot(),\n            actor.answer(this.name),\n        ]).then(([ screenshot, name ]) => actor.collect(\n            Photo.fromBase64(screenshot),\n            new Name(name),\n        ));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor takes a screenshot of ${this.name}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/TakeScreenshot.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 597,
    "kind": "class",
    "name": "TakeScreenshot",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts",
    "static": true,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{TakeScreenshot}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n take a screenshot and emit an {@link @serenity-js/core/lib/model~Artifact},\n which can then be persisted by {@link @serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver}\n and reported by [Serenity BDD reporter](/modules/serenity-bdd).",
    "examples": [
      "<caption>Clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate, TakeScreenshot } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Tania')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Navigate.to('/app'),\n         TakeScreenshot.of('my app'),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/core/lib/screenplay/actor~CollectsArtifacts}",
      "{@link @serenity-js/core/lib/model~Artifact}",
      "{@link @serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver}"
    ],
    "lineNumber": 39,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot.of",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to associate the screenshot with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 599,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name to associate the screenshot with"
      }
    ]
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeScreenshot.ts~TakeScreenshot#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 602,
    "kind": "file",
    "name": "src/screenplay/interactions/UseAngular.ts",
    "content": "import { Interaction } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  enable or disable automated synchronisation between Protractor and Angular.\n *\n *  Useful when a test scenario needs to interact with both Angular-based\n *  and non-Angular web apps (i.e. use an external sign on form).\n *\n *  More examples in [Cross-application testing with Serenity/JS](https://janmolak.com/cross-application-testing-with-serenity-js-4103a272b75b).\n *\n *  **Please note** if your tests interact with a non-Angular app you can disable\n *  synchronisation altogether in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).\n *\n * @example <caption>Disabling synchronisation temporarily</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, UseAngular, Navigate } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Angie')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          UseAngular.disableSynchronisation(),\n *          Navigate.to('https://mycompany.com/login'),\n *          // navigate to a non-Angular app, perform some activities...\n *\n *          UseAngular.disableSynchronisation(),\n *          Navigate.to('https://myapp.com'),\n *          // navigate to an Angular app, perform some more activities...\n *      );\n *\n * @example <caption>Disabling synchronisation in protractor.conf.js</caption>\n *  exports.config = {\n *      onPrepare: function () {\n *          return browser.waitForAngularEnabled(false);\n *      },\n *      // ... other config\n *  };\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class UseAngular {\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  disable synchronisation between Protractor and Angular.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static disableSynchronisation(): Interaction {\n        return Interaction.where(`#actor disables synchronisation with Angular`, actor =>\n            BrowseTheWeb.as(actor).enableAngularSynchronisation(false).then(() => void 0));\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  enable synchronisation between Protractor and Angular.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static enableSynchronisation(): Interaction {\n        return Interaction.where(`#actor enables synchronisation with Angular`, actor =>\n            BrowseTheWeb.as(actor).enableAngularSynchronisation(true).then(() => void 0));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/UseAngular.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 603,
    "kind": "class",
    "name": "UseAngular",
    "memberof": "src/screenplay/interactions/UseAngular.ts",
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{UseAngular}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n enable or disable automated synchronisation between Protractor and Angular.\n\n Useful when a test scenario needs to interact with both Angular-based\n and non-Angular web apps (i.e. use an external sign on form).\n\n More examples in [Cross-application testing with Serenity/JS](https://janmolak.com/cross-application-testing-with-serenity-js-4103a272b75b).\n\n **Please note** if your tests interact with a non-Angular app you can disable\n synchronisation altogether in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).",
    "examples": [
      "<caption>Disabling synchronisation temporarily</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, UseAngular, Navigate } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Angie')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         UseAngular.disableSynchronisation(),\n         Navigate.to('https://mycompany.com/login'),\n         // navigate to a non-Angular app, perform some activities...\n\n         UseAngular.disableSynchronisation(),\n         Navigate.to('https://myapp.com'),\n         // navigate to an Angular app, perform some more activities...\n     );",
      "<caption>Disabling synchronisation in protractor.conf.js</caption>\n exports.config = {\n     onPrepare: function () {\n         return browser.waitForAngularEnabled(false);\n     },\n     // ... other config\n };"
    ],
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "disableSynchronisation",
    "memberof": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular.disableSynchronisation",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n disable synchronisation between Protractor and Angular.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "enableSynchronisation",
    "memberof": "src/screenplay/interactions/UseAngular.ts~UseAngular",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/UseAngular.ts~UseAngular.enableSynchronisation",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n enable synchronisation between Protractor and Angular.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 606,
    "kind": "file",
    "name": "src/screenplay/interactions/Wait.ts",
    "content": "import { Answerable, AnswersQuestions, AssertionError, Duration, Expectation, ExpectationMet, ExpectationOutcome, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { BrowseTheWeb } from '../abilities';\nimport { WaitBuilder } from './WaitBuilder';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  wait before proceeding either for a set {@link @serenity-js/core/lib/model~Duration}\n *  or until a given {@link @serenity-js/core/lib/screenplay/questions~Expectation} is met.\n *\n *  Useful when a test scenario can't take advantage of automatic synchronisation between\n *  Protractor and Angular (see {@link UseAngular}), or when the application under test is animation-heavy.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      After about 1 second, the text will change from 'Loading...' to 'Ready!'\n *  -->\n *  <h1 id=\"status\">Loading...</h1>\n *  <script>\n *      (function () {\n *          setTimeout(function () {\n *              document.getElementById('status').textContent = 'Ready!'\n *          }, 1000);\n *      })();\n *  </script>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class App {\n *      static status = Target.the('status widget')\n *          .located(by.id('status'));\n *  }\n *\n * @example <caption>Waiting for a set amount of time</caption>\n *  import { actorCalled, Duration } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait } from '@serenity-js/protractor';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Aurora')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Wait.for(Duration.ofSeconds(1.5)),\n *          Ensure.that(App.status, equals('Ready!')),\n *      );\n *\n *  // Please note that while the above implementation works,\n *  // this approach is inefficient because at best\n *  // the actor might wait too long and at worst the test\n *  // might become \"flaky\" if any external interference\n *  // (like network glitches, animations taking a bit too long etc.)\n *  // makes the actor wait not long enough.\n *\n * @example <caption>Waiting until a condition is met</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait, Text } from '@serenity-js/protractor';\n *  import { equals } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Aurora')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Wait.until(Text.of(App.status), equals('Ready!')),\n *          // app is ready, proceed with the scenario\n *      );\n *\n *  // Wait.until makes the Actor keep asking a Question,\n *  // in this case Text.of(App.status), until the answer meets\n *  // the expectation, or a timeout expires (default: 5s).\n *  //\n *  // Please note that both Ensure and Wait can be used with\n *  // the same expectations, like `equals`.\n *\n * @example <caption>Changing the default timeout</caption>\n *  import { actorCalled, Duration } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait, Text } from '@serenity-js/protractor';\n *  import { equals } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Aurora')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Wait.upTo(Duration.ofSeconds(3))\n *              .until(Text.of(App.status), equals('Ready!')),\n *          // app is ready, proceed with the scenario\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link Text}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n * @see {@link @serenity-js/core/lib/model~Duration}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Wait {\n\n    /**\n     * @desc\n     *  Default timeout of 5 seconds used with {@link Wait.until}.\n     *\n     * @type {@serenity-js/core~Duration}\n     */\n    static readonly Default_Timeout = Duration.ofSeconds(5);\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait for a set duration.\n     *\n     * @param {Answerable<Duration>} duration\n     *  A set duration the {@link @serenity-js/core/lib/screenplay/actor~Actor} should wait for\n     *  before proceeding\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static for(duration: Answerable<Duration>): Interaction {\n        return new WaitFor(duration);\n    }\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait until the answer to the question (`actual`) meets the `expectation`,\n     *  or a custom timeout expires.\n     *\n     * @param {Duration} duration\n     *  Custom timeout to override {@link Wait.Default_Timeout}\n     *\n     * @returns {WaitBuilder}\n     */\n    static upTo(duration: Duration): WaitBuilder {\n        return {\n            until: <Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction =>\n                new WaitUntil(actual, expectation, duration),\n        };\n    }\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait until the answer to the question (`actual`) meets the `expectation`,\n     *  or a {@link Wait.Default_Timeout} expires.\n     *\n     * @param {Answerable<Actual>} actual\n     *  A {@link @serenity-js/core/lib/screenplay~Question}\n     *  that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will keep asking until the answer meets\n     *  the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~<any,Actual>} expectation\n     *  An {@link @serenity-js/core/lib/screenplay/questions~Expectation} to be met before proceeding\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static until<Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction {\n        return new WaitUntil(actual, expectation, Wait.Default_Timeout);\n    }\n}\n\n/**\n * @package\n */\nclass WaitFor extends Interaction {\n    constructor(private readonly duration: Answerable<Duration>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.duration)\n            .then(duration => BrowseTheWeb.as(actor).sleep(duration.inMilliseconds()));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits for ${ this.duration }`;\n    }\n}\n\n/**\n * @package\n */\nclass WaitUntil<Actual> extends Interaction {\n    constructor(\n        private readonly actual: Answerable<Actual>,\n        private readonly expectation: Expectation<any, Actual>,\n        private readonly timeout: Duration,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        const\n            actual      = this.actual,\n            expectation = this.expectation.answeredBy(actor);\n\n        let expectationOutcome: ExpectationOutcome<any, Actual>;\n\n        return BrowseTheWeb.as(actor)\n            .wait(function () {\n                    return actor.answer(actual)\n                        .then(act => expectation(act))\n                        .then(outcome => {\n                            expectationOutcome = outcome;\n\n                            return outcome instanceof ExpectationMet;\n                        });\n                },\n                this.timeout.inMilliseconds(),\n            )\n            .then(_ => void 0)\n            .catch(error => {\n                if (!! expectationOutcome) {\n                    throw new AssertionError(\n                        `Waited ${ this.timeout.toString() } for ${ formatted `${ this.actual }` } to ${ this.expectation.toString() }`,\n                        expectationOutcome.expected,\n                        expectationOutcome.actual,\n                        error,\n                    );\n                }\n\n                throw error;\n            });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits up to ${ this.timeout } until ${ this.actual } does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/Wait.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 607,
    "kind": "class",
    "name": "Wait",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{Wait}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n wait before proceeding either for a set {@link @serenity-js/core/lib/model~Duration}\n or until a given {@link @serenity-js/core/lib/screenplay/questions~Expectation} is met.\n\n Useful when a test scenario can't take advantage of automatic synchronisation between\n Protractor and Angular (see {@link UseAngular}), or when the application under test is animation-heavy.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     After about 1 second, the text will change from 'Loading...' to 'Ready!'\n -->\n <h1 id=\"status\">Loading...</h1>\n <script>\n     (function () {\n         setTimeout(function () {\n             document.getElementById('status').textContent = 'Ready!'\n         }, 1000);\n     })();\n </script>",
      "<caption>Lean Page Object describing the widget</caption>\n import { Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class App {\n     static status = Target.the('status widget')\n         .located(by.id('status'));\n }",
      "<caption>Waiting for a set amount of time</caption>\n import { actorCalled, Duration } from '@serenity-js/core';\n import { BrowseTheWeb, Wait } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Aurora')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Wait.for(Duration.ofSeconds(1.5)),\n         Ensure.that(App.status, equals('Ready!')),\n     );\n\n // Please note that while the above implementation works,\n // this approach is inefficient because at best\n // the actor might wait too long and at worst the test\n // might become \"flaky\" if any external interference\n // (like network glitches, animations taking a bit too long etc.)\n // makes the actor wait not long enough.",
      "<caption>Waiting until a condition is met</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Wait, Text } from '@serenity-js/protractor';\n import { equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Aurora')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Wait.until(Text.of(App.status), equals('Ready!')),\n         // app is ready, proceed with the scenario\n     );\n\n // Wait.until makes the Actor keep asking a Question,\n // in this case Text.of(App.status), until the answer meets\n // the expectation, or a timeout expires (default: 5s).\n //\n // Please note that both Ensure and Wait can be used with\n // the same expectations, like `equals`.",
      "<caption>Changing the default timeout</caption>\n import { actorCalled, Duration } from '@serenity-js/core';\n import { BrowseTheWeb, Wait, Text } from '@serenity-js/protractor';\n import { equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Aurora')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Wait.upTo(Duration.ofSeconds(3))\n             .until(Text.of(App.status), equals('Ready!')),\n         // app is ready, proceed with the scenario\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link Text}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}",
      "{@link @serenity-js/core/lib/model~Duration}"
    ],
    "lineNumber": 108,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "Default_Timeout",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.Default_Timeout",
    "access": "public",
    "description": " Default timeout of 5 seconds used with {@link Wait.until}.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "for",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.for",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait for a set duration.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Duration>"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "A set duration the {@link @serenity-js/core/lib/screenplay/actor~Actor} should wait for\n before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "upTo",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.upTo",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait until the answer to the question (`actual`) meets the `expectation`,\n or a custom timeout expires.",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WaitBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Custom timeout to override {@link Wait.Default_Timeout}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WaitBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "until",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.until",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait until the answer to the question (`actual`) meets the `expectation`,\n or a {@link Wait.Default_Timeout} expires.",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "A {@link @serenity-js/core/lib/screenplay~Question}\n that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will keep asking until the answer meets\n the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided"
      },
      {
        "nullable": null,
        "types": [
          "<any,Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "An {@link @serenity-js/core/lib/screenplay/questions~Expectation} to be met before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 612,
    "kind": "class",
    "name": "WaitFor",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 241,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 242,
    "undocument": true
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 616,
    "kind": "class",
    "name": "WaitUntil",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 308,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 617,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 620,
    "kind": "file",
    "name": "src/screenplay/interactions/WaitBuilder.ts",
    "content": "import { Answerable, Expectation } from '@serenity-js/core';\nimport { Interaction } from '@serenity-js/core/lib/screenplay';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Wait} more readable.\n *\n * @see {@link Wait}\n *\n * @interface\n */\nexport interface WaitBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Wait}.\n     *\n     * @param {Answerable<Actual>} actual\n     *  A {@link @serenity-js/core/lib/screenplay~Question}\n     *  that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will keep asking until the answer meets\n     *  the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any,Actual>} expectation\n     *  An {@link @serenity-js/assertions~Expectation} to be met before proceeding\n     *\n     * @returns {Interaction}\n     *\n     * @see {@link Target}\n     */\n    until: <Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/WaitBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 621,
    "kind": "class",
    "name": "WaitBuilder",
    "memberof": "src/screenplay/interactions/WaitBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/interactions",
    "importStyle": "{WaitBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Wait} more readable.",
    "see": [
      "{@link Wait}"
    ],
    "lineNumber": 21,
    "interface": true
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "until",
    "memberof": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder#until",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Wait}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "A {@link @serenity-js/core/lib/screenplay~Question}\n that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will keep asking until the answer meets\n the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided"
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any,Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "An {@link @serenity-js/assertions~Expectation} to be met before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "file",
    "name": "src/screenplay/interactions/index.ts",
    "content": "export * from './Accept';\nexport * from './Clear';\nexport * from './Click';\nexport * from './Close';\nexport * from './Dismiss';\nexport * from './DeleteCookies';\nexport * from './DoubleClick';\nexport * from './Enter';\nexport * from './ExecuteScript';\nexport * from './Hover';\nexport * from './Navigate';\nexport * from './Press';\nexport * from './ResizeBrowserWindow';\nexport * from './Scroll';\nexport * from './Select';\nexport * from './Switch';\nexport * from './TakeScreenshot';\nexport * from './UseAngular';\nexport * from './Wait';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/interactions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 624,
    "kind": "file",
    "name": "src/screenplay/questions/Attribute.ts",
    "content": "import { Answerable, AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../withAnswerOf';\n\nexport class Attribute extends Question<Promise<string>> {\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return {\n            called: (name: Answerable<string>) => new Attribute(target, name),\n        };\n    }\n\n    constructor(\n        private readonly target: Question<ElementFinder> | ElementFinder,\n        private readonly name: Answerable<string>,\n    ) {\n        super(formatted `the value of the ${ name } attribute of ${ target}`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return actor.answer(this.name)\n            .then(name => withAnswerOf(actor, this.target, elf => elf.getAttribute(name)));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Attribute.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 625,
    "kind": "class",
    "name": "Attribute",
    "memberof": "src/screenplay/questions/Attribute.ts",
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Attribute}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ]
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute.of",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"called\": *}"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 629,
    "kind": "file",
    "name": "src/screenplay/questions/Browser.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { logging } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Browser {\n\n    /**\n     * @desc\n     *  Creates a {@link Question} that reads the entries of the browser log\n     *  so that they can be asserted on.\n     *\n     *  Please note that in order to ensure that the automated test has access to the browser log,\n     *  Protractor needs to be configured with the desired logging level, as per the example below.\n     *\n     * @example <caption>Enabling Protractor browser logging</caption>\n     * // protractor.conf.js\n     * exports.config = {\n     *   capabilities: {\n     *     loggingPrefs: {\n     *         // available options: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL\n     *         browser: 'SEVERE'\n     *     },\n     *   }\n     * }\n     *\n     * @example <caption>Ensure the app didn't log anything to the console during the test</caption>\n     * import { Actor, BrowseTheWeb, Browser } from '@serenity-js/core';\n     * import { Ensure, property, equals } from '@serenity-js/assertions';\n     *\n     * actor.attemptsTo(\n     *   Ensure.that(Browser.log(), property('length', equals(0))),\n     * );\n     *\n     * @example <caption>Mark the test as \"compromised\" if the server responds with a 500 to any AJAX request during the test</caption>\n     * import { Actor, BrowseTheWeb, Browser, TestCompromisedError } from '@serenity-js/core';\n     * import { Ensure, property, equals, not, contrainAtLeastOneItemThat } from '@serenity-js/assertions'\n     *\n     * actor.attemptsTo(\n     *   Ensure.that(Browser.log(),\n     *     not(contrainAtLeastOneItemThat(\n     *       property('message', includes('the server responded with a status of 500'))\n     *     ))\n     *   ).otherwiseFailWith(TestCompromisedError, 'The server is down'),\n     * );\n     *\n     * @see https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#loggingpreferences-json-object\n     * @returns {Question<Promise<logging.Entry[]>>}\n     */\n    static log() {\n        return Question.about<Promise<logging.Entry[]>>(`browser log`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).manage().logs().get('browser')));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Browser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 630,
    "kind": "class",
    "name": "Browser",
    "memberof": "src/screenplay/questions/Browser.ts",
    "static": true,
    "longname": "src/screenplay/questions/Browser.ts~Browser",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Browser}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "log",
    "memberof": "src/screenplay/questions/Browser.ts~Browser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Browser.ts~Browser.log",
    "access": "public",
    "description": " Creates a {@link Question} that reads the entries of the browser log\n so that they can be asserted on.\n\n Please note that in order to ensure that the automated test has access to the browser log,\n Protractor needs to be configured with the desired logging level, as per the example below.",
    "examples": [
      "<caption>Enabling Protractor browser logging</caption>\n// protractor.conf.js\nexports.config = {\n  capabilities: {\n    loggingPrefs: {\n        // available options: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL\n        browser: 'SEVERE'\n    },\n  }\n}",
      "<caption>Ensure the app didn't log anything to the console during the test</caption>\nimport { Actor, BrowseTheWeb, Browser } from '@serenity-js/core';\nimport { Ensure, property, equals } from '@serenity-js/assertions';\n\nactor.attemptsTo(\n  Ensure.that(Browser.log(), property('length', equals(0))),\n);",
      "<caption>Mark the test as \"compromised\" if the server responds with a 500 to any AJAX request during the test</caption>\nimport { Actor, BrowseTheWeb, Browser, TestCompromisedError } from '@serenity-js/core';\nimport { Ensure, property, equals, not, contrainAtLeastOneItemThat } from '@serenity-js/assertions'\n\nactor.attemptsTo(\n  Ensure.that(Browser.log(),\n    not(contrainAtLeastOneItemThat(\n      property('message', includes('the server responded with a status of 500'))\n    ))\n  ).otherwiseFailWith(TestCompromisedError, 'The server is down'),\n);"
    ],
    "see": [
      "https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#loggingpreferences-json-object"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<logging.Entry[]>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<logging.Entry[]>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 632,
    "kind": "file",
    "name": "src/screenplay/questions/CSSClasses.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { Attribute } from './Attribute';\nimport { TargetNestedElement } from './targets';\n\n/**\n * @desc\n *  Resolves to an array of [CSS classes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class)\n *  of a given {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`.\n *\n * @example <caption>Example widget</caption>\n *  <ul id=\"shopping-list\" class=\"active favourite\">\n *    <li class=\"bought\">Coffee<li>\n *    <li class=\"buy\">Honey<li>\n *    <li class=\"buy\">Chocolate<li>\n *  </ul>\n *\n * @example <caption>Retrieve CSS classes of a given WebElement</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, CSSClasses, Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  const shoppingList = () =>\n *      Target.the('shopping list').located(by.id('shopping-list'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Ensure.that(CSSClasses.of(shoppingList()), equals([ 'active', 'favourite' ])),\n *      )\n *\n * @example <caption>Find WebElements with a given class</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, CSSClasses, Target } from '@serenity-js/protractor';\n *  import { by } from 'protractor';\n *\n *  class ShoppingList {\n *      static items = () =>\n *          Target.all('items')\n *              .located(by.css('#shopping-list li'))\n *\n *      static outstandingItems = () =>\n *          ShoppingList.items\n *              .where(CSSClasses, contain('buy'))\n *  }\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Ensure.that(\n *              Text.ofAll(ShoppingList.outstandingItems()),\n *              equals([ 'Honey', 'Chocolate' ])\n *          ),\n *      )\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class CSSClasses\n    extends Question<Promise<string[]>>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n{\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     * @returns {CSSClasses}\n     */\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return new CSSClasses(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `CSS classes of ${ target}`);\n    }\n\n    /**\n     * @desc\n     *  Resolves to an array of CSS classes of the `target` element,\n     *  located in the context of a `parent` element.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Target.all}\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new CSSClasses(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        return Attribute.of(this.target).called('class').answeredBy(actor)\n            .then(attribute => attribute\n                .replace(/\\s+/, ' ')\n                .trim()\n                .split(' ')\n                .filter(cssClass => !! cssClass),\n            );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/CSSClasses.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 633,
    "kind": "class",
    "name": "CSSClasses",
    "memberof": "src/screenplay/questions/CSSClasses.ts",
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{CSSClasses}",
    "description": " Resolves to an array of [CSS classes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class)\n of a given {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`.",
    "examples": [
      "<caption>Example widget</caption>\n <ul id=\"shopping-list\" class=\"active favourite\">\n   <li class=\"bought\">Coffee<li>\n   <li class=\"buy\">Honey<li>\n   <li class=\"buy\">Chocolate<li>\n </ul>",
      "<caption>Retrieve CSS classes of a given WebElement</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, CSSClasses, Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n const shoppingList = () =>\n     Target.the('shopping list').located(by.id('shopping-list'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Ensure.that(CSSClasses.of(shoppingList()), equals([ 'active', 'favourite' ])),\n     )",
      "<caption>Find WebElements with a given class</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, CSSClasses, Target } from '@serenity-js/protractor';\n import { by } from 'protractor';\n\n class ShoppingList {\n     static items = () =>\n         Target.all('items')\n             .located(by.css('#shopping-list li'))\n\n     static outstandingItems = () =>\n         ShoppingList.items\n             .where(CSSClasses, contain('buy'))\n }\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Ensure.that(\n             Text.ofAll(ShoppingList.outstandingItems()),\n             equals([ 'Honey', 'Chocolate' ])\n         ),\n     )"
    ],
    "lineNumber": 69,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses.of",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CSSClasses}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CSSClasses"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 635,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#of",
    "access": "public",
    "description": " Resolves to an array of CSS classes of the `target` element,\n located in the context of a `parent` element.",
    "see": [
      "{@link Target.all}",
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 638,
    "kind": "file",
    "name": "src/screenplay/questions/Cookie.ts",
    "content": "import { Answerable, AnswersQuestions, Question, Transform, UsesAbilities } from '@serenity-js/core';\nimport { IWebDriverOptionsCookie } from 'selenium-webdriver';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Cookie {\n    static valueOf(cookieName: Answerable<string>): Question<Promise<string>> {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.value)\n            .as(`the value of the \"${ cookieName }\" cookie`);\n    }\n\n    static pathOf(cookieName: Answerable<string>): Question<Promise<string>> {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.path)\n            .as(`the path of the \"${ cookieName }\" cookie`);\n    }\n\n    static domainOf(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && details.domain)\n            .as(`the domain of the \"${ cookieName }\" cookie`);\n    }\n\n    static isHTTPOnly(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && !! details.httpOnly)\n            .as(`the HTTP-only status of the \"${ cookieName }\" cookie`);\n    }\n\n    static isSecure(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => details && !! details.secure)\n            .as(`the \"secure\" status of the \"${ cookieName }\" cookie`);\n    }\n\n    static expiryDateOf(cookieName: string) {\n        return Transform.the(new CookieDetails(cookieName), details => {\n                // expiry date coming from webdriver is expressed in seconds\n                return details && details.expiry && new Date(Number(details.expiry) * 1000);\n            })\n            .as(`the expiry date of the \"${ cookieName }\" cookie`);\n    }\n}\n\n/**\n * @package\n */\nclass CookieDetails extends Question<Promise<IWebDriverOptionsCookie>> {\n    constructor(private readonly name: Answerable<string>) {\n        super(`the details of the \"${ name } cookie`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<IWebDriverOptionsCookie> {\n        return actor.answer(this.name)\n            .then(name => BrowseTheWeb.as(actor).manage().getCookie(name))\n            .then(details => !! details ? details : undefined);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Cookie.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 639,
    "kind": "class",
    "name": "Cookie",
    "memberof": "src/screenplay/questions/Cookie.ts",
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Cookie}",
    "description": " ",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.valueOf",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "pathOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.pathOf",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "domainOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.domainOf",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "isHTTPOnly",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.isHTTPOnly",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "isSecure",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.isSecure",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "expiryDateOf",
    "memberof": "src/screenplay/questions/Cookie.ts~Cookie",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~Cookie.expiryDateOf",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cookieName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "class",
    "name": "CookieDetails",
    "memberof": "src/screenplay/questions/Cookie.ts",
    "static": true,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Cookie.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 139,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 647,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Cookie.ts~CookieDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Cookie.ts~CookieDetails#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 649,
    "kind": "file",
    "name": "src/screenplay/questions/LastScriptExecution.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Returns the result of last script executed via {@link ExecuteScript}\n */\nexport class LastScriptExecution {\n\n    /**\n     * @desc\n     *  Enables asserting on the result of a function executed via {@link ExecuteScript}.\n     *\n     * @returns {Question<R>}\n     */\n    static result<R>(): Question<R> {\n        return Question.about(`last script execution result`, actor =>\n            BrowseTheWeb.as(actor).getLastScriptExecutionResult());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/LastScriptExecution.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 650,
    "kind": "class",
    "name": "LastScriptExecution",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts",
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{LastScriptExecution}",
    "description": " Returns the result of last script executed via {@link ExecuteScript}",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "result",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution.result",
    "access": "public",
    "description": " Enables asserting on the result of a function executed via {@link ExecuteScript}.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<R>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<R>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 652,
    "kind": "file",
    "name": "src/screenplay/questions/ModalDialog.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { AlertPromise, error as errors } from 'selenium-webdriver';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Represents a modal dialog window created using\n *  [`Window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert),\n *  [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) or\n *  [`Window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm).\n *\n *  Check out the examples below, as well as the unit tests demonstrating the usage.\n *\n * @example <caption>Example widget</caption>\n *  <button\n *      data-test=\"trigger\"\n *      onclick=\"alert('Hello!')\">Trigger Alert</button>\n *\n * @example <caption>Lean Page Object</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { browser, by } from 'protractor';\n *\n *  class Widget {\n *      static trigger = Target.the('trigger button')\n *          .located(by.css('[data-test=\"trigger\"]'));\n *  }\n *\n * @see {@link Accept}\n * @see {@link Dismiss}\n * @see {@link Enter}\n * @see {@link Wait}\n * @see {@link @serenity-js/assertions~Ensure}\n */\nexport class ModalDialog {\n\n    /**\n     * @desc\n     *  A modal dialog window that could be {@link Accept}ed or {@link Dismiss}ed.\n     *\n     *  If the window was created using [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n     *  you can use the {@link @serenity-js/core/lib/screenplay~Interaction} to {@link Enter} with it too.\n     *\n     * @example <caption>Accepting an alert</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Accept, BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Click.on(Widget.trigger),\n     *          Accept.the(ModalDialog.window()),\n     *      );\n     *\n     * @see {@link Accept}\n     * @see {@link Dismiss}\n     * @see {@link Enter}\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<AlertPromise>}\n     */\n    static window(): Question<AlertPromise> {\n        return Question.about<AlertPromise>(`the modal dialog window`, actor =>\n            BrowseTheWeb.as(actor).alert()\n        );\n    }\n\n    /**\n     * @desc\n     *  Resolves to `true` if the modal dialog window is present, or `false` if it's not.\n     *\n     * @example <caption>Verifying if a modal dialog window is present</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n     *  import { Ensure, isFalse, isTrue } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Ensure.that(ModalDialog.hasPoppedUp(), isFalse()),\n     *          Click.on(Widget.trigger),\n     *          Ensure.that(ModalDialog.hasPoppedUp(), isTrue()),\n     *      );\n     *\n     * @example <caption>Waiting for a modal dialog window</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Click, Dismiss, ModalDialog, Wait } from '@serenity-js/protractor';\n     *  import { isTrue } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Click.on(Widget.trigger),\n     *          Wait.until(ModalDialog.hasPoppedUp(), isTrue()),\n     *          Dismiss.the(ModalDialog.window()),\n     *      );\n     *\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link Wait}\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<boolean>>}\n     */\n    static hasPoppedUp(): Question<Promise<boolean>> {\n        return Question.about<Promise<boolean>>(`the modal dialog has popped up`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).alert()).then(() => true, error => {\n                // Based on:\n                // https://github.com/SeleniumHQ/selenium/blob/941dc9c6b2e2aa4f701c1b72be8de03d4b7e996a/javascript/node/selenium-webdriver/lib/until.js#L107\n                return ! (error instanceof errors.NoSuchAlertError\n                    // XXX: Workaround for GeckoDriver error `TypeError: can't convert null\n                    // to object`. For more details, see\n                    // https://github.com/SeleniumHQ/selenium/pull/2137\n                    || (error instanceof errors.WebDriverError\n                        && error.message === `can't convert null to object`)\n                );\n            })\n        );\n    }\n\n    /**\n     * @desc\n     *  Resolves to the message displayed in the modal dialog window.\n     *\n     * @example <caption>Verifying the message</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Click.on(Widget.trigger),\n     *          Ensure.that(ModalDialog.message(), equals('Hello!')),\n     *      );\n     *\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link Wait}\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     */\n    static message(): Question<Promise<string>> {\n        return Question.about<Promise<string>>(`the modal dialog message`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).alert().getText())\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/ModalDialog.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "class",
    "name": "ModalDialog",
    "memberof": "src/screenplay/questions/ModalDialog.ts",
    "static": true,
    "longname": "src/screenplay/questions/ModalDialog.ts~ModalDialog",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{ModalDialog}",
    "description": " Represents a modal dialog window created using\n [`Window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert),\n [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) or\n [`Window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm).\n\n Check out the examples below, as well as the unit tests demonstrating the usage.",
    "examples": [
      "<caption>Example widget</caption>\n <button\n     data-test=\"trigger\"\n     onclick=\"alert('Hello!')\">Trigger Alert</button>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Widget {\n     static trigger = Target.the('trigger button')\n         .located(by.css('[data-test=\"trigger\"]'));\n }"
    ],
    "see": [
      "{@link Accept}",
      "{@link Dismiss}",
      "{@link Enter}",
      "{@link Wait}",
      "{@link @serenity-js/assertions~Ensure}"
    ],
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "window",
    "memberof": "src/screenplay/questions/ModalDialog.ts~ModalDialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/ModalDialog.ts~ModalDialog.window",
    "access": "public",
    "description": " A modal dialog window that could be {@link Accept}ed or {@link Dismiss}ed.\n\n If the window was created using [`Window.prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n you can use the {@link @serenity-js/core/lib/screenplay~Interaction} to {@link Enter} with it too.",
    "examples": [
      "<caption>Accepting an alert</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Widget.trigger),\n         Accept.the(ModalDialog.window()),\n     );"
    ],
    "see": [
      "{@link Accept}",
      "{@link Dismiss}",
      "{@link Enter}"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<AlertPromise>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<AlertPromise>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 655,
    "kind": "method",
    "name": "hasPoppedUp",
    "memberof": "src/screenplay/questions/ModalDialog.ts~ModalDialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/ModalDialog.ts~ModalDialog.hasPoppedUp",
    "access": "public",
    "description": " Resolves to `true` if the modal dialog window is present, or `false` if it's not.",
    "examples": [
      "<caption>Verifying if a modal dialog window is present</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n import { Ensure, isFalse, isTrue } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Ensure.that(ModalDialog.hasPoppedUp(), isFalse()),\n         Click.on(Widget.trigger),\n         Ensure.that(ModalDialog.hasPoppedUp(), isTrue()),\n     );",
      "<caption>Waiting for a modal dialog window</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, Dismiss, ModalDialog, Wait } from '@serenity-js/protractor';\n import { isTrue } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Widget.trigger),\n         Wait.until(ModalDialog.hasPoppedUp(), isTrue()),\n         Dismiss.the(ModalDialog.window()),\n     );"
    ],
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link Wait}"
    ],
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<boolean>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<boolean>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "message",
    "memberof": "src/screenplay/questions/ModalDialog.ts~ModalDialog",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/ModalDialog.ts~ModalDialog.message",
    "access": "public",
    "description": " Resolves to the message displayed in the modal dialog window.",
    "examples": [
      "<caption>Verifying the message</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, ModalDialog } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Click.on(Widget.trigger),\n         Ensure.that(ModalDialog.message(), equals('Hello!')),\n     );"
    ],
    "see": [
      "{@link @serenity-js/assertions~Ensure}",
      "{@link Wait}"
    ],
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<string>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 657,
    "kind": "file",
    "name": "src/screenplay/questions/Pick.ts",
    "content": "import { AnswersQuestions, Expectation, ExpectationMet, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nexport interface Collection<T> {\n    filter(fn: (item: T, index?: number) => boolean | Promise<boolean>): Collection<T>;\n    map<O>(fn: (item: T, index?: number) => O): PromiseLike<O[]>;\n    first(): T;\n    last(): T;\n    get(index: number): T;\n    count(): PromiseLike<number> | number;\n}\n\n/**\n * @deprecated\n *  Please use [Target.all](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html) instead.\n *\n * @experimental\n *\n * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n */\nexport class Pick<Item_Type, Collection_Type extends Collection<Item_Type> = Collection<Item_Type>> {\n\n    static from<IT, CT extends Collection<IT> = Collection<IT>>(collection: Question<CT> | CT) {\n        return new Pick<IT, CT>(collection);\n    }\n\n    constructor(\n        private readonly collection: Question<Collection_Type> | Collection_Type,\n        private readonly filters: Filters<Item_Type, Collection_Type> = new Filters<Item_Type, Collection_Type>(),\n    ) {\n    }\n\n    count(): Question<Promise<number>> {\n        return new NumberOfMatchingItems(this.collection, this.filters);\n    }\n\n    all(): Question<Collection_Type> {\n        return new AllMatchingItems(this.collection, this.filters);\n    }\n\n    first(): Question<Item_Type> {\n        return new FirstMatchingItem(this.collection, this.filters);\n    }\n\n    last(): Question<Item_Type> {\n        return new LastMatchingItem(this.collection, this.filters);\n    }\n\n    get(index: number): Question<Item_Type> {\n        return new NthMatchingItem(this.collection, this.filters, index);\n    }\n\n    where<Property_Type>(\n        question: MetaQuestion<Item_Type, Promise<Property_Type> | Property_Type>,\n        expectation: Expectation<any, Promise<Property_Type> | Property_Type>,\n    ): Pick<Item_Type, Collection_Type> {\n        return new Pick<Item_Type, Collection_Type>(\n            this.collection,\n            this.filters.append(new Filter<Item_Type, Collection_Type, any>(question, expectation)),\n        );\n    }\n}\n\n/**\n * @package\n */\nclass Filters<Item_Type, Collection_Type extends Collection<Item_Type>>\n    extends Question<(ct: Collection_Type) => Collection_Type>\n{\n    constructor(private readonly filters: Array<Filter<Item_Type, Collection_Type, any>> = []) {\n        super('');\n\n        const fullDescription = this.filters\n            .reduce((description, filter) => description.concat(filter.toString()), [ ])\n            .join(' and ');\n\n        this.subject = fullDescription.length > 0\n            ? `where ${ fullDescription }`\n            : '';\n    }\n\n    append(filter: Filter<Item_Type, Collection_Type, any>) {\n        return new Filters(this.filters.concat(filter));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): (ct: Collection_Type) => Collection_Type {\n        return (collection: Collection_Type) =>\n            this.filters.reduce((filteredCollection, filter) =>\n                    filter.answeredBy(actor)(filteredCollection),\n                collection,\n            );\n    }\n}\n\n/**\n * @package\n */\nclass Filter<Item_Type, Collection_Type extends Collection<Item_Type>, Property_Type>\n    extends Question<(ct: Collection_Type) => Collection_Type>\n{\n    constructor(\n        private readonly question: MetaQuestion<Item_Type, Promise<Property_Type> | Property_Type>,\n        private readonly expectation: Expectation<any, Promise<Property_Type> | Property_Type>,\n    ) {\n        super(formatted `${ question } does ${ expectation }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): (ct: Collection_Type) => Collection_Type {\n        return (collection: Collection_Type) =>\n            collection.filter((item: Item_Type) => {\n                const expectation = this.expectation.answeredBy(actor);\n                return Promise.resolve(this.question.of(item).answeredBy(actor))\n                    .then(answer => expectation(answer))\n                    .then(outcome => outcome instanceof ExpectationMet);\n            }) as Collection_Type;\n    }\n}\n\n/**\n * @package\n */\nabstract class QuestionAboutCollectionItems<IT, CT extends Collection<IT>, Answer_Type>\n    extends Question<Answer_Type>\n{\n    constructor(\n        protected readonly collection: Question<CT> | CT,\n        private readonly filters: Filters<IT, CT>,\n        private readonly description: string,\n    ) {\n        super(`${ description } ${ formatted `${ collection }`} ${ filters.toString() }`.trim())\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    abstract answeredBy(actor: AnswersQuestions & UsesAbilities): Answer_Type;\n\n    protected collectionFilteredBy(actor: AnswersQuestions & UsesAbilities): CT {\n        const collection = this.isAQuestion(this.collection)\n            ? this.collection.answeredBy(actor)\n            : this.collection;\n\n        return this.filters.answeredBy(actor)(collection);\n    }\n\n    private isAQuestion<T>(h: any): h is Question<T> {\n        return !! (h as any).answeredBy;\n    }\n}\n\n/**\n * @package\n */\nclass NumberOfMatchingItems<IT, CT extends Collection<IT>>\n    extends QuestionAboutCollectionItems<IT, CT, Promise<number>>\n{\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the number of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<number> {\n        return Promise.resolve(this.collectionFilteredBy(actor).count());\n    }\n}\n\n/**\n * @package\n */\nclass AllMatchingItems<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, CT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, '');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): CT {\n        return this.collectionFilteredBy(actor);\n    }\n}\n\n/**\n * @package\n */\nclass FirstMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the first of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).first();\n    }\n}\n\n/**\n * @package\n */\nclass LastMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n\n    constructor(collection: Question<CT> | CT, filters: Filters<IT, CT>) {\n        super(collection, filters, 'the last of');\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).last();\n    }\n}\n\n/**\n * @package\n */\nclass NthMatchingItem<IT, CT extends Collection<IT>> extends QuestionAboutCollectionItems<IT, CT, IT> {\n    private static ordinalSuffixOf(index: number) {\n        const\n            j = index % 10,\n            k = index % 100;\n\n        switch (true) {\n            case (j === 1 && k !== 11):\n                return index + 'st';\n            case (j === 2 && k !== 12):\n                return index + 'nd';\n            case (j === 3 && k !== 13):\n                return index + 'rd';\n            default:\n                return index + 'th';\n        }\n    }\n\n    constructor(\n        collection: Question<CT> | CT,\n        filters: Filters<IT, CT>,\n        private readonly index: number,\n    ) {\n        super(collection, filters, `the ${ NthMatchingItem.ordinalSuffixOf(index + 1) } of`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): IT {\n        return this.collectionFilteredBy(actor).get(this.index);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Pick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 658,
    "kind": "class",
    "name": "Pick",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Pick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Pick}",
    "description": "",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 35,
    "deprecated": " Please use [Target.all](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html) instead.",
    "experimental": true,
    "interface": false
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "from",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Pick.from",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " CT"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#count",
    "access": "public",
    "description": " ",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#all",
    "access": "public",
    "description": " ",
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#first",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#last",
    "access": "public",
    "description": " ",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#get",
    "access": "public",
    "description": " ",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/Pick.ts~Pick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Pick#where",
    "access": "public",
    "description": " ",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pick"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 667,
    "kind": "class",
    "name": "Filters",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Filters",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 173,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 668,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true
  },
  {
    "__docId__": 669,
    "kind": "member",
    "name": "subject",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#subject",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "append",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#append",
    "access": "public",
    "description": " ",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Filter"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~Filters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filters#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 672,
    "kind": "class",
    "name": "Filter",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~Filter",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 247,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 673,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~Filter#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 675,
    "kind": "class",
    "name": "QuestionAboutCollectionItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 303,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 676,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "collectionFilteredBy",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#collectionFilteredBy",
    "access": "protected",
    "description": " ",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CT"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "isAQuestion",
    "memberof": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~QuestionAboutCollectionItems#isAQuestion",
    "access": "private",
    "description": " ",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 679,
    "kind": "class",
    "name": "NumberOfMatchingItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 392,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 395,
    "undocument": true
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NumberOfMatchingItems#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 682,
    "kind": "class",
    "name": "AllMatchingItems",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 439,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 683,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 441,
    "undocument": true
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~AllMatchingItems",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~AllMatchingItems#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 685,
    "kind": "class",
    "name": "FirstMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 485,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 686,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 487,
    "undocument": true
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~FirstMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~FirstMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 516,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 688,
    "kind": "class",
    "name": "LastMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 531,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 689,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 533,
    "undocument": true
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~LastMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~LastMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 691,
    "kind": "class",
    "name": "NthMatchingItem",
    "memberof": "src/screenplay/questions/Pick.ts",
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Pick.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 577,
    "interface": false,
    "extends": [
      "QuestionAboutCollectionItems"
    ],
    "ignore": true
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "ordinalSuffixOf",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem.ordinalSuffixOf",
    "access": "private",
    "description": " ",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 608,
    "undocument": true
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Pick.ts~NthMatchingItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Pick.ts~NthMatchingItem#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 641,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 695,
    "kind": "file",
    "name": "src/screenplay/questions/ProtractorParam.ts",
    "content": "import { Answerable, AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Returns a Protractor configuration parameter specified in `protractor.conf.js`.\n *  Note that Protractor configuration parameters can be overridden via the command line.\n *\n * @example <caption>protractor.conf.js</caption>\n *  exports.config = {\n *    params: {\n *        login: {\n *            username: 'jane@example.org'\n *            password: process.env.PASSWORD\n *        }\n *    }\n *    // ...\n * }\n *\n * @example <caption>Overriding configuration parameter via the command line</caption>\n *  protractor ./protractor.conf.js --params.login.username=\"bob@example.org\"\n *\n * @example <caption>Using in a test scenario</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Enter, ProtractorParam } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Jane')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Enter.theValue(ProtractorParam.called('login.username').into(Form.exampleInput),\n *      );\n *\n * @extends {@serenity-js/core/lib/screenplay~Question<Promise<T>>}\n *\n * @see {@link BrowseTheWeb#param}\n */\nexport class ProtractorParam<T = any>\n    extends Question<Promise<T>>\n{\n    /**\n     * @desc\n     *  Name of the parameter to retrieve. This could also be a dot-delimited path,\n     *  i.e. `login.username`\n     *\n     * @param {@serenity-js/core/lib/screenplay~Answerable<string>} name\n     * @returns {ProtractorParam<R>}\n     */\n    static called<R>(name: Answerable<string>) {\n        return new ProtractorParam<R>(name);\n    }\n\n    /**\n     * @param {@serenity-js/core/lib/screenplay~Answerable<string>} name\n     */\n    constructor(private readonly name: Answerable<string>) {\n        super(formatted `the ${ name } param specified in Protractor config`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<T> {\n        return actor.answer(this.name)\n            .then(name => BrowseTheWeb.as(actor).param(name));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/ProtractorParam.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 696,
    "kind": "class",
    "name": "ProtractorParam",
    "memberof": "src/screenplay/questions/ProtractorParam.ts",
    "static": true,
    "longname": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{ProtractorParam}",
    "description": " Returns a Protractor configuration parameter specified in `protractor.conf.js`.\n Note that Protractor configuration parameters can be overridden via the command line.",
    "examples": [
      "<caption>protractor.conf.js</caption>\n exports.config = {\n   params: {\n       login: {\n           username: 'jane@example.org'\n           password: process.env.PASSWORD\n       }\n   }\n   // ...\n}",
      "<caption>Overriding configuration parameter via the command line</caption>\n protractor ./protractor.conf.js --params.login.username=\"bob@example.org\"",
      "<caption>Using in a test scenario</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Enter, ProtractorParam } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n actorCalled('Jane')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Enter.theValue(ProtractorParam.called('login.username').into(Form.exampleInput),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb#param}"
    ],
    "lineNumber": 46,
    "interface": false,
    "extends": [
      "Question<Promise<T>>"
    ]
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "called",
    "memberof": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam.called",
    "access": "public",
    "description": " Name of the parameter to retrieve. This could also be a dot-delimited path,\n i.e. `login.username`",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ProtractorParam<R>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProtractorParam<R>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 698,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/ProtractorParam.ts~ProtractorParam#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "file",
    "name": "src/screenplay/questions/Selected.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\nimport { promiseOf } from '../../promiseOf';\nimport { withAnswerOf } from '../withAnswerOf';\n\n/**\n * @desc\n *  Represents options and values selected in a\n *  [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select).\n *\n * @see {@link Select}\n */\nexport class Selected {\n\n    /**\n     * @desc\n     *  Represents the value of a single option selected in a\n     *  [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select).\n     *\n     * @example <caption>Example widget</caption>\n     *  <select data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.value('UK').from(Countries.dropdown),\n     *          Ensure.that(Selected.valueOf(Countries.dropdown), equals('UK')),\n     *      );\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  A {@link Target} identifying the `<select>` element of interest\n     *\n     * @returns {Question<Promise<string>>}\n     *\n     * @see {@link Select.value}\n     */\n    static valueOf(target: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new SelectedValue(target);\n    }\n\n    /**\n     * @desc\n     *  Represents values of options selected in a\n     *  [HTML `<select multiple>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)\n     *\n     * @example <caption>Example widget</caption>\n     *  <select multiple data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.values('UK').from(Countries.dropdown),\n     *          Ensure.that(Selected.valuesOf(Countries.dropdown), equals([ 'UK' ])),\n     *      );\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  A {@link Target} identifying the `<select>` element of interest\n     *\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Select.values}\n     */\n    static valuesOf(target: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new SelectedValues(target);\n    }\n\n    /**\n     * @desc\n     *  Represents a single option selected in a\n     *  [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)\n     *\n     * @example <caption>Example widget</caption>\n     *  <select data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.option('Poland').from(Countries.dropdown),\n     *          Ensure.that(\n     *              Selected.optionIn(Countries.dropdown),\n     *              equals('Poland')\n     *          ),\n     *      );\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  A {@link Target} identifying the `<select>` element of interest\n     *\n     * @returns {Question<Promise<string>>}\n     *\n     * @see {@link Select.option}\n     */\n    static optionIn(target: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new SelectedOption(target);\n    }\n\n    /**\n     * @desc\n     *  Represents options selected in a\n     *  [HTML `<select multiple>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)\n     *\n     * @example <caption>Example widget</caption>\n     *  <select multiple data-test='countries'>\n     *      <option value='UK'>United Kingdom</option>\n     *      <option value='PL'>Poland</option>\n     *      <option value='US'>United States</option>\n     *  </select>\n     *\n     * @example <caption>Lean Page Object</caption>\n     *  import { Target } from '@serenity-js/protractor';\n     *  import { browser, by } from 'protractor';\n     *\n     *  class Countries {\n     *      static dropdown = Target.the('countries dropdown')\n     *          .located(by.css('[data-test=\"countries\"]'));\n     *  }\n     *\n     * @example <caption>Retrieving the selected value</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *  import { protractor } from 'protractor';\n     *\n     *  actorCalled('Nick')\n     *      .whoCan(BrowseTheWeb.using(protractor.browser))\n     *      .attemptsTo(\n     *          Select.options('Poland', 'United States').from(Countries.dropdown),\n     *          Ensure.that(\n     *              Selected.optionsIn(Countries.dropdown),\n     *              equals([ 'Poland', 'United States' ])\n     *          ),\n     *      );\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     *  A {@link Target} identifying the `<select>` element of interest\n     *\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Select.options}\n     */\n    static optionsIn(target: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new SelectedOptions(target);\n    }\n}\n\n/**\n * @package\n */\nclass SelectedValue extends Question<Promise<string>> {\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `value selected in ${ target }`);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        const value = withAnswerOf(actor, this.target, (element: ElementFinder) =>\n            element.$('option:checked').getAttribute('value')\n        );\n\n        return promiseOf(value);\n    }\n}\n\n/**\n * @package\n */\nclass SelectedValues extends Question<Promise<string[]>> {\n\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `values selected in ${ target }`);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        const options = withAnswerOf(actor, this.target, (element: ElementFinder) => element.$$('option')\n            .filter(option => option.isSelected()));\n\n        return promiseOf(options.map(option => option.getAttribute('value')));\n    }\n}\n\n/**\n * @package\n */\nclass SelectedOption extends Question<Promise<string>> {\n\n    constructor(private target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `option selected in ${ target }`);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return promiseOf(withAnswerOf(actor, this.target, element => element.$('option:checked').getText()));\n    }\n}\n\n/**\n * @package\n */\nclass SelectedOptions extends Question<Promise<string[]>> {\n\n    constructor(private target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `options selected in ${ target }`);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        return promiseOf(withAnswerOf(actor, this.target, element => element.$$('option')\n            .filter(option => option.isSelected())\n            .map(elements => elements.getText())));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Selected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 701,
    "kind": "class",
    "name": "Selected",
    "memberof": "src/screenplay/questions/Selected.ts",
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~Selected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Selected}",
    "description": " Represents options and values selected in a\n [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select).",
    "see": [
      "{@link Select}"
    ],
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/screenplay/questions/Selected.ts~Selected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~Selected.valueOf",
    "access": "public",
    "description": " Represents the value of a single option selected in a\n [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select).",
    "examples": [
      "<caption>Example widget</caption>\n <select data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.value('UK').from(Countries.dropdown),\n         Ensure.that(Selected.valueOf(Countries.dropdown), equals('UK')),\n     );"
    ],
    "see": [
      "{@link Select.value}"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A {@link Target} identifying the `<select>` element of interest"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "valuesOf",
    "memberof": "src/screenplay/questions/Selected.ts~Selected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~Selected.valuesOf",
    "access": "public",
    "description": " Represents values of options selected in a\n [HTML `<select multiple>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)",
    "examples": [
      "<caption>Example widget</caption>\n <select multiple data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.values('UK').from(Countries.dropdown),\n         Ensure.that(Selected.valuesOf(Countries.dropdown), equals([ 'UK' ])),\n     );"
    ],
    "see": [
      "{@link Select.values}"
    ],
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A {@link Target} identifying the `<select>` element of interest"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "optionIn",
    "memberof": "src/screenplay/questions/Selected.ts~Selected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~Selected.optionIn",
    "access": "public",
    "description": " Represents a single option selected in a\n [HTML `<select>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)",
    "examples": [
      "<caption>Example widget</caption>\n <select data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.option('Poland').from(Countries.dropdown),\n         Ensure.that(\n             Selected.optionIn(Countries.dropdown),\n             equals('Poland')\n         ),\n     );"
    ],
    "see": [
      "{@link Select.option}"
    ],
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A {@link Target} identifying the `<select>` element of interest"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "optionsIn",
    "memberof": "src/screenplay/questions/Selected.ts~Selected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~Selected.optionsIn",
    "access": "public",
    "description": " Represents options selected in a\n [HTML `<select multiple>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple)",
    "examples": [
      "<caption>Example widget</caption>\n <select multiple data-test='countries'>\n     <option value='UK'>United Kingdom</option>\n     <option value='PL'>Poland</option>\n     <option value='US'>United States</option>\n </select>",
      "<caption>Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Countries {\n     static dropdown = Target.the('countries dropdown')\n         .located(by.css('[data-test=\"countries\"]'));\n }",
      "<caption>Retrieving the selected value</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Accept, BrowseTheWeb, Select, Selected } from '@serenity-js/protractor';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Nick')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Select.options('Poland', 'United States').from(Countries.dropdown),\n         Ensure.that(\n             Selected.optionsIn(Countries.dropdown),\n             equals([ 'Poland', 'United States' ])\n         ),\n     );"
    ],
    "see": [
      "{@link Select.options}"
    ],
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A {@link Target} identifying the `<select>` element of interest"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 706,
    "kind": "class",
    "name": "SelectedValue",
    "memberof": "src/screenplay/questions/Selected.ts",
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValue",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Selected.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 280,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 707,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValue#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 709,
    "kind": "class",
    "name": "SelectedValues",
    "memberof": "src/screenplay/questions/Selected.ts",
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValues",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Selected.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 318,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 710,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedValues",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValues#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedValues",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedValues#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 712,
    "kind": "class",
    "name": "SelectedOption",
    "memberof": "src/screenplay/questions/Selected.ts",
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOption",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Selected.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 355,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 713,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOption#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOption#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 715,
    "kind": "class",
    "name": "SelectedOptions",
    "memberof": "src/screenplay/questions/Selected.ts",
    "static": true,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOptions",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/Selected.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 389,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 716,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Selected.ts~SelectedOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Selected.ts~SelectedOptions#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 718,
    "kind": "file",
    "name": "src/screenplay/questions/Value.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ElementFinder } from 'protractor';\n\nimport { Attribute } from './Attribute';\nimport { TargetNestedElement } from './targets';\n\n/**\n * @desc\n *  Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n *  {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`.\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class Value\n    extends Question<Promise<string>>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n{\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     * @returns {Value}\n     */\n    static of(target: Question<ElementFinder> | ElementFinder) {\n        return new Value(target);\n    }\n\n    /**\n     * @param {Question<ElementFinder> | ElementFinder} target\n     */\n    constructor(private readonly target: Question<ElementFinder> | ElementFinder) {\n        super(formatted `the value of ${ target}`);\n    }\n\n    /**\n     * @desc\n     *  Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n     *  {@link WebElement}, located in the context of a `parent` element.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Target.all}\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new Value(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return Attribute.of(this.target).called('value').answeredBy(actor);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Value.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 719,
    "kind": "class",
    "name": "Value",
    "memberof": "src/screenplay/questions/Value.ts",
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Value}",
    "description": " Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value.of",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Value}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Value"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 721,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#of",
    "access": "public",
    "description": " Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n {@link WebElement}, located in the context of a `parent` element.",
    "see": [
      "{@link Target.all}",
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 724,
    "kind": "file",
    "name": "src/screenplay/questions/Website.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Website {\n    /**\n     * Retrieves the title of the current page.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     */\n    static title(): Question<Promise<string>> {\n        return Question.about(`the title of the current page`, actor =>\n            BrowseTheWeb.as(actor).getTitle(),\n        );\n    }\n\n    /**\n     * Retrieves the url of the current page.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     */\n    static url(): Question<Promise<string>> {\n        return Question.about(`the url of the current page`, actor =>\n            BrowseTheWeb.as(actor).getCurrentUrl(),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Website.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "class",
    "name": "Website",
    "memberof": "src/screenplay/questions/Website.ts",
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Website}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "title",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.title",
    "access": "public",
    "description": "Retrieves the title of the current page. ",
    "lineNumber": 10,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "url",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.url",
    "access": "public",
    "description": "Retrieves the url of the current page. ",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 728,
    "kind": "file",
    "name": "src/screenplay/questions/Window.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { promiseOf } from '../../promiseOf';\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Window {\n\n    /**\n     * @desc\n     *  Returns the size of the current browser window.\n     *\n     * @returns {Question<Promise<{ width: number, height: number }>>}\n     */\n    static size(): Question<Promise<{ width: number, height: number }>> {\n        return Question.about(`browser window size`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).manage().window().getSize()));\n    }\n\n    /**\n     * @desc\n     *  Returns the `{ x: number, y: number }` position of the current browser window.\n     *\n     * @returns {Question<Promise<{ x: number, y: number }>>}\n     */\n    static position(): Question<Promise<{ x: number, y: number }>> {\n        return Question.about(`browser window position`, actor =>\n            promiseOf(BrowseTheWeb.as(actor).manage().window().getPosition()));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/Window.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 729,
    "kind": "class",
    "name": "Window",
    "memberof": "src/screenplay/questions/Window.ts",
    "static": true,
    "longname": "src/screenplay/questions/Window.ts~Window",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions",
    "importStyle": "{Window}",
    "description": " ",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "size",
    "memberof": "src/screenplay/questions/Window.ts~Window",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Window.ts~Window.size",
    "access": "public",
    "description": " Returns the size of the current browser window.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<{ width: number, height: number }>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<{ width: number, height: number }>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "position",
    "memberof": "src/screenplay/questions/Window.ts~Window",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Window.ts~Window.position",
    "access": "public",
    "description": " Returns the `{ x: number, y: number }` position of the current browser window.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<{ x: number, y: number }>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<{ x: number, y: number }>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 732,
    "kind": "file",
    "name": "src/screenplay/questions/index.ts",
    "content": "export * from './Attribute';\nexport * from './Browser';\nexport * from './Cookie';\nexport * from './CSSClasses';\nexport * from './LastScriptExecution';\nexport * from './ModalDialog';\nexport { Pick } from './Pick';\nexport * from './ProtractorParam';\nexport { Target } from './targets';\nexport * from './Selected';\nexport * from './text';\nexport * from './Value';\nexport * from './Website';\nexport * from './Window';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 733,
    "kind": "file",
    "name": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts",
    "content": "import { ListAdapter } from '@serenity-js/core/lib/screenplay/questions/lists';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { AnswersQuestions, Expectation, ExpectationMet, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\n\n/**\n * @desc\n *  Adapts {@link ElementArrayFinder} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.\n *\n *  You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.\n *\n * @see {@link Target}\n *\n * @implements {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter}\n */\nexport class ElementArrayFinderListAdapter implements ListAdapter<ElementFinder, ElementArrayFinder> {\n\n    /**\n     * @param {Question<ElementArrayFinder> | ElementArrayFinder} collection\n     */\n    constructor(private readonly collection: Question<ElementArrayFinder> | ElementArrayFinder) {\n    }\n\n    /**\n     * @desc\n     *  Returns the number of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<number>}\n     */\n    count(actor: AnswersQuestions & UsesAbilities): Promise<number> {\n        return Promise.resolve(this.elements(actor).count());\n    }\n\n    /**\n     * @desc\n     *  Returns the first of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {ElementFinder}\n     */\n    first(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return this.elements(actor).first();\n    }\n\n    /**\n     * @desc\n     *  Returns the last of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {ElementFinder}\n     */\n    last(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return this.elements(actor).last();\n    }\n\n    /**\n     * @desc\n     *  Returns the nth of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     *\n     * @param {number} index\n     *  Zero-based index of the item to return\n     *\n     * @returns {ElementFinder}\n     */\n    get(actor: AnswersQuestions & UsesAbilities, index: number): ElementFinder {\n        return this.elements(actor).get(index);\n    }\n\n    /**\n     * @desc\n     *  Returns the underlying {@link ElementArrayFinder},\n     *  with any filters applied.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {ElementFinder}\n     */\n    items(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return this.elements(actor);\n    }\n\n    /**\n     * @desc\n     *  Filters the underlying {@link ElementArrayFinder} so that the result contains only those {@link ElementFinder}s that meet the {@link Expectation}\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_Type>} expectation\n     *\n     * @returns {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<ElementFinder, ElementArrayFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    withFilter<Answer_Type>(\n        question: MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>\n    ): ListAdapter<ElementFinder, ElementArrayFinder> {\n        return new ElementArrayFinderListAdapter(\n            new ElementArrayFinderArrayListFilter(this.collection, question, expectation)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns a human-readable description of the underlying {@link ElementArrayFinder}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `${ this.collection }`;\n    }\n\n    private elements(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return Question.isAQuestion(this.collection)\n            ? this.collection.answeredBy(actor)\n            : this.collection;\n    }\n}\n\n/**\n * @private\n */\nclass ElementArrayFinderArrayListFilter<Answer_Type>\n    extends Question<ElementArrayFinder>\n{\n    constructor(\n        private readonly collection: Question<ElementArrayFinder> | ElementArrayFinder,\n        private readonly question: MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>,\n        private readonly expectation: Expectation<any, Answer_Type>\n    ) {\n        super([\n            formatted `${ collection }`,\n            collection instanceof ElementArrayFinderArrayListFilter ? 'and' : 'where',\n            formatted `${ question } does ${ expectation }`\n        ].join(' '));\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n\n        return this.finderAs(actor)\n            .filter((elementFinder: ElementFinder) =>\n                Promise.resolve(this.question.of(elementFinder).answeredBy(actor))\n                    .then(answer => this.expectation.answeredBy(actor)(answer))\n                    .then(outcome => outcome instanceof ExpectationMet)\n            );\n    }\n\n    private finderAs(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return Question.isAQuestion(this.collection)\n            ? this.collection.answeredBy(actor)\n            : this.collection;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 734,
    "kind": "class",
    "name": "ElementArrayFinderListAdapter",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/lists",
    "importStyle": "{ElementArrayFinderListAdapter}",
    "description": " Adapts {@link ElementArrayFinder} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.\n\n You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 23,
    "interface": false,
    "implements": [
      "ListAdapter"
    ]
  },
  {
    "__docId__": 735,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementArrayFinder> ",
          " ElementArrayFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#count",
    "access": "public",
    "description": " Returns the number of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n left after applying any filters.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#first",
    "access": "public",
    "description": " Returns the first of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n left after applying any filters",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#last",
    "access": "public",
    "description": " Returns the last of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n left after applying any filters",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#get",
    "access": "public",
    "description": " Returns the nth of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,\n left after applying any filters",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Zero-based index of the item to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "items",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#items",
    "access": "public",
    "description": " Returns the underlying {@link ElementArrayFinder},\n with any filters applied.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ElementFinder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "withFilter",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#withFilter",
    "access": "public",
    "description": " Filters the underlying {@link ElementArrayFinder} so that the result contains only those {@link ElementFinder}s that meet the {@link Expectation}",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<ElementFinder, ElementArrayFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListAdapter<ElementFinder, ElementArrayFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#toString",
    "access": "public",
    "description": " Returns a human-readable description of the underlying {@link ElementArrayFinder}.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "elements",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderListAdapter#elements",
    "access": "private",
    "description": " ",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementArrayFinder"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 744,
    "kind": "class",
    "name": "ElementArrayFinderArrayListFilter",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 248,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 745,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 251,
    "undocument": true
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementArrayFinder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "finderAs",
    "memberof": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ElementArrayFinderListAdapter.ts~ElementArrayFinderArrayListFilter#finderAs",
    "access": "private",
    "description": " ",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ElementArrayFinder"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 748,
    "kind": "file",
    "name": "src/screenplay/questions/lists/index.ts",
    "content": "export * from './ElementArrayFinderListAdapter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/lists/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 749,
    "kind": "file",
    "name": "src/screenplay/questions/targets/Target.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\nimport { NestedTargetBuilder, TargetBuilder } from './builders';\nimport { TargetElement } from './TargetElement';\nimport { TargetElements } from './TargetElements';\nimport { TargetNestedElement } from './TargetNestedElement';\nimport { TargetNestedElements } from './TargetNestedElements';\n\n/**\n * @desc\n *  Provides a convenient way to retrieve a single web element or multiple web elements,\n *  so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n *\n *  Check out the examples below, as well as the unit tests demonstrating the usage.\n *\n *  @example <caption>Imaginary website under test</caption>\n *   <body>\n *       <ul id=\"basket\">\n *           <li><a href=\"#\">Apple</a></li>\n *           <li><a href=\"#\">Banana</a></li>\n *           <li><a href=\"#\">Coconut</a></li>\n *           <li><a href=\"#\" class=\"has-discount\">Date</a></li>\n *       </ul>\n *       <div id=\"summary\"><strong class=\"out-of-stock\">Coconut</strong> is not available</div>\n *       <button type=\"submit\">Proceed to Checkout</button>\n *   </body>\n *\n *  @example <caption>Locating a single element</caption>\n *   import { Target } from '@serenity-js/protractor';\n *   import { by } from 'protractor';\n *\n *   const proceedToCheckoutButton =\n *       Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));\n *\n *  @example <caption>Locating multiple elements</caption>\n *   import { Target } from '@serenity-js/protractor';\n *   import { by } from 'protractor';\n *\n *   const basketItems =\n *       Target.all('items in the basket').located(by.css('ul#basket li'));\n *\n *  @example <caption>Locating element relative to another element</caption>\n *   import { Target } from '@serenity-js/protractor';\n *   import { by } from 'protractor';\n *\n *   const summary =\n *       Target.the('summary').located(by.id('message'));\n *\n *   const outOfStockItem =\n *       Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))\n *\n *  @example <caption>Filtering elements matched by a locator</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { by } from 'protractor';\n *\n *   const basketItems =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .where(Text, endsWith('e'));    // Apple, Date\n *\n *  @example <caption>Counting items matched by a locator</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { Question } from '@serenity-js/core';\n *   import { by } from 'protractor';\n *\n *   const basketItemsCount: Question<Promise<number>> =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .count()    // 4\n *\n *  @example <caption>Getting first item matched by a locator</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { by, ElementFinder } from 'protractor';\n *\n *   const apple: Question<ElementFinder>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .first()\n *\n *  @example <caption>Getting last item matched by a locator</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { by, ElementFinder } from 'protractor';\n *\n *   const date: Question<ElementFinder>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .last()\n *\n *  @example <caption>Getting nth item matched by a locator</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { by, ElementFinder } from 'protractor';\n *\n *   const banana: Question<ElementFinder>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .get(1)\n *\n *  @example <caption>Using multiple filters and nested targets</caption>\n *   import { Target, Text } from '@serenity-js/protractor';\n *   import { contain, endsWith } from '@serenity-js/assertions';\n *   import { by, ElementFinder } from 'protractor';\n *\n *   class Basket {\n *       static component = Target.the('basket').located(by.id('basket'));\n *\n *       static items     = Target.all('items').located(by.css('li'))\n *          .of(Basket.component);\n *\n *       static link      = Target.the('link').located(by.css('a'));\n *   }\n *\n *   const date: Question<ElementFinder>  =\n *       Basket.items\n *          .where(Text, endsWith('e'))\n *          .where(CSSClasses.of(Basket.link), contain('has-discount'))\n *          .first()\n *\n *  @example <caption>Clicking on an element</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Click } from '@serenity-js/protractor';\n *   import { protractor } from 'protractor';\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(protractor.browser))\n *       .attemptsTo(\n *           Click.on(proceedToCheckoutButton),\n *       );\n *\n *  @example <caption>Retrieving text of multiple elements and performing an assertion</caption>\n *   import { Ensure, contain } from '@serenity-js/assertions';\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Click, Text } from '@serenity-js/protractor';\n *   import { protractor } from 'protractor';\n *\n *   const basketItemNames = Text.ofAll(basketItems);\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(protractor.browser))\n *       .attemptsTo(\n *           Ensure.that(basketItemNames, contain('Apple'))\n *       );\n *\n *  @example <caption>Waiting on an element</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Click, Text, Wait, isClickable } from '@serenity-js/protractor';\n *   import { protractor } from 'protractor';\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(protractor.browser))\n *       .attemptsTo(\n *           Wait.until(proceedToCheckoutButton, isClickable()),\n *       );\n */\nexport class Target  {\n\n    /**\n     * @desc\n     *  Locates a single web element\n     *\n     * @param {string} name - A human-readable name of the element to be used in the report\n     * @returns {TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}\n     */\n    static the(name: string): TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement> {\n        return {\n            located: (byLocator: Locator): TargetElement =>\n                new TargetElement(name, byLocator),\n\n            of: (parent: Question<ElementFinder> | ElementFinder) => {\n                return {\n                    located: (byLocator: Locator): TargetNestedElement =>\n                        new TargetNestedElement(parent, new TargetElement(name, byLocator)),\n                };\n            },\n        };\n    }\n\n    /**\n     * @desc\n     *  Locates a group of web elements\n     *\n     * @param {string} name - A human-readable name of the elements to be used in the report\n     * @returns {TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}\n     */\n    static all(name: string): TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements> {\n        return {\n            located: (byLocator: Locator): TargetElements =>\n                new TargetElements(name, byLocator),\n\n            of: (parent: Question<ElementFinder> | ElementFinder) => {\n                return {\n                    located: (byLocator: Locator): TargetNestedElements =>\n                        new TargetNestedElements(parent, new TargetElements(name, byLocator)),\n                };\n            },\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/Target.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "class",
    "name": "Target",
    "memberof": "src/screenplay/questions/targets/Target.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{Target}",
    "description": " Provides a convenient way to retrieve a single web element or multiple web elements,\n so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n\n Check out the examples below, as well as the unit tests demonstrating the usage.",
    "examples": [
      "<caption>Imaginary website under test</caption>\n  <body>\n      <ul id=\"basket\">\n          <li><a href=\"#\">Apple</a></li>\n          <li><a href=\"#\">Banana</a></li>\n          <li><a href=\"#\">Coconut</a></li>\n          <li><a href=\"#\" class=\"has-discount\">Date</a></li>\n      </ul>\n      <div id=\"summary\"><strong class=\"out-of-stock\">Coconut</strong> is not available</div>\n      <button type=\"submit\">Proceed to Checkout</button>\n  </body>",
      "<caption>Locating a single element</caption>\n  import { Target } from '@serenity-js/protractor';\n  import { by } from 'protractor';\n\n  const proceedToCheckoutButton =\n      Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));",
      "<caption>Locating multiple elements</caption>\n  import { Target } from '@serenity-js/protractor';\n  import { by } from 'protractor';\n\n  const basketItems =\n      Target.all('items in the basket').located(by.css('ul#basket li'));",
      "<caption>Locating element relative to another element</caption>\n  import { Target } from '@serenity-js/protractor';\n  import { by } from 'protractor';\n\n  const summary =\n      Target.the('summary').located(by.id('message'));\n\n  const outOfStockItem =\n      Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))",
      "<caption>Filtering elements matched by a locator</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { endsWith } from '@serenity-js/assertions';\n  import { by } from 'protractor';\n\n  const basketItems =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .where(Text, endsWith('e'));    // Apple, Date",
      "<caption>Counting items matched by a locator</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { endsWith } from '@serenity-js/assertions';\n  import { Question } from '@serenity-js/core';\n  import { by } from 'protractor';\n\n  const basketItemsCount: Question<Promise<number>> =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .count()    // 4",
      "<caption>Getting first item matched by a locator</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { endsWith } from '@serenity-js/assertions';\n  import { by, ElementFinder } from 'protractor';\n\n  const apple: Question<ElementFinder>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .first()",
      "<caption>Getting last item matched by a locator</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { endsWith } from '@serenity-js/assertions';\n  import { by, ElementFinder } from 'protractor';\n\n  const date: Question<ElementFinder>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .last()",
      "<caption>Getting nth item matched by a locator</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { endsWith } from '@serenity-js/assertions';\n  import { by, ElementFinder } from 'protractor';\n\n  const banana: Question<ElementFinder>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .get(1)",
      "<caption>Using multiple filters and nested targets</caption>\n  import { Target, Text } from '@serenity-js/protractor';\n  import { contain, endsWith } from '@serenity-js/assertions';\n  import { by, ElementFinder } from 'protractor';\n\n  class Basket {\n      static component = Target.the('basket').located(by.id('basket'));\n\n      static items     = Target.all('items').located(by.css('li'))\n         .of(Basket.component);\n\n      static link      = Target.the('link').located(by.css('a'));\n  }\n\n  const date: Question<ElementFinder>  =\n      Basket.items\n         .where(Text, endsWith('e'))\n         .where(CSSClasses.of(Basket.link), contain('has-discount'))\n         .first()",
      "<caption>Clicking on an element</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Click } from '@serenity-js/protractor';\n  import { protractor } from 'protractor';\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(protractor.browser))\n      .attemptsTo(\n          Click.on(proceedToCheckoutButton),\n      );",
      "<caption>Retrieving text of multiple elements and performing an assertion</caption>\n  import { Ensure, contain } from '@serenity-js/assertions';\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Click, Text } from '@serenity-js/protractor';\n  import { protractor } from 'protractor';\n\n  const basketItemNames = Text.ofAll(basketItems);\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(protractor.browser))\n      .attemptsTo(\n          Ensure.that(basketItemNames, contain('Apple'))\n      );",
      "<caption>Waiting on an element</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Click, Text, Wait, isClickable } from '@serenity-js/protractor';\n  import { protractor } from 'protractor';\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(protractor.browser))\n      .attemptsTo(\n          Wait.until(proceedToCheckoutButton, isClickable()),\n      );"
    ],
    "lineNumber": 161,
    "interface": false
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/questions/targets/Target.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target.the",
    "access": "public",
    "description": " Locates a single web element",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A human-readable name of the element to be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/questions/targets/Target.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/Target.ts~Target.all",
    "access": "public",
    "description": " Locates a group of web elements",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "A human-readable name of the elements to be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 753,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetElement.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\nimport { BrowseTheWeb } from '../../abilities';\nimport { override } from './override';\nimport { TargetNestedElement } from './TargetNestedElement';\n\n/**\n * @desc\n *  Locates a single {@link WebElement}.\n *\n *  Instead of using this class directly, please use {@link Target.the} instead.\n *\n * @public\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class TargetElement\n    extends Question<ElementFinder>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, ElementFinder>\n{\n    /**\n     * @desc\n     *\n     * @param {string} description - A human-readable description to be used in the report\n     * @param {protractor~Locator} locator - A locator to be used when locating the element\n     */\n    constructor(\n        protected readonly description: string,\n        protected readonly locator: Locator,\n    ) {\n        super(`the ${ description }`);\n    }\n\n    /**\n     * @desc\n     *  Retrieves a {@link WebElement} located by `locator`,\n     *  resolved in the context of a `parent` {@link WebElement}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElement}\n     *\n     * @see {@link Target}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElement(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return override(\n            BrowseTheWeb.as(actor).locate(this.locator),\n            'toString',\n            this.toString.bind(this),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 754,
    "kind": "class",
    "name": "TargetElement",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetElement}",
    "description": " Locates a single {@link WebElement}.\n\n Instead of using this class directly, please use {@link Target.the} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 755,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable description to be used in the report"
      },
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": "A locator to be used when locating the element"
      }
    ]
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#of",
    "access": "public",
    "description": " Retrieves a {@link WebElement} located by `locator`,\n resolved in the context of a `parent` {@link WebElement}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElement}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElement"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetElement.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElement.ts~TargetElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 758,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetElements.ts",
    "content": "import { AnswersQuestions, Expectation, List, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder, Locator } from 'protractor';\nimport { BrowseTheWeb } from '../../abilities';\nimport { override } from './override';\nimport { TargetNestedElements } from './TargetNestedElements';\nimport { ElementArrayFinderListAdapter } from '../lists';\n\n/**\n * @desc\n *  Locates a group of {@link WebElement}s.\n *\n *  Instead of using this class directly, please use {@link Target.all} instead.\n *\n * @public\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class TargetElements\n    extends Question<ElementArrayFinder>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, ElementArrayFinder>\n{\n    private readonly list: List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>;\n\n    /**\n     * @desc\n     *\n     * @param {string} description - A human-readable description to be used in the report\n     * @param {protractor~Locator} locator - A locator to be used when locating the element\n     */\n    constructor(\n        private readonly description: string,\n        private readonly locator: Locator,\n    ) {\n        super(`the ${ description }`);\n        this.list = new List(new ElementArrayFinderListAdapter(this));\n    }\n\n    /**\n     * @desc\n     *  Retrieves a group of {@link WebElement}s located by `locator`,\n     *  resolved in the context of a `parent` {@link WebElement}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElements}\n     *\n     * @see {@link Target}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElements(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Returns the number of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<number>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    count(): Question<Promise<number>> {\n        return this.list.count();\n    }\n\n    /**\n     * @desc\n     *  Returns the first of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    first(): Question<ElementFinder> {\n        return this.list.first()\n    }\n\n    /**\n     * @desc\n     *  Returns the last of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    last(): Question<ElementFinder> {\n        return this.list.last()\n    }\n\n    /**\n     * @desc\n     *  Returns an {@link ElementFinder} at `index` for `locator`\n     *\n     * @param {number} index\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    get(index: number): Question<ElementFinder> {\n        return this.list.get(index);\n    }\n\n    /**\n     * @desc\n     *  Filters the list of {@link ElementFinder}s matched by `locator` to those that meet the additional {@link @serenity-js/core/lib/screenplay/questions~Expectation}s.\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_type>} expectation\n     *\n     * @returns {@serenity-js/core/lib/screenplay/questions~List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    where<Answer_Type>(\n        question: MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder> {\n        return this.list.where(question, expectation);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return override(\n            BrowseTheWeb.as(actor).locateAll(this.locator),\n            'toString',\n            this.toString.bind(this),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 759,
    "kind": "class",
    "name": "TargetElements",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetElements}",
    "description": " Locates a group of {@link WebElement}s.\n\n Instead of using this class directly, please use {@link Target.all} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "list",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#list",
    "access": "private",
    "description": " ",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 761,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable description to be used in the report"
      },
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": "A locator to be used when locating the element"
      }
    ]
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#of",
    "access": "public",
    "description": " Retrieves a group of {@link WebElement}s located by `locator`,\n resolved in the context of a `parent` {@link WebElement}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElements}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElements"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#count",
    "access": "public",
    "description": " Returns the number of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#first",
    "access": "public",
    "description": " Returns the first of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#last",
    "access": "public",
    "description": " Returns the last of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#get",
    "access": "public",
    "description": " Returns an {@link ElementFinder} at `index` for `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#where",
    "access": "public",
    "description": " Filters the list of {@link ElementFinder}s matched by `locator` to those that meet the additional {@link @serenity-js/core/lib/screenplay/questions~Expectation}s.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetElements.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetElements.ts~TargetElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 770,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetNestedElement.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { override } from './override';\n\n/**\n * @desc\n *  Locates a single {@link WebElement} located within another {@link WebElement}.\n *\n *  Instead of using this class directly, please use {@link Target.the} and {@link TargetElement#of} instead.\n *\n * @public\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class TargetNestedElement\n    extends Question<ElementFinder>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, ElementFinder>\n{\n\n    /**\n     * @desc\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @param {Question<ElementFinder> | ElementFinder} child\n     */\n    constructor(\n        private readonly parent: Question<ElementFinder> | ElementFinder,\n        private readonly child: Question<ElementFinder> | ElementFinder,\n    ) {\n        super(`${ child.toString() } of ${ parent }`);\n    }\n\n    /**\n     * @desc\n     *  Retrieves a {@link WebElement} located by `locator`,\n     *  resolved in the context of a `parent` {@link WebElement}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElement}\n     *\n     * @see {@link Target}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElement(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementFinder {\n        return withAnswerOf<ElementFinder, ElementFinder>(actor, this.parent, parent =>\n            withAnswerOf<ElementFinder, ElementFinder>(actor, this.child, child => override(\n                parent.element(child.locator()),\n                'toString',\n                this.toString.bind(this),\n            )));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetNestedElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 771,
    "kind": "class",
    "name": "TargetNestedElement",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetNestedElement}",
    "description": " Locates a single {@link WebElement} located within another {@link WebElement}.\n\n Instead of using this class directly, please use {@link Target.the} and {@link TargetElement#of} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 772,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#of",
    "access": "public",
    "description": " Retrieves a {@link WebElement} located by `locator`,\n resolved in the context of a `parent` {@link WebElement}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElement}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElement"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElement.ts~TargetNestedElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 775,
    "kind": "file",
    "name": "src/screenplay/questions/targets/TargetNestedElements.ts",
    "content": "import { AnswersQuestions, Expectation, List, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { override } from './override';\nimport { ElementArrayFinderListAdapter } from '../lists';\n\n/**\n * @desc\n *  Locates a group of {@link WebElement}s located within another {@link WebElement}.\n *\n *  Instead of using this class directly, please use {@link Target.all} and {@link TargetElements#of} instead.\n *\n * @public\n * @see {@link Target}\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class TargetNestedElements\n    extends Question<ElementArrayFinder>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, ElementArrayFinder>\n{\n    private readonly list: List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>;\n\n    /**\n     * @desc\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @param {Question<ElementArrayFinder> | ElementArrayFinder} children\n     */\n    constructor(\n        private readonly parent: Question<ElementFinder> | ElementFinder,\n        private readonly children: Question<ElementArrayFinder> | ElementArrayFinder,\n    ) {\n        super(`${ children.toString() } of ${ parent }`);\n        this.list = new List(new ElementArrayFinderListAdapter(this));\n    }\n\n    /**\n     * @desc\n     *  Retrieves a group of {@link WebElement}s located by `locator`,\n     *  resolved in the context of a `parent` {@link WebElement}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} parent\n     * @returns {TargetNestedElements}\n     *\n     * @see {@link Target}\n     */\n    of(parent: Question<ElementFinder> | ElementFinder) {\n        return new TargetNestedElements(parent, this);\n    }\n\n    /**\n     * @desc\n     *  Returns the number of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<number>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    count(): Question<Promise<number>> {\n        return this.list.count();\n    }\n\n    /**\n     * @desc\n     *  Returns the first of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    first(): Question<ElementFinder> {\n        return this.list.first()\n    }\n\n    /**\n     * @desc\n     *  Returns the last of {@link ElementFinder}s matched by the `locator`\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    last(): Question<ElementFinder> {\n        return this.list.last()\n    }\n\n    /**\n     * @desc\n     *  Returns an {@link ElementFinder} at `index` for `locator`\n     *\n     * @param {number} index\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    get(index: number): Question<ElementFinder> {\n        return this.list.get(index);\n    }\n\n    /**\n     * @desc\n     *  Filters the list of {@link ElementFinder}s matched by `locator` to those that meet the additional {@link @serenity-js/core/lib/screenplay/questions~Expectation}s.\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_type>} expectation\n     *\n     * @returns {@serenity-js/core/lib/screenplay/questions~List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n     */\n    where<Answer_Type>(\n        question: MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder> {\n        return this.list.where(question, expectation);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder {\n        return withAnswerOf<ElementFinder, ElementArrayFinder>(actor, this.parent, parent =>\n            withAnswerOf<ElementArrayFinder, ElementArrayFinder>(actor, this.children, children => override(\n                parent.all(children.locator()),\n                'toString',\n                this.toString.bind(this),\n            )));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/TargetNestedElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 776,
    "kind": "class",
    "name": "TargetNestedElements",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/targets",
    "importStyle": "{TargetNestedElements}",
    "description": " Locates a group of {@link WebElement}s located within another {@link WebElement}.\n\n Instead of using this class directly, please use {@link Target.all} and {@link TargetElements#of} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 777,
    "kind": "member",
    "name": "list",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#list",
    "access": "private",
    "description": " ",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 778,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Question<ElementArrayFinder> ",
          " ElementArrayFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#of",
    "access": "public",
    "description": " Retrieves a group of {@link WebElement}s located by `locator`,\n resolved in the context of a `parent` {@link WebElement}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetNestedElements}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElements"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#count",
    "access": "public",
    "description": " Returns the number of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#first",
    "access": "public",
    "description": " Returns the first of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#last",
    "access": "public",
    "description": " Returns the last of {@link ElementFinder}s matched by the `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#get",
    "access": "public",
    "description": " Returns an {@link ElementFinder} at `index` for `locator`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<ElementFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ElementFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#where",
    "access": "public",
    "description": " Filters the list of {@link ElementFinder}s matched by `locator` to those that meet the additional {@link @serenity-js/core/lib/screenplay/questions~Expectation}s.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets/TargetNestedElements.ts~TargetNestedElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 787,
    "kind": "file",
    "name": "src/screenplay/questions/targets/builders.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport { ElementFinder, Locator } from 'protractor';\n\nexport interface TargetBuilder<T> {\n    located(byLocator: Locator): T;\n}\n\nexport interface NestedTargetBuilder<T> {\n    of(parent: Question<ElementFinder> | ElementFinder): TargetBuilder<T>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/builders.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 788,
    "kind": "file",
    "name": "src/screenplay/questions/targets/index.ts",
    "content": "export * from './Target';\nexport * from './TargetElement';\nexport * from './TargetElements';\nexport * from './TargetNestedElement';\nexport * from './TargetNestedElements';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 789,
    "kind": "file",
    "name": "src/screenplay/questions/targets/override.ts",
    "content": "/**\n * @package\n * @param obj\n * @param name - name of the method or field to override\n * @param implementation\n */\nexport function override<T extends object, K extends keyof T>(obj: T, name: K, implementation: T[K]) {\n    return new Proxy<T>(obj, {\n        get(o: T, prop: string | symbol) {\n            return prop === name\n                ? implementation\n                : obj[prop];\n        },\n    });\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/targets/override.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "function",
    "name": "override",
    "memberof": "src/screenplay/questions/targets/override.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets/override.ts~override",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/targets/override.ts",
    "importStyle": "{override}",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the method or field to override"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "implementation",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 791,
    "kind": "file",
    "name": "src/screenplay/questions/text/Text.ts",
    "content": "import { MetaQuestion, Question } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\nimport { TextOfMultipleElements } from './TextOfMultipleElements';\nimport { TextOfSingleElement } from './TextOfSingleElement';\n\n/**\n * @desc\n *  Resolves to the visible (i.e. not hidden by CSS) `innerText` of:\n *  - a given {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`,\n *  - a group of {@link WebElement}s, represented by {@link ElementArrayFinder} or `Question<ElementArrayFinder>`.\n *\n *  The result includes the visible text of any sub-elements, without any leading or trailing whitespace.\n *\n * @public\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class Text {\n\n    /**\n     * @desc\n     *  Retrieves text of a single {@link WebElement},\n     *  represented by {@link ElementFinder}\n     *  or `Question<ElementFinder>`.\n     *\n     * @param {Question<ElementFinder> | ElementFinder} target\n     * @returns {Question<Promise<string>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    static of(target: Question<ElementFinder> | ElementFinder):\n        Question<Promise<string>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n    {\n        return new TextOfSingleElement(target);\n    }\n\n    /**\n     * @desc\n     *  Retrieves text of a group of {@link WebElement}s,\n     *  represented by {@link ElementArrayFinder}\n     *  or `Question<ElementArrayFinder>`\n     *\n     * @param {Question<ElementArrayFinder> | ElementArrayFinder} target\n     * @returns {Question<Promise<string[]>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    static ofAll(target: Question<ElementArrayFinder> | ElementArrayFinder):\n        Question<Promise<string[]>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n    {\n        return new TextOfMultipleElements(target);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/Text.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 792,
    "kind": "class",
    "name": "Text",
    "memberof": "src/screenplay/questions/text/Text.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/screenplay/questions/text",
    "importStyle": "{Text}",
    "description": " Resolves to the visible (i.e. not hidden by CSS) `innerText` of:\n - a given {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`,\n - a group of {@link WebElement}s, represented by {@link ElementArrayFinder} or `Question<ElementArrayFinder>`.\n\n The result includes the visible text of any sub-elements, without any leading or trailing whitespace.",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text.of",
    "access": "public",
    "description": " Retrieves text of a single {@link WebElement},\n represented by {@link ElementFinder}\n or `Question<ElementFinder>`.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "ofAll",
    "memberof": "src/screenplay/questions/text/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/text/Text.ts~Text.ofAll",
    "access": "public",
    "description": " Retrieves text of a group of {@link WebElement}s,\n represented by {@link ElementArrayFinder}\n or `Question<ElementArrayFinder>`",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementArrayFinder> ",
          " ElementArrayFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 795,
    "kind": "file",
    "name": "src/screenplay/questions/text/TextOfMultipleElements.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementArrayFinder, ElementFinder } from 'protractor';\n\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { TargetNestedElements } from '../targets';\n\n/**\n * @package\n */\nexport class TextOfMultipleElements\n    extends Question<Promise<string[]>>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>\n{\n    constructor(protected readonly target: Question<ElementArrayFinder> | ElementArrayFinder) {\n        super(`the text of ${ target }`);\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string[]>> {\n        return new TextOfMultipleElements(new TargetNestedElements(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n\n        // protractor ignores type definitions for the ElementArrayFinder, hence the `any`\n        // https://github.com/angular/protractor/blob/c3978ec166760ac07db01e700c4aaaa19d9b5c38/lib/element.ts#L92\n        return withAnswerOf(actor, this.target, eaf => Promise.resolve(eaf.getText() as any) as Promise<string[]>);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/TextOfMultipleElements.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 796,
    "kind": "class",
    "name": "TextOfMultipleElements",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/text/TextOfMultipleElements.ts",
    "importStyle": "{TextOfMultipleElements}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 797,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#of",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfMultipleElements.ts~TextOfMultipleElements#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 800,
    "kind": "file",
    "name": "src/screenplay/questions/text/TextOfSingleElement.ts",
    "content": "import { AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { ElementFinder } from 'protractor';\n\nimport { withAnswerOf } from '../../withAnswerOf';\nimport { TargetNestedElement } from '../targets';\n\n/**\n * @package\n */\nexport class TextOfSingleElement\n    extends Question<Promise<string>>\n    implements MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>\n{\n    constructor(protected readonly target: Question<ElementFinder> | ElementFinder) {\n        super(`the text of ${ target }`);\n    }\n\n    of(parent: Question<ElementFinder> | ElementFinder): Question<Promise<string>> {\n        return new TextOfSingleElement(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return withAnswerOf(actor, this.target, elf => elf.getText() as any);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/TextOfSingleElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 801,
    "kind": "class",
    "name": "TextOfSingleElement",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts",
    "static": true,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/questions/text/TextOfSingleElement.ts",
    "importStyle": "{TextOfSingleElement}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 802,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#of",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question ",
          " ElementFinder"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/text/TextOfSingleElement.ts~TextOfSingleElement#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 805,
    "kind": "file",
    "name": "src/screenplay/questions/text/index.ts",
    "content": "export * from './Text';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/questions/text/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 806,
    "kind": "file",
    "name": "src/screenplay/withAnswerOf.ts",
    "content": "import { AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';\n\n/**\n * @private\n * @param actor\n * @param maybeQuestion\n * @param fn\n */\nexport function withAnswerOf<T, O>(\n    actor: AnswersQuestions & UsesAbilities,\n    maybeQuestion: Question<T> | T,\n    fn: (item: T) => O,\n) {\n    const answer = Question.isAQuestion(maybeQuestion)\n        ? maybeQuestion.answeredBy(actor)\n        : maybeQuestion;\n\n    return fn(answer);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/screenplay/withAnswerOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 807,
    "kind": "function",
    "name": "withAnswerOf",
    "memberof": "src/screenplay/withAnswerOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/withAnswerOf.ts~withAnswerOf",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/protractor/src/screenplay/withAnswerOf.ts",
    "importStyle": "{withAnswerOf}",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeQuestion",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "file",
    "name": "src/stage/crew/index.ts",
    "content": "export * from './photographer';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 809,
    "kind": "file",
    "name": "src/stage/crew/photographer/Photographer.ts",
    "content": "import { LogicError } from '@serenity-js/core';\nimport { ActivityFinished, ActivityStarts, DomainEvent } from '@serenity-js/core/lib/events';\nimport { Stage, StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { PhotoTakingStrategy } from './strategies';\n\n/**\n * @desc\n *  The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n *  of the web browser the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.\n *\n * @example <caption>Assigning the Photographer to the Stage</caption>\n *\n * const { ArtifactArchiver } = require('@serenity-js/core');\n * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n *\n * exports.config = {\n *\n *     serenity: {\n *         crew: [\n *             ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *             Photographer.whoWill(TakePhotosOfFailures),\n *         ]\n *     },\n *\n *     // ... rest of the config omitted for brevity\n * };\n *\n * @example <caption>Taking photos upon failures only</caption>\n *\n * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosOfFailures)\n *\n * @example <caption>Taking photos of all the interactions</caption>\n *\n * const { Photographer, TakePhotosOfInteractions } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosOfInteractions)\n *\n * @example <caption>Taking photos before and after all the interactions</caption>\n *\n * const { Photographer, TakePhotosBeforeAndAfterInteractions } = require('@serenity-js/protractor');\n *\n * Photographer.whoWill(TakePhotosBeforeAndAfterInteractions)\n *\n * @see {@link @serenity-js/core/lib/stage~Stage}\n */\nexport class Photographer implements StageCrewMember {\n\n    /**\n     * @desc\n     *  Instantiates a new {@link Photographer} configured to take photos (screenshots)\n     *  as per the specified {@link PhotoTakingStrategy}.\n     *\n     * @param {Function} strategy - A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}.\n     * @returns {StageCrewMember}\n     */\n    static whoWill(strategy: new () => PhotoTakingStrategy): StageCrewMember {\n        return new Photographer(new strategy());\n    }\n\n    /**\n     * @param {PhotoTakingStrategy} photoTakingStrategy\n     * @param {Stage} stage\n     */\n    constructor(\n        private readonly photoTakingStrategy: PhotoTakingStrategy,\n        private readonly stage: Stage = null,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new Photographer(this.photoTakingStrategy, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}\n     *  this {@link StageCrewMember} is assigned to.\n     *\n     * @param {DomainEvent} event\n     * @returns void\n     */\n    notifyOf(event: DomainEvent): void {\n        if (! this.stage) {\n            throw new LogicError(`Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n        }\n\n        if (! this.stage.theShowHasStarted()) {\n            return void 0;\n        }\n\n        if (event instanceof ActivityStarts || event instanceof ActivityFinished) {\n            this.photoTakingStrategy.considerTakingPhoto(event, this.stage);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/Photographer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 810,
    "kind": "class",
    "name": "Photographer",
    "memberof": "src/stage/crew/photographer/Photographer.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer",
    "importStyle": "{Photographer}",
    "description": " The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n of the web browser the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.",
    "examples": [
      "<caption>Assigning the Photographer to the Stage</caption>\n\nconst { ArtifactArchiver } = require('@serenity-js/core');\nconst { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n\nexports.config = {\n\n    serenity: {\n        crew: [\n            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n            Photographer.whoWill(TakePhotosOfFailures),\n        ]\n    },\n\n    // ... rest of the config omitted for brevity\n};",
      "<caption>Taking photos upon failures only</caption>\n\nconst { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosOfFailures)",
      "<caption>Taking photos of all the interactions</caption>\n\nconst { Photographer, TakePhotosOfInteractions } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosOfInteractions)",
      "<caption>Taking photos before and after all the interactions</caption>\n\nconst { Photographer, TakePhotosBeforeAndAfterInteractions } = require('@serenity-js/protractor');\n\nPhotographer.whoWill(TakePhotosBeforeAndAfterInteractions)"
    ],
    "see": [
      "{@link @serenity-js/core/lib/stage~Stage}"
    ],
    "lineNumber": 55,
    "interface": false
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "whoWill",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer.whoWill",
    "access": "public",
    "description": " Instantiates a new {@link Photographer} configured to take photos (screenshots)\n as per the specified {@link PhotoTakingStrategy}.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "strategy",
        "description": "A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 812,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "PhotoTakingStrategy"
        ],
        "spread": false,
        "optional": false,
        "name": "photoTakingStrategy",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link Stage}\n this {@link StageCrewMember} is assigned to.",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "void"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "void"
    }
  },
  {
    "__docId__": 815,
    "kind": "file",
    "name": "src/stage/crew/photographer/index.ts",
    "content": "export * from './strategies';\nexport * from './Photographer';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 816,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport {\n    ActivityFinished,\n    ActivityRelatedArtifactGenerated,\n    ActivityStarts,\n    AsyncOperationAttempted,\n    AsyncOperationCompleted,\n    AsyncOperationFailed,\n    DomainEvent,\n} from '@serenity-js/core/lib/events';\nimport { CorrelationId, Description, Name, Photo } from '@serenity-js/core/lib/model';\nimport { error as webdriver } from 'selenium-webdriver';\nimport { BrowseTheWeb } from '../../../../screenplay';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n *  of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  under specific conditions.\n *\n * @abstract\n */\nexport abstract class PhotoTakingStrategy {\n\n    /**\n     * @desc\n     *  Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n     *\n     * @param {@serenity-js/core/lib/events~ActivityStarts | @serenity-js/core/lib/events~ActivityFinished} event\n     * @param {@serenity-js/core/lib/stage~Stage} stage - the Stage that holds reference to the Actor in the spotlight\n     * @returns void\n     *\n     * @see {@serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}\n     */\n    considerTakingPhoto(event: ActivityStarts | ActivityFinished, stage: Stage): void {\n        if (this.shouldTakeAPhotoOf(event)) {\n            let browseTheWeb: BrowseTheWeb;\n\n            try {\n                browseTheWeb = BrowseTheWeb.as(stage.theActorInTheSpotlight());\n            } catch (error) {\n                return void 0;\n            }\n\n            const\n                id              = CorrelationId.create(),\n                nameSuffix      = this.photoNameFor(event);\n\n            stage.announce(new AsyncOperationAttempted(\n                new Description(`[Photographer:${ this.constructor.name }] Taking screenshot of '${ nameSuffix }'...`),\n                id,\n            ));\n\n            Promise.all([\n                browseTheWeb.takeScreenshot(),\n                browseTheWeb.getCapabilities(),\n            ]).then(([ screenshot, capabilities ]) => {\n\n                const\n                    context   = [ capabilities.get('platform'), capabilities.get('browserName'), capabilities.get('version') ],\n                    photoName = this.combinedNameFrom(...context, nameSuffix);\n\n                stage.announce(new ActivityRelatedArtifactGenerated(\n                    event.sceneId,\n                    event.activityId,\n                    photoName,\n                    Photo.fromBase64(screenshot),\n                ));\n\n                stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Took screenshot of '${ nameSuffix }' on ${ context }`),\n                    id,\n                ));\n            }).catch(error => {\n                if (this.shouldIgnore(error)) {\n                    stage.announce(new AsyncOperationCompleted(\n                        new Description(`[${ this.constructor.name }] Aborted taking screenshot of '${ nameSuffix }' because of ${ error.constructor && error.constructor.name }`),\n                        id,\n                    ));\n                }\n                else {\n                    stage.announce(new AsyncOperationFailed(error, id));\n                }\n            });\n        }\n    }\n\n    protected abstract shouldTakeAPhotoOf(event: DomainEvent): boolean;\n\n    protected abstract photoNameFor(event: DomainEvent): string;\n\n    private combinedNameFrom(...parts: string[]): Name {\n        return new Name(parts.filter(v => !! v).join('-'));\n    }\n\n    private shouldIgnore(error: Error) {\n        return error instanceof webdriver.NoSuchSessionError\n            || error instanceof webdriver.UnexpectedAlertOpenError\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 817,
    "kind": "class",
    "name": "PhotoTakingStrategy",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{PhotoTakingStrategy}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n under specific conditions.",
    "lineNumber": 31,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "considerTakingPhoto",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#considerTakingPhoto",
    "access": "public",
    "description": " Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.",
    "see": [
      "{@serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}"
    ],
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "void"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ActivityStarts ",
          " @serenity-js/core/lib/events~ActivityFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "the Stage that holds reference to the Actor in the spotlight"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "void"
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "combinedNameFrom",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#combinedNameFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "shouldIgnore",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#shouldIgnore",
    "access": "private",
    "description": " ",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 821,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n *  every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n *\n *  *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n *  which will seriously affect the performance of your tests.\n *  For this reason, it's best to use it only for debugging purposes.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosBeforeAndAfterInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionStarts\n            || event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionStarts | InteractionFinished): string {\n        return event instanceof InteractionStarts\n            ? `Before ${ event.details.name.value }`\n            : `After ${ event.details.name.value }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 822,
    "kind": "class",
    "name": "TakePhotosBeforeAndAfterInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosBeforeAndAfterInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n\n *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n which will seriously affect the performance of your tests.\n For this reason, it's best to use it only for debugging purposes.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionStarts ",
          " InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 825,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { ImplementationPending } from '@serenity-js/core/lib/model';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n *\n *  This strategy works best when you are interested in the screenshots only when\n *  the a fails.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosOfFailures extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished\n            && event.outcome.isWorseThan(ImplementationPending);\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.details.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 826,
    "kind": "class",
    "name": "TakePhotosOfFailures",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts~TakePhotosOfFailures",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfFailures}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n\n This strategy works best when you are interested in the screenshots only when\n the a fails.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts~TakePhotosOfFailures#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailedScenarios.ts~TakePhotosOfFailures#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 829,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { ImplementationPending } from '@serenity-js/core/lib/model';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n *\n *  This strategy works best when you are interested in the screenshots only when\n *  the a fails.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosOfFailures extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished\n            && event.outcome.isWorseThan(ImplementationPending);\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.details.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 830,
    "kind": "class",
    "name": "TakePhotosOfFailures",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfFailures}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n\n This strategy works best when you are interested in the screenshots only when\n the a fails.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 833,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n *\n *  This strategy works best when you want the results of your automated tests\n *  to become comprehensive living documentation of your system.\n *\n *  *Please note* that taking screenshots affects the performance of your tests.\n *\n * @implements {PhotoTakingStrategy}\n */\nexport class TakePhotosOfInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.details.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 834,
    "kind": "class",
    "name": "TakePhotosOfInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/protractor/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n\n This strategy works best when you want the results of your automated tests\n to become comprehensive living documentation of your system.\n\n *Please note* that taking screenshots affects the performance of your tests.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "src/stage/crew/photographer/strategies/PhotoTakingStrategy.js~PhotoTakingStrategy"
    ],
    "implements": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 836,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 837,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/index.ts",
    "content": "export * from './PhotoTakingStrategy';\nexport * from './TakePhotosOfFailures';\nexport * from './TakePhotosOfInteractions';\nexport * from './TakePhotosBeforeAndAfterInteractions';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/crew/photographer/strategies/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 838,
    "kind": "file",
    "name": "src/stage/index.ts",
    "content": "export * from './crew';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/src/stage/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a framework designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\nVisit [serenity-js.org](https://serenity-js.org/) for the [latest tutorials](https://serenity-js.org/handbook/)\nand [API docs](https://serenity-js.org/modules/), and follow [@SerenityJS](https://twitter.com/SerenityJS) and [@JanMolak](https://twitter.com/JanMolak) on Twitter for project updates.\n\n### Learning Serenity/JS\n\nTo learn more about Serenity/JS, check out the video below, read the [tutorial](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html), review the [examples](https://github.com/serenity-js/serenity-js/tree/master/examples), and create your own test suite with [Serenity/JS template projects](https://github.com/serenity-js).\n\nIf you have any questions, join us on [Serenity/JS Community Chat](https://gitter.im/serenity-js/Lobby).\n\n[![Full-Stack Acceptance Testing with Serenity/JS and the Screenplay Pattern](https://img.youtube.com/vi/djPMf-n93Rw/0.jpg)](https://www.youtube.com/watch?v=djPMf-n93Rw)\n\n## Serenity/JS Protractor\n\n[`@serenity-js/protractor`](https://serenity-js.org/modules/protractor/) module is a [Screenplay Pattern](https://serenity-js.org/handbook/thinking-in-serenity-js/screenplay-pattern.html)-style adapter\nfor [Protractor framework](https://www.protractortest.org/), that helps with testing Angular, React, Vue\nand other frontend web apps.\n\nLearn more about [integrating Serenity/JS with Protractor](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html).\n\n### Installation\n\nTo install this module, run:\n\n```console\nnpm install --save-dev @serenity-js/{core,protractor}\n```\n\nNext, install one of the below test runner adapters.\n\nLearn more about [integrating Serenity/JS with Protractor](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html).\n\n#### Usage with Cucumber.js\n\nTo use Serenity/JS Protractor with Cucumber.js, install the following adapter:\n```console\nnpm install --save-dev @serenity-js/cucumber\n```\n\n**Please note** that Serenity/JS Protractor / Cucumber integration supports both [Serenity/JS reporting services](https://serenity-js.org/handbook/reporting/index.html) and [native Cucumber.js reporters](https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#built-in-formatters), so you can use this module as a drop-in replacement of [`protractor-cucumber-framework`](https://www.npmjs.com/package/protractor-cucumber-framework).\n\nLearn more about [integrating Serenity/JS Protractor with Cucumber](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html#integrating-protractor-with-serenity-js-and-cucumber).\n\n#### Usage with Jasmine\n\nTo use Serenity/JS Protractor with Jasmine, install the following adapter:\n```console\nnpm install --save-dev @serenity-js/jasmine\n```\n\nLearn more about [integrating Serenity/JS Protractor with Cucumber](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html#integrating-protractor-with-serenity-js-and-jasmine).\n\n#### Usage with Mocha\n\nTo use Serenity/JS Protractor with Mocha, install the following adapter:\n```console\nnpm install --save-dev @serenity-js/mocha\n```\n\nLearn more about [integrating Serenity/JS Protractor with Cucumber](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html#integrating-protractor-with-serenity-js-and-mocha).\n\n### Configuring Protractor\n\n```typescript\n// protractor.conf.js\n\n// Import the Serenity/JS reporting services, a.k.a. the \"Stage Crew Members\"\nconst\n    { ArtifactArchiver } = require('@serenity-js/core'),\n    { ConsoleReporter } = require('@serenity-js/console-reporter'),\n    { Photographer, TakePhotosOfFailures, TakePhotosOfInteractions } = require('@serenity-js/protractor'),\n    { SerenityBDDReporter } = require('@serenity-js/serenity-bdd');\n\nexports.config = {\n    // Tell Protractor to use the Serenity/JS framework Protractor Adapter\n    framework:      'custom',\n    frameworkPath:  require.resolve('@serenity-js/protractor/adapter'),\n  \n    // Configure Serenity/JS to use an appropriate test runner\n    // and the Stage Crew Members we've imported at the top of this file\n    serenity: {\n        runner: 'jasmine',\n        // runner: 'cucumber',\n        // runner: 'mocha',\n        crew: [\n            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n            ConsoleReporter.forDarkTerminals(),\n            Photographer.whoWill(TakePhotosOfFailures),     // or Photographer.whoWill(TakePhotosOfInteractions),\n            new SerenityBDDReporter(),\n        ]\n    },\n\n    // configure Cucumber runner\n    cucumberOpts: {\n        // see the Cucumber configuration options below\n    },\n\n    // or configure Jasmine runner\n    jasmineNodeOpts: {\n        // see the Jasmine configuration options below\n    },\n\n    // or configure Mocha runner\n    mochaOpts: {\n        // see the Mocha configuration options below\n    },\n\n    // ... other Protractor-specific configuration   \n};\n```\n\nLearn more about:\n- [Cucumber configuration options](https://serenity-js.org/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html)\n- [Jasmine configuration options](https://serenity-js.org/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html)\n- [Mocha configuration options](https://serenity-js.org/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html)\n- [Protractor configuration file](https://github.com/angular/protractor/blob/master/lib/config.ts).\n\n### Interacting with websites and web apps\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { BrowseTheWeb, Navigate, Target, Text } from '@serenity-js/protractor';\nimport { protractor, by } from 'protractor';\n\nclass SerenityJSWebsite {\n    static header = Target.the('header').located(by.css('h1'));\n}\n\nactorCalled('Priya')\n    .whoCan(\n        BrowseTheWeb.using(protractor.browser_download_url)\n    )\n    .attemptsTo(\n        Navigate.to('https://serenity-js.org'),\n        Ensure.that(Text.of(SerenityJSWebsite.header), equals('Next generation acceptance testing')),\n)\n```\n\n### Template Repositories\n\nThe easiest way for you to start writing web-based acceptance tests using Serenity/JS, Protractor and either [Mocha](https://mochajs.org/), [Cucumber](https://github.com/cucumber/cucumber-js) or [Jasmine](https://jasmine.github.io/) is by using one of the below template repositories:\n\n- [Serenity/JS, Mocha, and Protractor template](https://github.com/serenity-js/serenity-js-mocha-protractor-template)\n- [Serenity/JS, Cucumber, and Protractor template](https://github.com/serenity-js/serenity-js-cucumber-protractor-template)\n- [Serenity/JS, Jasmine, and Protractor template](https://github.com/serenity-js/serenity-js-jasmine-protractor-template)\n\n\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/protractor\",\n  \"version\": \"2.25.3\",\n  \"description\": \"Test your web apps with Serenity/JS\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/serenity-js\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"serenity-js\",\n    \"ui\",\n    \"frontend\",\n    \"angular\",\n    \"react\",\n    \"vue\",\n    \"bdd\",\n    \"tdd\",\n    \"test\",\n    \"testing\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"tslint --project tsconfig-lint.json --config ../../tslint.json --format stylish\",\n    \"debug\": \"node --inspect-brk node_modules/.bin/protractor ./spec/protractor.conf.js\",\n    \"test\": \"nyc --report-dir ../../target/coverage/protractor protractor ./spec/protractor.conf.js\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \"^10 || ^12 || ^14\",\n    \"npm\": \"^6 || ^7\"\n  },\n  \"dependencies\": {\n    \"@serenity-js/assertions\": \"2.25.3\",\n    \"@serenity-js/core\": \"2.25.3\",\n    \"deepmerge\": \"^4.2.2\",\n    \"is-plain-object\": \"^5.0.0\",\n    \"tiny-types\": \"^1.16.1\"\n  },\n  \"peerDependencies\": {\n    \"@serenity-js/cucumber\": \"^2.25.0\",\n    \"@serenity-js/jasmine\": \"^2.25.0\",\n    \"@serenity-js/mocha\": \"^2.25.0\",\n    \"protractor\": \"^5.0.0 || ^7.0.0\",\n    \"selenium-webdriver\": \"^3.6.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@serenity-js/cucumber\": {\n      \"optional\": true\n    },\n    \"@serenity-js/jasmine\": {\n      \"optional\": true\n    },\n    \"@serenity-js/mocha\": {\n      \"optional\": true\n    }\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.25.0\",\n    \"@integration/testing-tools\": \"2.25.3\",\n    \"@serenity-js/assertions\": \"2.25.0\",\n    \"@serenity-js/cucumber\": \"2.25.3\",\n    \"@serenity-js/jasmine\": \"2.25.3\",\n    \"@serenity-js/local-server\": \"2.25.3\",\n    \"@serenity-js/mocha\": \"2.25.3\",\n    \"@serenity-js/rest\": \"2.25.3\",\n    \"@types/express\": \"^4.17.9\",\n    \"@types/html-minifier\": \"^4.0.0\",\n    \"@types/mocha\": \"^8.2.1\",\n    \"@types/selenium-webdriver\": \"^3.0.17\",\n    \"axios\": \"^0.21.1\",\n    \"body-parser\": \"^1.19.0\",\n    \"chromedriver\": \"^89.0.0\",\n    \"express\": \"^4.17.1\",\n    \"html-minifier\": \"^4.0.0\",\n    \"mocha\": \"^8.3.2\",\n    \"protractor\": \"^7.0.0\",\n    \"selenium-webdriver\": \"^3.6.0\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"node_modules\",\n      \"spec\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 839,
    "kind": "testFile",
    "name": "spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Serenity } from '@serenity-js/core';\nimport { SceneFinished, SceneFinishes, SceneStarts } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport { Category, CorrelationId, ExecutionFailedWithError, ExecutionIgnored, ExecutionSuccessful, Name, Outcome, ProblemIndication, ScenarioDetails } from '@serenity-js/core/lib/model';\nimport { ArtifactArchiver, Clock, StageCrewMember } from '@serenity-js/core/lib/stage';\nimport { Config, Runner } from 'protractor';\nimport * as sinon from 'sinon';\n\nimport { ProtractorFrameworkAdapter, TestRunnerDetector } from '../../src/adapter';\n\n/** @test {ProtractorFrameworkAdapter} */\ndescribe('ProtractorFrameworkAdapter', () => {\n\n    /*\n     * Protractor spec:\n     *  https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/README.md#framework-adapters-for-protractor\n     *\n     * Jasmine runner:\n     *  https://github.com/angular/protractor/blob/4f74a4ec753c97adfe955fe468a39286a0a55837/lib/frameworks/jasmine.js#L17-L49\n     */\n\n    let protractorRunner:   sinon.SinonStubbedInstance<Runner>,\n        testRunnerDetector: sinon.SinonStubbedInstance<TestRunnerDetector>,\n        testRunnerAdapter:  TestRunnerAdapter,\n        serenity:           Serenity,\n        adapter:            ProtractorFrameworkAdapter;\n\n    beforeEach(() => {\n        const discreteClock: Clock = new Clock(function () {\n            let currentTime = 0;\n            return () => {\n                const now = new Date(currentTime);\n                currentTime += 250;\n                return now;\n            };\n        }());\n\n        protractorRunner    = sinon.createStubInstance(Runner);\n        testRunnerDetector  = sinon.createStubInstance(TestRunnerDetector);\n        serenity            = new Serenity(discreteClock);\n        testRunnerAdapter   = new SimpleTestRunnerAdapter(serenity);\n\n        testRunnerDetector.runnerFor.returns(testRunnerAdapter);\n\n        adapter = new ProtractorFrameworkAdapter(serenity, protractorRunner, testRunnerDetector as unknown as TestRunnerDetector);\n    });\n\n    beforeEach(() => {\n        protractorRunner.getConfig.returns({ });\n    });\n\n    const expectedError = new Error(`We're sorry, something happened`);\n    expectedError.stack = `Error: We're sorry, something happened`;\n\n    function sample(type: 'passing.spec.ts' | 'failing.spec.ts' | string) {\n        return type === 'passing.spec.ts'\n            ? { path: 'passing.spec.ts', name: 'passing test', category: 'samples', description: 'samples passing test', outcome: new ExecutionSuccessful() }\n            : { path: 'failing.spec.ts', name: 'failing test', category: 'samples', description: 'samples failing test', outcome: new ExecutionFailedWithError(expectedError) };\n    }\n\n    describe('to meet the requirements described in \"Framework Adapters for Protractor\"', () => {\n\n        describe('produces a Protractor report that', () => {\n\n            it('describes no test results if no tests were executed', () =>\n                expect(adapter.run([]))\n                    .to.eventually.deep.equal({\n                        failedCount: 0,\n                        specResults: [],\n                    }));\n\n            it('describes successful tests', () =>\n                expect(adapter.run([ sample('passing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 0,\n                        specResults: [{\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }],\n                    }));\n\n            it('describes failing tests', () =>\n                expect(adapter.run([ sample('failing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 1,\n                        specResults: [{\n                            description: sample('failing.spec.ts').description,\n                            duration:    2000,\n                            assertions: [{\n                                passed:     false,\n                                errorMsg:   (sample('failing.spec.ts').outcome as ProblemIndication).error.message,\n                                stackTrace: (sample('failing.spec.ts').outcome as ProblemIndication).error.stack,\n                            }],\n                        }],\n                    }));\n\n            it('describes both successful and failing tests', () =>\n                expect(adapter.run([ sample('passing.spec.ts').path, sample('failing.spec.ts').path, sample('passing.spec.ts').path ]))\n                    .to.eventually.deep.equal({\n                        failedCount: 1,\n                        specResults: [{\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }, {\n                            description: sample('failing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     false,\n                                errorMsg:   (sample('failing.spec.ts').outcome as ProblemIndication).error.message,\n                                stackTrace: (sample('failing.spec.ts').outcome as ProblemIndication).error.stack,\n                            }],\n                        }, {\n                            description: sample('passing.spec.ts').description,\n                            duration: 2000,\n                            assertions: [{\n                                passed:     true,\n                            }],\n                        }],\n                    }));\n        });\n\n        it('invokes runner.runTestPreparer before executing the tests', () => {\n            const testRunnerRunMethod = sinon.spy(testRunnerAdapter, 'run');\n\n            return expect(adapter.run([])).to.be.fulfilled\n                .then(() => {\n                    sinon.assert.callOrder(\n                        protractorRunner.runTestPreparer,\n                        testRunnerRunMethod,\n                    );\n                });\n        });\n\n        it('invokes runner.getConfig().onComplete() after executing the tests', () => {\n\n            const protractorConfig: Partial<Config> = {\n                onComplete: sinon.stub().returns(Promise.resolve(void 0)),\n            };\n\n            protractorRunner.getConfig.returns(protractorConfig);\n\n            const testRunnerRunMethod = sinon.spy(testRunnerAdapter, 'run');\n\n            return expect(adapter.run([])).to.be.fulfilled\n                .then(() => {\n                    sinon.assert.callOrder(\n                        testRunnerRunMethod,\n                        protractorConfig.onComplete as sinon.SinonStub,\n                    );\n                });\n        });\n\n        describe('when a test succeeds', () => {\n\n            it('invokes runner.emit with a \"testPass\" message', () =>\n                expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.emit).to.have.been.calledWith('testPass', {\n                            name:       sample('passing.spec.ts').name,\n                            category:   sample('passing.spec.ts').category,\n                        });\n                    }));\n\n            it('invokes runner.afterEach after each test', () =>\n                expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.afterEach).to.have.been.calledTwice;    // tslint:disable-line:no-unused-expression\n                    }));\n        });\n\n        describe('when a test fails', () => {\n\n            it('invokes runner.emit with a \"testFail\" message', () =>\n                expect(adapter.run([\n                        sample('failing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled\n                    .then(() => {\n                        expect(protractorRunner.emit).to.have.been.calledWith('testFail', {\n                            name:       sample('failing.spec.ts').name,\n                            category:   sample('failing.spec.ts').category,\n                        });\n                    }));\n\n            it('invokes runner.afterEach after each test', () =>\n                expect(adapter.run([\n                        sample('failing.spec.ts').path,\n                        sample('failing.spec.ts').path,\n                    ]))\n                    .to.be.fulfilled            // promise resolved even upon test failure; test suite failure is determined based on the ProtractorReport\n                    .then(() => {\n                        expect(protractorRunner.afterEach).to.have.been.calledTwice;    // tslint:disable-line:no-unused-expression\n                    }));\n        });\n\n        describe('error handling', function () {\n\n            this.timeout(7000);\n\n            it('fails the test run when runner.afterEach errors out', () => {\n                protractorRunner.afterEach.throws(expectedError);\n\n                return expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.rejectedWith(expectedError);\n            });\n\n            it('fails the test run when runner.afterEach rejects the promise', () => {\n                protractorRunner.afterEach.rejects(expectedError);\n\n                return expect(adapter.run([\n                        sample('passing.spec.ts').path,\n                    ]))\n                    .to.be.rejectedWith(Error, [\n                        `1 async operation has failed to complete:`,\n                        `[ProtractorReporter] Invoking ProtractorRunner.afterEach... - ${ expectedError.stack }`,\n                        `---`,\n                    ''].join('\\n'));\n            });\n        });\n    });\n\n    describe('configuration', () => {\n        function pickOne<T extends StageCrewMember>(type: new (...args: any[]) => T, crew: StageCrewMember[]): T {\n            const found = crew.filter(member => member instanceof type);\n\n            if (found.length !== 1) {\n                throw new Error(`Found ${ found.length } ${ type.name }s`);\n            }\n\n            return found[0] as T;\n        }\n\n        it('provides sensible defaults when no explicit configuration is provided', () => {\n            protractorRunner.getConfig.returns({});\n\n            return adapter.run([ sample('passing.spec.ts').path ])\n                .then(() => {\n                    const crew = (serenity as any).stage.manager.subscribers;\n\n                    const archiver = pickOne(ArtifactArchiver, crew);\n\n                    expect((archiver as any).fileSystem.root)\n                        .to.equal(new Path(process.cwd() + '/target/site/serenity'));\n                });\n        });\n\n        it('allows for the defaults to be overridden', () => {\n            protractorRunner.getConfig.returns({\n                serenity: {\n                    crew: [\n                        ArtifactArchiver.storingArtifactsAt('./custom/output/path'),\n                    ],\n                },\n            });\n\n            return adapter.run([ sample('passing.spec.ts').path ])\n                .then(() => {\n                    const crew = (serenity as any).stage.manager.subscribers;\n\n                    const archiver = pickOne(ArtifactArchiver, crew);\n\n                    expect((archiver as any).fileSystem.root)\n                        .to.equal(new Path(`./custom/output/path`));\n                });\n        });\n    });\n\n    class SimpleTestRunnerAdapter implements TestRunnerAdapter {\n\n        constructor(private readonly serenityInstance: Serenity) {\n        }\n\n        successThreshold(): Outcome | { Code: number } {\n            return ExecutionIgnored;\n        }\n\n        run(scenarios: string[]): Promise<void> {\n\n            return scenarios\n                .reduce((previous, current) => previous.then(() => {\n\n                    const scenario = sample(current);\n\n                    const details = new ScenarioDetails(\n                        new Name(scenario.name),\n                        new Category(scenario.category),\n                        new FileSystemLocation(new Path(scenario.path)),\n                    );\n\n                    const sceneId = CorrelationId.create();\n\n                    this.serenityInstance.announce(new SceneStarts(\n                        sceneId,\n                        details,\n                        this.serenityInstance.currentTime(),\n                    ));\n\n                    // ... an actual test runner would now execute the test and then announce the outcome\n\n                    this.serenityInstance.announce(\n                        new SceneFinishes(sceneId, details, scenario.outcome, this.serenityInstance.currentTime()),\n                    );\n\n                    return this.serenityInstance.waitForNextCue()\n                        .then(() => {\n                            this.serenityInstance.announce(\n                                new SceneFinished(sceneId, details, scenario.outcome, this.serenityInstance.currentTime()),\n                            );\n                        });\n\n                }), Promise.resolve(void 0));\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "access": null,
    "description": "ProtractorFrameworkAdapter",
    "lineNumber": 15,
    "testTargets": [
      "ProtractorFrameworkAdapter"
    ]
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "access": null,
    "description": "to meet the requirements described in \"Framework Adapters for Protractor\"",
    "lineNumber": 73
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "access": null,
    "description": "produces a Protractor report that",
    "lineNumber": 75
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it3",
    "access": null,
    "description": "describes no test results if no tests were executed",
    "lineNumber": 77
  },
  {
    "__docId__": 844,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it4",
    "access": null,
    "description": "describes successful tests",
    "lineNumber": 84
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it5",
    "access": null,
    "description": "describes failing tests",
    "lineNumber": 97
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe2.it6",
    "access": null,
    "description": "describes both successful and failing tests",
    "lineNumber": 112
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.it7",
    "access": null,
    "description": "invokes runner.runTestPreparer before executing the tests",
    "lineNumber": 140
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.it8",
    "access": null,
    "description": "invokes runner.getConfig().onComplete() after executing the tests",
    "lineNumber": 152
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "access": null,
    "description": "when a test succeeds",
    "lineNumber": 171
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9.it10",
    "access": null,
    "description": "invokes runner.emit with a \"testPass\" message",
    "lineNumber": 173
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe9.it11",
    "access": null,
    "description": "invokes runner.afterEach after each test",
    "lineNumber": 185
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "access": null,
    "description": "when a test fails",
    "lineNumber": 196
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12.it13",
    "access": null,
    "description": "invokes runner.emit with a \"testFail\" message",
    "lineNumber": 198
  },
  {
    "__docId__": 854,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe12.it14",
    "access": null,
    "description": "invokes runner.afterEach after each test",
    "lineNumber": 210
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "access": null,
    "description": "error handling",
    "lineNumber": 221
  },
  {
    "__docId__": 856,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15.it16",
    "access": null,
    "description": "fails the test run when runner.afterEach errors out",
    "lineNumber": 225
  },
  {
    "__docId__": 857,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe1.describe15.it17",
    "access": null,
    "description": "fails the test run when runner.afterEach rejects the promise",
    "lineNumber": 234
  },
  {
    "__docId__": 858,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "access": null,
    "description": "configuration",
    "lineNumber": 249
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18.it19",
    "access": null,
    "description": "provides sensible defaults when no explicit configuration is provided",
    "lineNumber": 273
  },
  {
    "__docId__": 860,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/ProtractorFrameworkAdapter.spec.ts~describe0.describe18.it20",
    "access": null,
    "description": "allows for the defaults to be overridden",
    "lineNumber": 287
  },
  {
    "__docId__": 861,
    "kind": "testFile",
    "name": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { given } from 'mocha-testdata';\nimport { Capabilities, ProtractorBrowser } from 'protractor';\n\nimport { StandardisedCapabilities } from '../../../src/adapter/browser-detector';\n\ndescribe('StandardisedCapabilities', () => {\n\n    given([\n        {\n            description: 'Edge on Windows',\n            actual: { browserName: 'MicrosoftEdge', browserVersion: '42.17134.1.0', platformName: 'windows', platform: 'WINDOWS', platformVersion: '10' },\n            expected: { browserName: 'MicrosoftEdge', browserVersion: '42.17134.1.0', platformName: 'windows', platformVersion: '10' },\n        }, {\n            description: 'Chrome on Windows',\n            actual: { browserName: 'chrome', version: '79.0.3945.79', platform: 'WINDOWS' },\n            expected: { browserName: 'chrome', browserVersion: '79.0.3945.79', platformName: 'WINDOWS' },\n        }, {\n            description: 'Edge on Mac',\n            actual: { browserName: 'MicrosoftEdge', version: '79.0.309.18', platform: 'Mac OS X' },\n            expected: { browserName: 'MicrosoftEdge', browserVersion: '79.0.309.18', platformName: 'Mac OS X' },\n        }, {\n            description: 'Firefox on Windows',\n            actual: { browserName: 'firefox', browserVersion: '72.0', platformName: 'windows', platformVersion: '6.1' },\n            expected: { browserName: 'firefox', browserVersion: '72.0', platformName: 'windows', platformVersion: '6.1' },\n        }, {\n            description: 'IE 10 on Windows',\n            actual: { browserName: 'internet explorer', version: '10', platform: 'WINDOWS' },\n            expected: { browserName: 'internet explorer', browserVersion: '10', platformName: 'WINDOWS' },\n        }, {\n            description: 'Chrome on Mac',\n            actual: { browserName: 'chrome', version: '79.0.3945.79', platform: 'MAC' },\n            expected: { browserName: 'chrome', browserVersion: '79.0.3945.79', platformName: 'MAC' },\n        }, {\n            description: 'Chrome (mobile) on Android (Samsung SM-G950F)',\n            actual: { browserName: 'chrome', deviceManufacturer: 'samsung', deviceModel: 'SM-G950F', platformName: 'Android', platform: 'LINUX', platformVersion: '7.0' },\n            expected: { browserName: 'chrome', browserVersion: 'samsung SM-G950F', platformName: 'Android', platformVersion: '7.0' },\n        }, {\n            description: 'Opera on Windows',\n            actual: { browserName: 'opera', version: '12.16', platformName: 'ANY', platform: 'WINDOWS' },\n            expected: { browserName: 'opera', browserVersion: '12.16', platformName: 'WINDOWS' },\n        }, {\n            description: 'Firefox on Mac',\n            actual: { browserName: 'firefox', browserVersion: '72.0', platformName: 'mac', platformVersion: '13.4.0' },\n            expected: { browserName: 'firefox', browserVersion: '72.0', platformName: 'mac', platformVersion: '13.4.0' },\n        }, {\n            description: 'Safari (mobile) on iPhone 7',\n            actual: {\n                browserName: 'safari',\n                version: '',\n                mobile: { browser: 'mobile', version: 'iPhone 7-10.3' },\n                platformName: 'iOS',\n                platform: 'MAC',\n                platformVersion: '11.0',\n            },\n            expected: { browserName: 'safari', browserVersion: 'iPhone 7-10.3', platformName: 'iOS', platformVersion: '11.0' },\n        }, {\n            description: 'Opera on Mac',\n            actual: { browserName: 'opera', version: '12.15', platformName: 'ANY', platform: 'MAC' },\n            expected: { browserName: 'opera', browserVersion: '12.15', platformName: 'MAC' },\n        }, {\n            description: 'Chrome (mobile) on Android (Motorola XT1092)',\n            actual: { browserName: 'chrome', deviceManufacturer: 'motorola', deviceModel: 'XT1092', platformName: 'Android', platform: 'LINUX', platformVersion: '6.0' },\n            expected: { browserName: 'chrome', browserVersion: 'motorola XT1092', platformName: 'Android', platformVersion: '6.0' },\n        }, {\n            description: 'Safari (mobile) on iPhone 8 Plus',\n            actual: {\n                browserName: 'safari',\n                version: '',\n                mobile: { browser: 'mobile', version: 'iPhone 8 Plus-11.0' },\n                platformName: 'iOS',\n                platform: 'MAC',\n                platformVersion: '11.0',\n            },\n            expected: { browserName: 'safari', browserVersion: 'iPhone 8 Plus-11.0', platformName: 'iOS', platformVersion: '11.0' },\n        }, {\n            description: 'Safari on Mac',\n            actual: { browserName: 'safari', version: '7.1.8', platform: 'MAC' },\n            expected: { browserName: 'safari', browserVersion: '7.1.8', platformName: 'MAC' },\n        }, {\n            description: 'IE 6 on Windows',\n            actual: { browserName: 'internet explorer', version: '6', platform: 'WINDOWS' },\n            expected: { browserName: 'internet explorer', browserVersion: '6', platformName: 'WINDOWS' },\n        }, {\n            description: 'Chrome (mobile emulation) on Mac OS X',\n            actual: {\n                browserName: 'chrome', version: '80.0.3987.87', browserVersion: undefined,\n                deviceManufacturer: undefined, deviceModel: undefined, mobile: undefined, mobileEmulationEnabled: true,\n                platformName: undefined, platform: 'Mac OS X', platformVersion: undefined,\n            },\n            expected: {\n                browserName: 'chrome', browserVersion: '80.0.3987.87 (mobile emulation)', platformName: 'Mac OS X',\n            },\n        },\n    ]).\n    it(`standardises the WebDriver capabilities across browsers and platforms`, ({ actual, expected }) => {\n        const fakeBrowser = {\n            getCapabilities: () => Promise.resolve(new Capabilities(actual)),\n        };\n\n        const capabilities = StandardisedCapabilities.of(() => fakeBrowser as unknown as ProtractorBrowser);\n\n        return Promise.all([\n            expect(capabilities.browserName()).to.eventually.equal(expected.browserName),\n            expect(capabilities.browserVersion()).to.eventually.equal(expected.browserVersion),\n            expect(capabilities.platformName()).to.eventually.equal(expected.platformName),\n            expect(capabilities.platformVersion()).to.eventually.equal(expected.platformVersion),\n        ]);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 862,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/browser-detector/StandardisedCapabilities.spec.ts~describe21",
    "access": null,
    "description": "StandardisedCapabilities",
    "lineNumber": 9
  },
  {
    "__docId__": 863,
    "kind": "testFile",
    "name": "spec/adapter/reporter/ProtractorReporter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { AssertionError, Duration, ImplementationPendingError, TestCompromisedError } from '@serenity-js/core';\nimport { SceneFinished, SceneStarts } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    Category,\n    CorrelationId,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Name,\n    Outcome,\n    ProblemIndication,\n    ScenarioDetails,\n    Timestamp,\n} from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\nimport { Runner } from 'protractor';\nimport * as sinon from 'sinon';\nimport { ProtractorReporter } from '../../../src/adapter/reporter';\n\n/**\n * See the {@link ProtractorFrameworkAdapter} specs to see how the {@link ProtractorReporter} is used in the context\n */\ndescribe('ProtractorReporter', () => {\n\n    const\n        id = CorrelationId.create(),\n        details = new ScenarioDetails(\n            new Name('example scenario'),\n            new Category('example category'),\n            new FileSystemLocation(new Path('./some/scenario.spec.ts')),\n        ),\n        now = Timestamp.fromMillisecondTimestamp(0),\n        later = now.plus(Duration.ofMilliseconds(1)),\n\n        execuctionSuccessful    = new ExecutionSuccessful(),\n        executionSkipped        = new ExecutionSkipped(),\n        executionIgnored        = new ExecutionIgnored(thrown(new Error('Execution ignored'))),\n        implementationPending   = new ImplementationPending(thrown(new ImplementationPendingError('Step missing'))),\n        failedWithAssertion     = new ExecutionFailedWithAssertionError(thrown(new AssertionError('Expected false to be true', true, false))),\n        failedWithError         = new ExecutionFailedWithError(thrown(new Error(`We're sorry, something happened`))),\n        compromised             = new ExecutionCompromised(thrown(new TestCompromisedError('DB is down')));\n\n    function thrown<T extends Error>(error: T): T {\n        try {\n            throw error;\n        } catch (e) {\n            return e;\n        }\n    }\n\n    let runner: sinon.SinonStubbedInstance<Runner>;\n\n    beforeEach(() => {\n        runner = sinon.createStubInstance(Runner);\n    });\n\n    describe('with default threshold', () => {\n\n        given([\n            execuctionSuccessful,\n            executionSkipped,\n        ]).\n        it(`considers a scenario to be successful when its outcome is better that the success threshold`, (outcome: Outcome) => {\n\n            const reporter = new ProtractorReporter(sinon.createStubInstance(Runner));\n\n            reporter.notifyOf(new SceneStarts(id, details, now));\n            reporter.notifyOf(new SceneFinished(id, details, outcome, later));\n\n            expect(reporter.report()).to.deep.equal({\n                failedCount: 0,\n                specResults: [{\n                    assertions: [{\n                        passed: true,\n                    }],\n                    description: 'example category example scenario',\n                    duration: 1,\n                }],\n            });\n        });\n\n        given([\n            executionIgnored,\n            implementationPending,\n            failedWithAssertion,\n            failedWithError,\n            compromised,\n        ]).\n        it(`considers a scenario to be unsuccessful when its outcome is worse that the success threshold`, (outcome: ProblemIndication) => {\n\n            const reporter = new ProtractorReporter(sinon.createStubInstance(Runner));\n\n            reporter.notifyOf(new SceneStarts(id, details, now));\n            reporter.notifyOf(new SceneFinished(id, details, outcome, later));\n\n            expect(reporter.report()).to.deep.equal({\n                failedCount: 1,\n                specResults: [{\n                    assertions: [{\n                        passed: false,\n                        errorMsg: outcome.error.message,\n                        stackTrace: outcome.error.stack,\n                    }],\n                    description: 'example category example scenario',\n                    duration: 1,\n                }],\n            });\n        });\n    });\n\n    describe('with custom threshold', () => {\n\n        const successThreshold = implementationPending;\n\n        given([\n            execuctionSuccessful,\n            executionSkipped,\n            executionIgnored,\n            implementationPending,\n        ]).\n        it(`considers a scenario to be successful when its outcome is better that the success threshold`, (outcome: Outcome) => {\n\n            const reporter = new ProtractorReporter(sinon.createStubInstance(Runner), successThreshold);\n\n            reporter.notifyOf(new SceneStarts(id, details, now));\n            reporter.notifyOf(new SceneFinished(id, details, outcome, later));\n\n            expect(reporter.report()).to.deep.equal({\n                failedCount: 0,\n                specResults: [{\n                    assertions: [{\n                        passed: true,\n                    }],\n                    description: 'example category example scenario',\n                    duration: 1,\n                }],\n            });\n        });\n\n        given([\n            failedWithAssertion,\n            failedWithError,\n            compromised,\n        ]).\n        it(`considers a scenario to be unsuccessful when its outcome is worse that the success threshold`, (outcome: ProblemIndication) => {\n\n            const reporter = new ProtractorReporter(sinon.createStubInstance(Runner), successThreshold);\n\n            reporter.notifyOf(new SceneStarts(id, details, now));\n            reporter.notifyOf(new SceneFinished(id, details, outcome, later));\n\n            expect(reporter.report()).to.deep.equal({\n                failedCount: 1,\n                specResults: [{\n                    assertions: [{\n                        passed: false,\n                        errorMsg: outcome.error.message,\n                        stackTrace: outcome.error.stack,\n                    }],\n                    description: 'example category example scenario',\n                    duration: 1,\n                }],\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/adapter/reporter/ProtractorReporter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe22",
    "access": null,
    "description": "See the {@link ProtractorFrameworkAdapter} specs to see how the {@link ProtractorReporter} is used in the context",
    "lineNumber": 31
  },
  {
    "__docId__": 865,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe22.describe23",
    "access": null,
    "description": "with default threshold",
    "lineNumber": 76
  },
  {
    "__docId__": 866,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/ProtractorReporter.spec.ts~describe22.describe24",
    "access": null,
    "description": "with custom threshold",
    "lineNumber": 130
  },
  {
    "__docId__": 867,
    "kind": "testFile",
    "name": "spec/adapter/runner/TestRunnerDetector.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { CucumberConfig } from '@serenity-js/cucumber/lib/cli'; // tslint:disable-line:no-submodule-imports\nimport * as sinon from 'sinon';\nimport { CucumberAdapterConfig, TestRunnerDetector, TestRunnerLoader } from '../../../src/adapter/runner';\nimport { Photographer, TakePhotosOfFailures } from '../../../src';\n\n/** @test {TestRunnerDetector} */\ndescribe('TestRunnerDetector', () => {\n\n    let detector: TestRunnerDetector,\n        testRunnerLoader: sinon.SinonStubbedInstance<TestRunnerLoader>;\n\n    beforeEach(() => {\n        testRunnerLoader    = sinon.createStubInstance(TestRunnerLoader);\n        detector            = new TestRunnerDetector(testRunnerLoader as unknown as TestRunnerLoader);\n    });\n\n    describe('when using TestRunnerAdapter for', () => {\n\n        describe('Cucumber', () => {\n\n            const\n                emptyRunnerConfig: CucumberConfig = {},\n                defaultAdapterConfig: CucumberAdapterConfig = { useStandardOutput: false, uniqueFormatterOutputs: false };\n\n            it(`uses the configured runner`, () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'cucumber',\n                    },\n                });\n\n                expect(testRunnerLoader.forCucumber).to.have.been.calledWith(emptyRunnerConfig, defaultAdapterConfig);\n            });\n\n            it('uses the configured runner even when configuration for other runners is present as well', () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'cucumber',\n                    },\n                    cucumberOpts: {},\n                    jasmineNodeOpts: {},\n                    mochaOpts: {},\n                });\n\n                expect(testRunnerLoader.forCucumber).to.have.been.calledWith(emptyRunnerConfig, defaultAdapterConfig);\n            });\n\n            it('uses Cucumber test runner when cucumberOpts are present in config', () => {\n                const runner = detector.runnerFor({\n                    cucumberOpts: {},\n                });\n\n                expect(testRunnerLoader.forCucumber).to.have.been.calledWith(emptyRunnerConfig, defaultAdapterConfig);\n            });\n\n            it('merges cucumberOpts present in capabilities with root config', () => {\n                const runner = detector.runnerFor({\n                    cucumberOpts: {\n                        tags: ['@wip'],\n                        name: 'example scenario',\n                    },\n                    capabilities: {\n                        cucumberOpts: {\n                            name: 'different scenario',\n                        },\n                    }\n                });\n\n                expect(testRunnerLoader.forCucumber)\n                    .to.have.been.calledWith({ tags: ['@wip'], name: 'different scenario' }, defaultAdapterConfig);\n            });\n\n            describe('instructs TestRunnerLoader', () => {\n\n                describe('to take over standard output when the config', () => {\n\n                    it('defines serenity.crew and there is no cucumberOpts.format specified', () => {\n                        const runner = detector.runnerFor({\n                            serenity: {\n                                runner: 'cucumber',\n                                crew: [ Photographer.whoWill(TakePhotosOfFailures) ]\n                            }\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith(emptyRunnerConfig, {  useStandardOutput: true, uniqueFormatterOutputs: false });\n                    });\n\n                    it('defines serenity.crew and there is a cucumberOpts.format specified', () => {\n                        const runner = detector.runnerFor({\n                            serenity: {\n                                runner: 'cucumber',\n                                crew: [ Photographer.whoWill(TakePhotosOfFailures) ]\n                            },\n                            cucumberOpts: {\n                                format: 'pretty'\n                            }\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith({ format: 'pretty' }, {  useStandardOutput: true, uniqueFormatterOutputs: false });\n                    });\n                });\n\n                describe('to redirect output to a temp file when the config', () => {\n\n                    it('does not specify serenity.crew and there are is no cucumberOpts.format specified either', () => {\n                        const runner = detector.runnerFor({\n                            serenity: {\n                                runner: 'cucumber',\n                            }\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith(emptyRunnerConfig, {  useStandardOutput: false, uniqueFormatterOutputs: false });\n                    });\n\n                    it('does not specify serenity.crew, but there is a cucumberOpts.format specified', () => {\n                        const runner = detector.runnerFor({\n                            serenity: {\n                                runner: 'cucumber',\n                                crew: [],\n                            },\n                            cucumberOpts: {\n                                format: 'pretty'\n                            }\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith({ format: 'pretty' }, {  useStandardOutput: false, uniqueFormatterOutputs: false });\n                    });\n                });\n\n                describe('make the formatter output files unique when the config', () => {\n\n                    it('specifies multiCapabilities', () => {\n                        const runner = detector.runnerFor({\n                            cucumberOpts: {\n                                format: [\n                                    'json:results.json'\n                                ]\n                            },\n                            multiCapabilities: [\n                                {'browserName': 'chrome'},\n                                {'browserName': 'firefox'},\n                            ],\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith({ format: [ 'json:results.json' ] }, { useStandardOutput: false, uniqueFormatterOutputs: true });\n                    });\n\n                    it('specifies shardTestFiles', () => {\n                        const runner = detector.runnerFor({\n                            cucumberOpts: {\n                                format: [\n                                    'json:results.json'\n                                ]\n                            },\n                            capabilities: {\n                                shardTestFiles: true,\n                            },\n                        });\n\n                        expect(testRunnerLoader.forCucumber).to.have.been.calledWith({ format: [ 'json:results.json' ] }, { useStandardOutput: false, uniqueFormatterOutputs: true });\n                    });\n                });\n            });\n        });\n\n        describe('Jasmine', () => {\n\n            it('uses Jasmine TestRunnerAdapter when no other runners are specified', () => {\n                const runner = detector.runnerFor({});\n\n                expect(testRunnerLoader.forJasmine).to.have.been.calledWith({});\n            });\n\n            it(`uses the configured runner`, () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'jasmine',\n                    },\n                });\n\n                expect(testRunnerLoader.forJasmine).to.have.been.calledWith({});\n            });\n\n            it('uses the configured runner even when configuration for other runners is present as well', () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'jasmine',\n                    },\n                    cucumberOpts: {},\n                    jasmineNodeOpts: {},\n                    mochaOpts: {},\n                });\n\n                expect(testRunnerLoader.forJasmine).to.have.been.calledWith({});\n            });\n\n            it('uses Jasmine test runner when jasmineNodeOpts are present in config', () => {\n                const runner = detector.runnerFor({\n                    jasmineNodeOpts: {},\n                });\n\n                expect(testRunnerLoader.forJasmine).to.have.been.calledWith({});\n            });\n\n            it('merges jasmineNodeOpts present in capabilities with root config', () => {\n                const runner = detector.runnerFor({\n                    jasmineNodeOpts: {\n                        defaultTimeoutInterval: 5,\n                    },\n                    capabilities: {\n                        jasmineNodeOpts: {\n                            defaultTimeoutInterval: 10,\n                        },\n                    }\n                });\n\n                expect(testRunnerLoader.forJasmine)\n                    .to.have.been.calledWith({ defaultTimeoutInterval: 10 });\n            });\n        });\n\n        describe('Mocha', () => {\n\n            it(`uses the configured runner`, () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'mocha',\n                    },\n                });\n\n                expect(testRunnerLoader.forMocha).to.have.been.calledWith({});\n            });\n\n            it('uses the configured runner even when configuration for other runners is present as well', () => {\n                const runner = detector.runnerFor({\n                    serenity: {\n                        runner: 'mocha',\n                    },\n                    cucumberOpts: {},\n                    jasmineNodeOpts: {},\n                    mochaOpts: {},\n                });\n\n                expect(testRunnerLoader.forMocha).to.have.been.calledWith({});\n            });\n\n            it('uses Mocha test runner when jasmineNodeOpts are present in config', () => {\n                const runner = detector.runnerFor({\n                    mochaOpts: {},\n                });\n\n                expect(testRunnerLoader.forMocha).to.have.been.calledWith({});\n            });\n\n            it('merges mochaOpts present in capabilities with root config', () => {\n                const runner = detector.runnerFor({\n                    mochaOpts: {\n                        timeout: 5,\n                    },\n                    capabilities: {\n                        mochaOpts: {\n                            timeout: 10,\n                        },\n                    }\n                });\n\n                expect(testRunnerLoader.forMocha)\n                    .to.have.been.calledWith({ timeout: 10 });\n            });\n\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/adapter/runner/TestRunnerDetector.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 868,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25",
    "access": null,
    "description": "TestRunnerDetector",
    "lineNumber": 10,
    "testTargets": [
      "TestRunnerDetector"
    ]
  },
  {
    "__docId__": 869,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26",
    "access": null,
    "description": "when using TestRunnerAdapter for",
    "lineNumber": 20
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "access": null,
    "description": "Cucumber",
    "lineNumber": 22
  },
  {
    "__docId__": 871,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.it28",
    "access": null,
    "lineNumber": 28
  },
  {
    "__docId__": 872,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.it29",
    "access": null,
    "description": "uses the configured runner even when configuration for other runners is present as well",
    "lineNumber": 38
  },
  {
    "__docId__": 873,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.it30",
    "access": null,
    "description": "uses Cucumber test runner when cucumberOpts are present in config",
    "lineNumber": 51
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.it31",
    "access": null,
    "description": "merges cucumberOpts present in capabilities with root config",
    "lineNumber": 59
  },
  {
    "__docId__": 875,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32",
    "access": null,
    "description": "instructs TestRunnerLoader",
    "lineNumber": 76
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32",
    "testDepth": 4,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe33",
    "access": null,
    "description": "to take over standard output when the config",
    "lineNumber": 78
  },
  {
    "__docId__": 877,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe33",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe33.it34",
    "access": null,
    "description": "defines serenity.crew and there is no cucumberOpts.format specified",
    "lineNumber": 80
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe33",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe33.it35",
    "access": null,
    "description": "defines serenity.crew and there is a cucumberOpts.format specified",
    "lineNumber": 91
  },
  {
    "__docId__": 879,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32",
    "testDepth": 4,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe36",
    "access": null,
    "description": "to redirect output to a temp file when the config",
    "lineNumber": 106
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe36",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe36.it37",
    "access": null,
    "description": "does not specify serenity.crew and there are is no cucumberOpts.format specified either",
    "lineNumber": 108
  },
  {
    "__docId__": 881,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe36",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe36.it38",
    "access": null,
    "description": "does not specify serenity.crew, but there is a cucumberOpts.format specified",
    "lineNumber": 118
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32",
    "testDepth": 4,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe39",
    "access": null,
    "description": "make the formatter output files unique when the config",
    "lineNumber": 133
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe39",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe39.it40",
    "access": null,
    "description": "specifies multiCapabilities",
    "lineNumber": 135
  },
  {
    "__docId__": 884,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe39",
    "testDepth": 5,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe27.describe32.describe39.it41",
    "access": null,
    "description": "specifies shardTestFiles",
    "lineNumber": 151
  },
  {
    "__docId__": 885,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "access": null,
    "description": "Jasmine",
    "lineNumber": 169
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42.it43",
    "access": null,
    "description": "uses Jasmine TestRunnerAdapter when no other runners are specified",
    "lineNumber": 171
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42.it44",
    "access": null,
    "lineNumber": 177
  },
  {
    "__docId__": 888,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42.it45",
    "access": null,
    "description": "uses the configured runner even when configuration for other runners is present as well",
    "lineNumber": 187
  },
  {
    "__docId__": 889,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42.it46",
    "access": null,
    "description": "uses Jasmine test runner when jasmineNodeOpts are present in config",
    "lineNumber": 200
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe42.it47",
    "access": null,
    "description": "merges jasmineNodeOpts present in capabilities with root config",
    "lineNumber": 208
  },
  {
    "__docId__": 891,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48",
    "access": null,
    "description": "Mocha",
    "lineNumber": 225
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48.it49",
    "access": null,
    "lineNumber": 227
  },
  {
    "__docId__": 893,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48.it50",
    "access": null,
    "description": "uses the configured runner even when configuration for other runners is present as well",
    "lineNumber": 237
  },
  {
    "__docId__": 894,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48.it51",
    "access": null,
    "description": "uses Mocha test runner when jasmineNodeOpts are present in config",
    "lineNumber": 250
  },
  {
    "__docId__": 895,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerDetector.spec.ts~describe25.describe26.describe48.it52",
    "access": null,
    "description": "merges mochaOpts present in capabilities with root config",
    "lineNumber": 258
  },
  {
    "__docId__": 896,
    "kind": "testFile",
    "name": "spec/adapter/runner/TestRunnerLoader.spec.ts",
    "content": "import 'mocha';\nimport { expect } from '@integration/testing-tools';\nimport { ModuleLoader, Path } from '@serenity-js/core/lib/io';\nimport { CucumberFormat, StandardOutput, TempFileOutput } from '@serenity-js/cucumber/lib/cli'; // tslint:disable-line:no-submodule-imports\nimport { given } from 'mocha-testdata';\nimport * as sinon from 'sinon';\nimport { TestRunnerLoader } from '../../../src/adapter';\n\n/** @test {TestRunnerLoader} */\ndescribe('TestRunnerLoader', () => {\n\n    const exampleRunnerId = 123;\n\n    let moduleLoader: sinon.SinonStubbedInstance<ModuleLoader>\n\n    beforeEach(() => {\n        moduleLoader = sinon.createStubInstance(ModuleLoader);\n    });\n\n    describe('when loading a TestRunnerAdapter for', () => {\n\n        describe('Jasmine', () => {\n\n            it('passes the configuration to the adapter', () => {\n\n                const jasmineNodeOpts = {\n                    requires: [\n                        'ts-node/register',\n                    ],\n                    helpers: [\n                        'spec/config/*.ts'\n                    ]\n                };\n\n                const testRunnerLoader = createTestRunnerLoader(exampleRunnerId);\n\n                const JasmineAdapter = sinon.spy();\n                moduleLoader.require.withArgs('@serenity-js/jasmine/lib/adapter').returns({ JasmineAdapter })\n\n                const runner = testRunnerLoader.forJasmine(jasmineNodeOpts);\n\n                expect(JasmineAdapter).to.have.been.calledWith(jasmineNodeOpts);\n            });\n        });\n\n        describe('Mocha', () => {\n\n            it('passes the configuration to the adapter', () => {\n\n                const mochaOpts = {\n                    require: [\n                        'ts-node/register',\n                    ],\n                    retries: 2\n                };\n\n                const testRunnerLoader = createTestRunnerLoader(exampleRunnerId);\n\n                const MochaAdapter = sinon.spy();\n                moduleLoader.require.withArgs('@serenity-js/mocha/lib/adapter').returns({ MochaAdapter })\n\n                const runner = testRunnerLoader.forMocha(mochaOpts);\n\n                expect(MochaAdapter).to.have.been.calledWith(mochaOpts);\n            });\n        });\n\n        describe('Cucumber', () => {\n\n            given([{\n                description: 'uses standard output when instructed to do so',\n                cucumberOpts: { 'require-module': ['ts-node/register'] },\n                adapterConfig: { useStandardOutput: true, uniqueFormatterOutputs: false },\n                expectedOutput: StandardOutput\n            }, {\n                description: 'uses temp file output when instructed not to use standard output',\n                cucumberOpts: { 'require-module': ['ts-node/register'] },\n                adapterConfig: { useStandardOutput: false, uniqueFormatterOutputs: false },\n                expectedOutput: TempFileOutput\n            } ]).\n            it('passes the configuration to the adapter', ({ cucumberOpts, adapterConfig, expectedOutput }) => {\n\n                const testRunnerLoader = createTestRunnerLoader(exampleRunnerId);\n\n                const CucumberCLIAdapter = sinon.spy();\n                moduleLoader.require.withArgs('@serenity-js/cucumber/lib/cli').returns({ CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput  })\n\n                const runner = testRunnerLoader.forCucumber(cucumberOpts, adapterConfig);\n\n                expect(CucumberCLIAdapter).to.have.been.calledWith(cucumberOpts, moduleLoader, sinon.match.instanceOf(expectedOutput));\n            });\n\n            it('resolves glob patterns in `require` to absolute paths', () => {\n\n                function absolutePathTo(relativePath: string): string {\n                    return Path.from(__dirname, relativePath).value;\n                }\n\n                const testRunnerLoader = createTestRunnerLoader(exampleRunnerId);\n\n                const CucumberCLIAdapter = sinon.spy();\n                moduleLoader.require.withArgs('@serenity-js/cucumber/lib/cli').returns({ CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput  })\n\n                const cucumberOpts = {\n                    require: [\n                        'features/**/*.steps.ts',\n                    ]\n                };\n\n                const runner = testRunnerLoader.forCucumber(cucumberOpts, { useStandardOutput: false, uniqueFormatterOutputs: false });\n\n                expect(CucumberCLIAdapter).to.have.been.calledWith({\n                    require: [\n                        absolutePathTo('features/example.steps.ts'),\n                    ]\n                }, moduleLoader, sinon.match.instanceOf(TempFileOutput));\n            });\n\n            given([{\n                description:            `doesn't change the output file name when uniqueFormatterOutputs are disabled`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: false },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'pretty', 'json:out.json' ] },\n                expectedCucumberOpts:   { 'format': [ 'pretty', 'json:out.json' ] }\n            }, {\n                description:            `adds the runner ID to native formatter output file name when uniqueFormatterOutputs are enabled`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'pretty', 'json:out.json' ] },\n                expectedCucumberOpts:   { 'format': [ 'pretty', `json:out.${ exampleRunnerId }.json` ] }\n            }, {\n                description:            `doesn't add the runner ID to formatters printing to standard output (Unix)`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ '../custom/formatter' ] },\n                expectedCucumberOpts:   { 'format': [ '../custom/formatter' ] }\n            }, {\n                description:            `doesn't add the runner ID to formatters printing to standard output (Windows)`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'C:\\\\custom\\\\formatter' ] },\n                expectedCucumberOpts:   { 'format': [ 'C:\\\\custom\\\\formatter' ] }\n            }, {\n                description:            `adds the runner ID to formatter printing to a relative Unix path`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ '../custom/formatter:../formatter/output.txt' ] },\n                expectedCucumberOpts:   { 'format': [ `../custom/formatter:../formatter/output.${ exampleRunnerId }.txt` ] }\n            }, {\n                description:            `adds the runner ID to formatter printing to an absolute Unix path`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ '/custom/formatter:/formatter/output.txt' ] },\n                expectedCucumberOpts:   { 'format': [ `/custom/formatter:/formatter/output.${ exampleRunnerId }.txt` ] }\n            }, {\n                description:            `adds the runner ID to formatter printing to an absolute Windows path`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'C:\\\\custom\\\\formatter:C:\\\\formatter\\\\output.txt' ] },\n                expectedCucumberOpts:   { 'format': [ `C:\\\\custom\\\\formatter:C:\\\\formatter\\\\output.${ exampleRunnerId }.txt` ] }\n            }, {\n                description:            `adds the runner ID to a file without an extension (Unix)`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'custom/formatter:out' ] },\n                expectedCucumberOpts:   { 'format': [ `custom/formatter:out.${ exampleRunnerId }` ] }\n            }, {\n                description:            `adds the runner ID to a file without an extension (Windows)`,\n                adapterConfig:          { useStandardOutput: false, uniqueFormatterOutputs: true },\n                expectedOutput:         TempFileOutput,\n                cucumberOpts:           { 'format': [ 'C:\\\\custom\\\\formatter:out' ] },\n                expectedCucumberOpts:   { 'format': [ `C:\\\\custom\\\\formatter:out.${ exampleRunnerId }` ] }\n            } ]).\n            it(`passes information about native Cucumber formatters to the adapter`, ({ adapterConfig, expectedOutput, cucumberOpts, expectedCucumberOpts }) => {\n\n                const testRunnerLoader = createTestRunnerLoader(exampleRunnerId);\n\n                const CucumberCLIAdapter = sinon.spy();\n                moduleLoader.require.withArgs('@serenity-js/cucumber/lib/cli').returns({ CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput  })\n\n                const runner = testRunnerLoader.forCucumber(cucumberOpts, adapterConfig);\n\n                expect(CucumberCLIAdapter).to.have.been.calledWith(expectedCucumberOpts, moduleLoader, sinon.match.instanceOf(expectedOutput));\n            });\n        });\n    });\n\n    function createTestRunnerLoader(runnerId: string | number) {\n        const cwd = Path.from(__dirname);\n\n        const testRunnerLoader = new TestRunnerLoader(cwd, runnerId);\n        (testRunnerLoader as any).moduleLoader = moduleLoader;\n\n        return testRunnerLoader;\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/adapter/runner/TestRunnerLoader.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 897,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53",
    "access": null,
    "description": "TestRunnerLoader",
    "lineNumber": 10,
    "testTargets": [
      "TestRunnerLoader"
    ]
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54",
    "access": null,
    "description": "when loading a TestRunnerAdapter for",
    "lineNumber": 20
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe55",
    "access": null,
    "description": "Jasmine",
    "lineNumber": 22
  },
  {
    "__docId__": 900,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe55",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe55.it56",
    "access": null,
    "description": "passes the configuration to the adapter",
    "lineNumber": 24
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe57",
    "access": null,
    "description": "Mocha",
    "lineNumber": 46
  },
  {
    "__docId__": 902,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe57",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe57.it58",
    "access": null,
    "description": "passes the configuration to the adapter",
    "lineNumber": 48
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe59",
    "access": null,
    "description": "Cucumber",
    "lineNumber": 68
  },
  {
    "__docId__": 904,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe59",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/runner/TestRunnerLoader.spec.ts~describe53.describe54.describe59.it60",
    "access": null,
    "description": "resolves glob patterns in `require` to absolute paths",
    "lineNumber": 93
  },
  {
    "__docId__": 905,
    "kind": "testFile",
    "name": "spec/expectations/isActive.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, not } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Click, isActive, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isActive', function () {\n\n    const Page = {\n        Active_Input:       Target.the('active input').located(by.id('active')),\n        Inactive_Input:     Target.the('inactive input').located(by.id('inactive')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <input type=\"text\" id=\"active\" />\n                    <input type=\"text\" id=\"inactive\" />\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isActive} */\n    it('allows the actor flow to continue when the element is active', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Active_Input, not(isActive())),\n        Ensure.that(Page.Active_Input, not(isActive())),\n        Click.on(Page.Active_Input),\n        Wait.until(Page.Active_Input, isActive()),\n        Ensure.that(Page.Active_Input, isActive()),\n    )).to.be.fulfilled);\n\n    /** @test {isActive} */\n    it('breaks the actor flow when element is inactive', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Inactive_Input, isActive()),\n        )).to.be.rejectedWith(AssertionError, `Expected the inactive input to become active`);\n    });\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Active_Input, isActive()).toString())\n            .to.equal(`#actor ensures that the active input does become active`);\n    });\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Active_Input, isActive()).toString())\n            .to.equal(`#actor waits up to 5s until the active input does become active`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isActive.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 906,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "spec/expectations/isActive.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe61",
    "access": null,
    "description": "isActive",
    "lineNumber": 12
  },
  {
    "__docId__": 907,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/expectations/isActive.spec.ts~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe61.it62",
    "access": null,
    "description": "allows the actor flow to continue when the element is active",
    "lineNumber": 33,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 908,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "spec/expectations/isActive.spec.ts~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe61.it63",
    "access": null,
    "description": "breaks the actor flow when element is inactive",
    "lineNumber": 42,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 909,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/expectations/isActive.spec.ts~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe61.it64",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 49,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 910,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/expectations/isActive.spec.ts~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe61.it65",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 55,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 911,
    "kind": "testFile",
    "name": "spec/expectations/isClickable.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isClickable, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isClickable', function () {\n\n    const Page = {\n        Enabled_Button:     Target.the('enabled button').located(by.id('enabled')),\n        Disabled_Button:    Target.the('disabled button').located(by.id('disabled')),\n        Hidden_Button:      Target.the('hidden button').located(by.id('hidden')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <button id=\"enabled\">enabled</button>\n                    <button disabled id=\"disabled\">disabled</button>\n                    <button style=\"display:none;\" id=\"hidden\">hidden</button>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isClickable} */\n    it('allows the actor flow to continue when the element is clickable', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Enabled_Button, isClickable()),\n        Ensure.that(Page.Enabled_Button, isClickable()),\n    )).to.be.fulfilled);\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is disabled', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Disabled_Button, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become enabled`);\n    });\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is not visible', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Hidden_Button, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the hidden button to become displayed`);\n    });\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Enabled_Button, isClickable()).toString())\n            .to.equal(`#actor ensures that the enabled button does become clickable`);\n    });\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Enabled_Button, isClickable()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become clickable`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isClickable.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 912,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "spec/expectations/isClickable.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66",
    "access": null,
    "description": "isClickable",
    "lineNumber": 12
  },
  {
    "__docId__": 913,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/expectations/isClickable.spec.ts~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66.it67",
    "access": null,
    "description": "allows the actor flow to continue when the element is clickable",
    "lineNumber": 35,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 914,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/expectations/isClickable.spec.ts~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66.it68",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 41,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 915,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "spec/expectations/isClickable.spec.ts~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66.it69",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 48,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 916,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/expectations/isClickable.spec.ts~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66.it70",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 55,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 917,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/expectations/isClickable.spec.ts~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe66.it71",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 61,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 918,
    "kind": "testFile",
    "name": "spec/expectations/isEnabled.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isEnabled, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isEnabled', function () {\n\n    const Page = {\n        Enabled_Button:     Target.the('enabled button').located(by.id('enabled')),\n        Disabled_Button:    Target.the('disabled button').located(by.id('disabled')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <button id=\"enabled\">enabled</button>\n                    <button disabled id=\"disabled\">disabled</button>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isEnabled} */\n    it('allows the actor flow to continue when the element is enabled', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Enabled_Button, isEnabled()),\n        Ensure.that(Page.Enabled_Button, isEnabled()),\n    )).to.be.fulfilled);\n\n    /** @test {isEnabled} */\n    it('breaks the actor flow when element is disabled', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Disabled_Button, isEnabled()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become enabled`);\n    });\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Enabled_Button, isEnabled()).toString())\n            .to.equal(`#actor ensures that the enabled button does become enabled`);\n    });\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Enabled_Button, isEnabled()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become enabled`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isEnabled.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 919,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "spec/expectations/isEnabled.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe72",
    "access": null,
    "description": "isEnabled",
    "lineNumber": 12
  },
  {
    "__docId__": 920,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe72.it73",
    "access": null,
    "description": "allows the actor flow to continue when the element is enabled",
    "lineNumber": 33,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 921,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe72.it74",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 39,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 922,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe72.it75",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 46,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 923,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe72.it76",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 52,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 924,
    "kind": "testFile",
    "name": "spec/expectations/isPresent.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, Duration, engage } from '@serenity-js/core';\nimport { ErrorSerialiser } from '@serenity-js/core/lib/io';\nimport { by } from 'protractor';\n\nimport { isPresent, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isPresent', function () {\n\n    const Page = {\n        Present_Header:         Target.the('header').located(by.tagName('h1')),\n        Non_Existent_Header:    Target.the('non-existent header').located(by.tagName('h2')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <h1>Hello!</h1>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isPresent} */\n    it('allows the actor flow to continue when the element is present in the DOM', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Present_Header, isPresent()),\n        Ensure.that(Page.Present_Header, isPresent()),\n    )).to.be.fulfilled);\n\n    /** @test {isPresent} */\n    it('breaks the actor flow when element does not become present in the DOM', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.upTo(Duration.ofMilliseconds(250)).until(Page.Non_Existent_Header, isPresent()),\n    )).to.be.rejectedWith(AssertionError, `Waited 250ms for the non-existent header to become present`));\n\n    /** @test {isPresent} */\n    it('breaks the actor flow when element is not present in the DOM', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Non_Existent_Header, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become present`);\n    });\n\n    /** @test {isPresent} */\n    it(`produces an assertion error that can be serialised with ErrorSerialiser`, () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Non_Existent_Header, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become present`)\n            .then((error: AssertionError) => {\n                expect(ErrorSerialiser.serialise(error)).to.be.a('string');\n            });\n    });\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Present_Header, isPresent()).toString())\n            .to.equal(`#actor ensures that the header does become present`);\n    });\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Present_Header, isPresent()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become present`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isPresent.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 925,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "spec/expectations/isPresent.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77",
    "access": null,
    "description": "isPresent",
    "lineNumber": 13
  },
  {
    "__docId__": 926,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it78",
    "access": null,
    "description": "allows the actor flow to continue when the element is present in the DOM",
    "lineNumber": 33,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 927,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it79",
    "access": null,
    "description": "breaks the actor flow when element does not become present in the DOM",
    "lineNumber": 39,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 928,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it80",
    "access": null,
    "description": "breaks the actor flow when element is not present in the DOM",
    "lineNumber": 44,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 929,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it81",
    "access": null,
    "lineNumber": 51,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 930,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it82",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 61,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 931,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "spec/expectations/isPresent.spec.ts~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe77.it83",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 67,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 932,
    "kind": "testFile",
    "name": "spec/expectations/isSelected.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isSelected, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isSelected', function () {\n\n    const Languages = {\n        TypeScript: Target.the('TypeScript option').located(by.css('select[name=\"languages\"] > option[value=\"TypeScript\"]')),\n        JavaScript: Target.the('JavaScript option').located(by.css('select[name=\"languages\"] > option[value=\"JavaScript\"]')),\n        Java:       Target.the('Java option').located(by.css('select[name=\"languages\"] > option[value=\"Java\"]')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <select name=\"languages\">\n                        <option selected value=\"TypeScript\">TypeScript</option>\n                        <option value=\"JavaScript\">JavaScript</option>\n                    </select>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isSelected} */\n    it('allows the actor flow to continue when the element is selected', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Languages.TypeScript, isSelected()),\n        Ensure.that(Languages.TypeScript, isSelected()),\n    )).to.be.fulfilled);\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not selected', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Languages.JavaScript, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the JavaScript option to become selected`);\n    });\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not present', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Languages.Java, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the Java option to become present`);\n    });\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Languages.TypeScript, isSelected()).toString())\n            .to.equal(`#actor ensures that the TypeScript option does become selected`);\n    });\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Languages.TypeScript, isSelected()).toString())\n            .to.equal(`#actor waits up to 5s until the TypeScript option does become selected`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isSelected.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 933,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/expectations/isSelected.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84",
    "access": null,
    "description": "isSelected",
    "lineNumber": 12
  },
  {
    "__docId__": 934,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "spec/expectations/isSelected.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84.it85",
    "access": null,
    "description": "allows the actor flow to continue when the element is selected",
    "lineNumber": 36,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 935,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "spec/expectations/isSelected.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84.it86",
    "access": null,
    "description": "breaks the actor flow when element is not selected",
    "lineNumber": 42,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 936,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/expectations/isSelected.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84.it87",
    "access": null,
    "description": "breaks the actor flow when element is not present",
    "lineNumber": 49,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 937,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/expectations/isSelected.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84.it88",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 56,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 938,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "spec/expectations/isSelected.spec.ts~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe84.it89",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 62,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 939,
    "kind": "testFile",
    "name": "spec/expectations/isVisible.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { isVisible, Navigate, Target, Wait } from '../../src';\nimport { pageFromTemplate } from '../fixtures';\nimport { UIActors } from '../UIActors';\n\ndescribe('isVisible', function () {\n\n    const Page = {\n        Visible_Header:        Target.the('header').located(by.tagName('h1')),\n        Invisible_Header:      Target.the('invisible header').located(by.tagName('h2')),\n        Non_Existent_Header:   Target.the('non-existent header').located(by.tagName('h3')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    beforeEach(() => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <h1>visible</h1>\n                    <h2 style=\"display:none;\">invisible</h2>\n                </body>\n            </html>\n        `)),\n    ));\n\n    /** @test {isVisible} */\n    it('allows the actor flow to continue when the element is visible', () => expect(actorCalled('Bernie').attemptsTo(\n        Wait.until(Page.Visible_Header, isVisible()),\n        Ensure.that(Page.Visible_Header, isVisible()),\n    )).to.be.fulfilled);\n\n    /** @test {isVisible} */\n    it('breaks the actor flow when element is not visible', () => {\n        return expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(Page.Invisible_Header, isVisible()),\n        )).to.be.rejectedWith(AssertionError, `Expected the invisible header to become displayed`);\n    });\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.Visible_Header, isVisible()).toString())\n            .to.equal(`#actor ensures that the header does become visible`);\n    });\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.Visible_Header, isVisible()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become visible`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/expectations/isVisible.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 940,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "spec/expectations/isVisible.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe90",
    "access": null,
    "description": "isVisible",
    "lineNumber": 12
  },
  {
    "__docId__": 941,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "spec/expectations/isVisible.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe90.it91",
    "access": null,
    "description": "allows the actor flow to continue when the element is visible",
    "lineNumber": 34,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 942,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "spec/expectations/isVisible.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe90.it92",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 40,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 943,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "spec/expectations/isVisible.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe90.it93",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 47,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 944,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "spec/expectations/isVisible.spec.ts~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe90.it94",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 53,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 945,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Clear.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, LogicError } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Clear, Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Clear', () => {\n\n    const Form = {\n        Field: Target.the('input field').located(by.id('field')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an empty input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" value=\"\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an empty input with no \"value\" attribute', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" value=\"Jan\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an number field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"number\" id=\"field\" value=\"42\" >\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of a date field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"date\" id=\"field\" value=\"2019-09-22\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an RTL input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html dir=\"rtl\">\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" value=\"שלום עולם\" dir=\"rtl\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('')),\n    ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('complains if the element cannot be cleared', () => expect(actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html dir=\"rtl\">\n                <body>\n                    <div id=\"field\">Hello World!</div>\n                </body>\n            </html>\n        `)),\n\n        Clear.theValueOf(Form.Field),\n    )).to.be.rejectedWith(LogicError, `The input field doesn't seem to have a 'value' attribute that could be cleared.`));\n\n    /** @test {Clear#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Clear.theValueOf(Form.Field).toString())\n            .to.equal('#actor clears the value of the input field');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Clear.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 946,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "access": null,
    "description": "Clear",
    "lineNumber": 12
  },
  {
    "__docId__": 947,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it96",
    "access": null,
    "description": "allows the actor to clear the value of an empty input field",
    "lineNumber": 22,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 948,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it97",
    "access": null,
    "description": "allows the actor to clear the value of an empty input with no \"value\" attribute",
    "lineNumber": 40,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 949,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it98",
    "access": null,
    "description": "allows the actor to clear the value of an input field",
    "lineNumber": 58,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 950,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it99",
    "access": null,
    "description": "allows the actor to clear the value of an number field",
    "lineNumber": 76,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 951,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it100",
    "access": null,
    "description": "allows the actor to clear the value of a date field",
    "lineNumber": 94,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 952,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it101",
    "access": null,
    "description": "allows the actor to clear the value of an RTL input field",
    "lineNumber": 112,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 953,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it102",
    "access": null,
    "description": "complains if the element cannot be cleared",
    "lineNumber": 130,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 954,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe95.it103",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 143,
    "testTargets": [
      "Clear#toString"
    ]
  },
  {
    "__docId__": 955,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Click.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Attribute, Click, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Click} */\ndescribe('Click', () => {\n\n    const Form = {\n        Checkbox: Target.the('checkbox').located(by.id('no-spam-please')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Click.on} */\n    it('allows the actor to click on an element', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"checkbox\" id=\"no-spam-please\" />\n                    </form>\n                </body>\n            </html>\n        `)),\n\n        Click.on(Form.Checkbox),\n\n        Ensure.that(Attribute.of(Form.Checkbox).called('checked'), equals('true')),\n    ));\n\n    /** @test {Click#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Click.on(Form.Checkbox).toString())\n            .to.equal('#actor clicks on the checkbox');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Click.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 956,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "spec/screenplay/interactions/Click.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe104",
    "access": null,
    "description": "Click",
    "lineNumber": 13,
    "testTargets": [
      "Click"
    ]
  },
  {
    "__docId__": 957,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe104.it105",
    "access": null,
    "description": "allows the actor to click on an element",
    "lineNumber": 22,
    "testTargets": [
      "Click.on"
    ]
  },
  {
    "__docId__": 958,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe104",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe104.it106",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 39,
    "testTargets": [
      "Click#toString"
    ]
  },
  {
    "__docId__": 959,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Close.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Click, Close, Navigate, Switch, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Close} */\ndescribe('Close', () => {\n\n    const\n        h1 = Target.the('header').located(by.css('h1')),\n        newTabLink = Target.the('link').located(by.linkText('open new tab'));\n\n    const pageWithLinkToNewTab =\n        (header: string) =>\n            pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1>${ header }</h1>\n                        <a href=\"javascript:void(0)\" onclick=\"popup()\">open new tab</a>\n                        <script>\n                            function popup() {\n                                var w = window.open('', 'new-tab');\n                                w.document.write('<h1>New tab</h1>');\n                                w.document.close();\n                            }\n                        </script>\n                    </body>\n                </html>\n            `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('anyNewWindows()', () => {\n\n        /** @test {Close.anyNewWindows} */\n        it('should close any new windows and switch back to the original window', () =>\n            actorCalled('Caleb').attemptsTo(\n                Navigate.to(pageWithLinkToNewTab('Main page')),\n                Click.on(newTabLink),\n\n                Switch.toNewWindow(),\n                Ensure.that(Text.of(h1), equals('New tab')),\n\n                Close.anyNewWindows(),\n\n                Ensure.that(Text.of(h1), equals('Main page')),\n            ));\n\n        /** @test {Close.anyNewWindows} */\n        it('should do nothing if no new windows have been opened', () =>\n            actorCalled('Caleb').attemptsTo(\n                Navigate.to(pageWithLinkToNewTab('Main page')),\n\n                Close.anyNewWindows(),\n\n                Ensure.that(Text.of(h1), equals('Main page')),\n            ));\n\n        /** @test {Close.anyNewWindows} */\n        /** @test {Close#toString} */\n        it('should provide a sensible description of the interaction being performed', () => {\n            expect(Close.anyNewWindows().toString()).to.equal('#actor closes any new windows')\n        });\n    });\n\n    describe('currentWindow()', () => {\n\n        /** @test {Close.currentWindow} */\n        it('should close the current window', () =>\n            actorCalled('Caleb').attemptsTo(\n                Navigate.to(pageWithLinkToNewTab('Main page')),\n                Click.on(newTabLink),\n\n                Switch.toNewWindow(),\n                Ensure.that(Text.of(h1), equals('New tab')),\n\n                Close.currentWindow(),\n                Switch.toOriginalWindow(),\n\n                Ensure.that(Text.of(h1), equals('Main page')),\n            ));\n\n        /** @test {Close.currentWindow} */\n        /** @test {Close#toString} */\n        it('should provide a sensible description of the interaction being performed', () => {\n            expect(Close.currentWindow().toString()).to.equal('#actor closes current browser window')\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Close.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 960,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "spec/screenplay/interactions/Close.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107",
    "access": null,
    "description": "Close",
    "lineNumber": 13,
    "testTargets": [
      "Close"
    ]
  },
  {
    "__docId__": 961,
    "kind": "test",
    "name": "describe108",
    "testId": 108,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108",
    "access": null,
    "description": "anyNewWindows()",
    "lineNumber": 39
  },
  {
    "__docId__": 962,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108.it109",
    "access": null,
    "description": "should close any new windows and switch back to the original window",
    "lineNumber": 42,
    "testTargets": [
      "Close.anyNewWindows"
    ]
  },
  {
    "__docId__": 963,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108.it110",
    "access": null,
    "description": "should do nothing if no new windows have been opened",
    "lineNumber": 56,
    "testTargets": [
      "Close.anyNewWindows"
    ]
  },
  {
    "__docId__": 964,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe108.it111",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 67,
    "testTargets": [
      "Close#toString"
    ]
  },
  {
    "__docId__": 965,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe112",
    "access": null,
    "description": "currentWindow()",
    "lineNumber": 72
  },
  {
    "__docId__": 966,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe112.it113",
    "access": null,
    "description": "should close the current window",
    "lineNumber": 75,
    "testTargets": [
      "Close.currentWindow"
    ]
  },
  {
    "__docId__": 967,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "spec/screenplay/interactions/Close.spec.ts~describe107.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Close.spec.ts~describe107.describe112.it114",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 91,
    "testTargets": [
      "Close#toString"
    ]
  },
  {
    "__docId__": 968,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { DoubleClick, Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('DoubleClick', () => {\n\n    const Interactive_Element = Target.the('interactive element').located(by.id('double-click-me'));\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {DoubleClick} */\n    /** @test {DoubleClick.on} */\n    it('allows the actor to clear the value of a field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html>\n                <body>\n                    <div id=\"double-click-me\">double-click me!</div>\n                    <script>\n                        const el = document.getElementById('double-click-me');\n\n                        el.addEventListener('dblclick', function (e) {\n                          el.innerText = 'done!';\n                        });\n                    </script>\n                </body>\n            </html>\n        `)),\n\n        DoubleClick.on(Interactive_Element),\n\n        Ensure.that(Text.of(Interactive_Element), equals('done!')),\n    ));\n\n    /** @test {DoubleClick#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(DoubleClick.on(Interactive_Element).toString())\n            .to.equal('#actor double-clicks on the interactive element');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/DoubleClick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 969,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe115",
    "access": null,
    "description": "DoubleClick",
    "lineNumber": 12
  },
  {
    "__docId__": 970,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe115.it116",
    "access": null,
    "description": "allows the actor to clear the value of a field",
    "lineNumber": 20,
    "testTargets": [
      "DoubleClick.on"
    ]
  },
  {
    "__docId__": 971,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe115",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe115.it117",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 42,
    "testTargets": [
      "DoubleClick#toString"
    ]
  },
  {
    "__docId__": 972,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Enter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Enter, Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Enter} */\ndescribe('Enter', () => {\n\n    const Form = {\n        Field: Target.the('name field').located(by.id('field')),\n        Result: Target.the('result').located(by.id('result')),\n    };\n\n    const page = pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" id=\"field\" onkeyup=\"update()\" />\n                        <div id=\"result\" />\n                    </form>\n                    <script>\n                    function update() {\n                      document.getElementById(\"result\").textContent = document.getElementById(\"field\").value;\n                    }\n                    </script>\n                </body>\n            </html>\n        `)\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Enter} */\n    /** @test {Enter.theValue} */\n    it('allows the actor to enter the value into an input field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(page),\n\n        Enter.theValue(actorCalled('Bernie').name).into(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals(actorCalled('Bernie').name)),\n    ));\n\n    /** @test {Enter} */\n    /** @test {Enter.theValue} */\n    it('allows the actor to enter the value into a number field', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(page),\n\n        Enter.theValue(123).into(Form.Field),\n\n        Ensure.that(Value.of(Form.Field), equals('123')),\n    ));\n\n    /** @test {Enter#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Enter.theValue(actorCalled('Bernie').name).into(Form.Field).toString())\n            .to.equal(`#actor enters 'Bernie' into the name field`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Enter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 973,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe118",
    "access": null,
    "description": "Enter",
    "lineNumber": 13,
    "testTargets": [
      "Enter"
    ]
  },
  {
    "__docId__": 974,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe118.it119",
    "access": null,
    "description": "allows the actor to enter the value into an input field",
    "lineNumber": 40,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 975,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe118.it120",
    "access": null,
    "description": "allows the actor to enter the value into a number field",
    "lineNumber": 50,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 976,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe118.it121",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 59,
    "testTargets": [
      "Enter#toString"
    ]
  },
  {
    "__docId__": 977,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Hover.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Attribute, Hover, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Hover} */\ndescribe('Hover', function () {\n\n    const pageWithALink = pageFromTemplate(`\n        <html>\n            <body style=\"margin:0; padding:0 0 1024px 0;\">\n                <h1>A page with a link</h1>\n                <a href=\"javascript:void(0)\"\n                   class=\"off\"\n                   onmouseover=\"this.className='on';\" onmouseout=\"this.className='off';\">link</a>\n            </body>\n        </html>\n    `);\n\n    const Page = {\n        Header: Target.the('header').located(by.css('h1')),\n        Link:   Target.the('link').located(by.css('a')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Hover.over} */\n    it('allows the actor to position the mouse cursor over a given target', () => actorCalled('Mickey').attemptsTo(\n        Navigate.to(pageWithALink),\n\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('off')),\n\n        Hover.over(Page.Link),\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('on')),\n\n        Hover.over(Page.Header),\n        Ensure.that(Attribute.of(Page.Link).called('class'), equals('off')),\n    ));\n\n    /** @test {Hover#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Hover.over(Page.Link).toString())\n            .to.equal(`#actor hovers the mouse over the link`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Hover.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 978,
    "kind": "test",
    "name": "describe122",
    "testId": 122,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe122",
    "access": null,
    "description": "Hover",
    "lineNumber": 13,
    "testTargets": [
      "Hover"
    ]
  },
  {
    "__docId__": 979,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe122",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe122.it123",
    "access": null,
    "description": "allows the actor to position the mouse cursor over a given target",
    "lineNumber": 34,
    "testTargets": [
      "Hover.over"
    ]
  },
  {
    "__docId__": 980,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe122",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe122.it124",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 47,
    "testTargets": [
      "Hover#toString"
    ]
  },
  {
    "__docId__": 981,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Navigate.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { endsWith, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Duration, engage, TestCompromisedError } from '@serenity-js/core';\nimport { by, error as errors } from 'protractor';\n\nimport { Navigate, Target, Text, Website } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Navigate} */\ndescribe('Navigate', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('to(url)', () => {\n\n        /** @test {Navigate.to} */\n        it('allows the actor to navigate to a desired destination', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageFromTemplate(`\n                    <html>\n                        <body>\n                            <h1 id=\"h\">Hello World</h1>\n                        </body>\n                    </html>\n                `)),\n\n                Ensure.that(Text.of(Target.the('heading').located(by.id('h'))), equals('Hello World')),\n            ));\n\n        /** @test {Navigate.to} */\n        it(`marks the test as compromised if the desired destination can't be reached`, () =>\n            expect(actorCalled('Bernie').attemptsTo(\n                Navigate.to('invalid-destination'),\n            )).\n            to.be.rejectedWith(TestCompromisedError, `Couldn't navigate to invalid-destination`).\n            then((error: TestCompromisedError) => {\n                expect(error.cause).to.be.instanceOf(errors.WebDriverError)\n            }));\n\n        /** @test {Navigate.to} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.to(`https://serenity-js.org`).toString())\n                .to.equal(`#actor navigates to 'https://serenity-js.org'`);\n        });\n    });\n\n    describe('to(url).withTimeout(duration)', function () {\n\n        /** @test {Navigate.to} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.to(`https://serenity-js.org`).withTimeout(Duration.ofSeconds(5)).toString())\n                .to.equal(`#actor navigates to 'https://serenity-js.org' waiting up to 5s for Angular to load`);\n        });\n    });\n\n    describe('back', () => {\n\n        /** @test {Navigate.back} */\n        it('allows the actor to navigate back in the browser history', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://version/`),\n            Navigate.to(`chrome://accessibility/`),\n\n            Navigate.back(),\n\n            Ensure.that(Website.url(), endsWith('version/')),\n        ));\n\n        /** @test {Navigate.back} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.back().toString())\n                .to.equal(`#actor navigates back in the browser history`);\n        });\n    });\n\n    describe('forward', () => {\n\n        /** @test {Navigate.forward} */\n        it('allows the actor to navigate forward in the browser history', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://version/`),\n            Navigate.to(`chrome://accessibility/`),\n\n            Navigate.back(),\n            Navigate.forward(),\n\n            Ensure.that(Website.url(), endsWith('accessibility/')),\n        ));\n\n        /** @test {Navigate.forward} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.forward().toString())\n                .to.equal(`#actor navigates forward in the browser history`);\n        });\n    });\n\n    describe('reloadPage', () => {\n\n        /** @test {Navigate.reloadPage} */\n        it('allows the actor to navigate to a desired destination', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1 id=\"h\">Hello!</h1>\n                    </body>\n                    <script>\n                        if(window.performance.navigation.type === window.performance.navigation.TYPE_RELOAD) {\n                            document.getElementById('h').textContent = 'Reloaded'\n                        }\n                    </script>\n                </html>\n            `)),\n\n            Navigate.reloadPage(),\n\n            Ensure.that(Text.of(Target.the('heading').located(by.id('h'))), equals('Reloaded')),\n        ));\n\n        /** @test {Navigate.reloadPage} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.reloadPage().toString())\n                .to.equal(`#actor reloads the page`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Navigate.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 982,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "access": null,
    "description": "Navigate",
    "lineNumber": 13,
    "testTargets": [
      "Navigate"
    ]
  },
  {
    "__docId__": 983,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126",
    "access": null,
    "description": "to(url)",
    "lineNumber": 17
  },
  {
    "__docId__": 984,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126.it127",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 20,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 985,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126.it128",
    "access": null,
    "lineNumber": 34,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 986,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe126.it129",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 45,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 987,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe130",
    "access": null,
    "description": "to(url).withTimeout(duration)",
    "lineNumber": 51
  },
  {
    "__docId__": 988,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe130.it131",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 55,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 989,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe132",
    "access": null,
    "description": "back",
    "lineNumber": 61
  },
  {
    "__docId__": 990,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe132.it133",
    "access": null,
    "description": "allows the actor to navigate back in the browser history",
    "lineNumber": 64,
    "testTargets": [
      "Navigate.back"
    ]
  },
  {
    "__docId__": 991,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe132.it134",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 75,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 992,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe135",
    "access": null,
    "description": "forward",
    "lineNumber": 81
  },
  {
    "__docId__": 993,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe135.it136",
    "access": null,
    "description": "allows the actor to navigate forward in the browser history",
    "lineNumber": 84,
    "testTargets": [
      "Navigate.forward"
    ]
  },
  {
    "__docId__": 994,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe135.it137",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 96,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 995,
    "kind": "test",
    "name": "describe138",
    "testId": 138,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe138",
    "access": null,
    "description": "reloadPage",
    "lineNumber": 102
  },
  {
    "__docId__": 996,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe138.it139",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 105,
    "testTargets": [
      "Navigate.reloadPage"
    ]
  },
  {
    "__docId__": 997,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe125.describe138.it140",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 126,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 998,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Press.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by, Key } from 'protractor';\n\nimport { Navigate, Press, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Press} */\ndescribe('Press', () => {\n\n    const Form = {\n        Text_Field:     Target.the('text field').located(by.name('text')),\n    };\n\n    const page = pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" name=\"text\" />\n                    </form>\n                </body>\n            </html>\n        `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('single keys', () => {\n\n        /** @test {Press.the} */\n        it('allows the actor to enter keys individually into a field', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(page),\n\n            Press.the('a').in(Form.Text_Field),\n            Press.the('A').in(Form.Text_Field),\n\n            Ensure.that(Value.of(Form.Text_Field), equals('aA')),\n        ));\n\n    });\n\n    describe('keyboard shortcuts', function () {\n\n        /** @test {Press.the} */\n        it('allows the actor to use keyboard shortcuts', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(page),\n\n            Press.the(Key.SHIFT, 'a').in(Form.Text_Field),\n\n            Ensure.that(Value.of(Form.Text_Field), equals(`A`)),\n        ));\n    });\n\n    given([\n        {\n            description: 'single key',\n            interaction: Press.the('a').in(Form.Text_Field),\n            expected:   `#actor presses A in the text field`,\n        },\n        {\n            description: 'sequence of keys',\n            interaction: Press.the('a', 'b', 'c').in(Form.Text_Field),\n            expected:   `#actor presses A, B, C in the text field`,\n        },\n        {\n            description: 'keyboard shortcut',\n            interaction: Press.the(Key.CONTROL, 'a').in(Form.Text_Field),\n            expected:   `#actor presses Control-A in the text field`,\n        },\n        {\n            description: 'complex shortcut',\n            interaction: Press.the(Key.COMMAND, Key.ALT, 'a').in(Form.Text_Field),\n            expected:   `#actor presses Command-Alt-A in the text field`,\n        },\n    ]).\n    /** @test {Press#toString} */\n    it('provides a sensible description of the interaction being performed', ({ interaction, expected }) => {\n        expect(interaction.toString()).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Press.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 999,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "spec/screenplay/interactions/Press.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe141",
    "access": null,
    "description": "Press",
    "lineNumber": 14,
    "testTargets": [
      "Press"
    ]
  },
  {
    "__docId__": 1000,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe141",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe141.describe142",
    "access": null,
    "description": "single keys",
    "lineNumber": 32
  },
  {
    "__docId__": 1001,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe141.describe142.it143",
    "access": null,
    "description": "allows the actor to enter keys individually into a field",
    "lineNumber": 35,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 1002,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe141",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe141.describe144",
    "access": null,
    "description": "keyboard shortcuts",
    "lineNumber": 46
  },
  {
    "__docId__": 1003,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe141.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe141.describe144.it145",
    "access": null,
    "description": "allows the actor to use keyboard shortcuts",
    "lineNumber": 49,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 1004,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "content": "import 'mocha';\nimport { expect } from '@integration/testing-tools';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, Note, TakeNote } from '@serenity-js/core';\nimport { ResizeBrowserWindow, Window } from '../../../src';\nimport { UIActors } from '../../UIActors';\n\n/** @test {ResizeBrowserWindow} */\ndescribe('ResizeBrowserWindow', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe(`to()`, () => {\n\n        /** @test {ResizeBrowserWindow.to} */\n        it('allows the actor to change width and height of the browser window', () =>\n            actorCalled('Nick').attemptsTo(\n                ResizeBrowserWindow.to(640, 480),\n                Ensure.that(Window.size(), equals({width: 640, height: 480})),\n                ResizeBrowserWindow.to(1024, 768),\n                Ensure.that(Window.size(), equals({width: 1024, height: 768})),\n            ));\n\n        /** @test {ResizeBrowserWindow.to} */\n        /** @test {ResizeBrowserWindow#toString} */\n        it('produces a sensible description of the interaction being performed', () => {\n            expect(ResizeBrowserWindow.to(640, 480).toString()).equals('#actor sets the size of the browser window to 640 x 480');\n        });\n    });\n\n    describe('toMaximum()', () => {\n\n        /** @test {ResizeBrowserWindow.toMaximum} */\n        it('allows the actor to resize browser window to maximum', () =>\n            actorCalled('Nick').attemptsTo(\n                ResizeBrowserWindow.toMaximum(),\n                TakeNote.of(Window.size()),\n                ResizeBrowserWindow.to(1024, 768),\n                ResizeBrowserWindow.toMaximum(),\n                Ensure.that(Note.of(Window.size()), equals(Window.size())),\n            ));\n\n        /** @test {ResizeBrowserWindow.toMaximum} */\n        /** @test {ResizeBrowserWindow#toString} */\n        it('produces a sensible description of the interaction being performed', () => {\n            expect(ResizeBrowserWindow.toMaximum().toString()).equals('#actor maximises the browser window');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1005,
    "kind": "test",
    "name": "describe146",
    "testId": 146,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146",
    "access": null,
    "description": "ResizeBrowserWindow",
    "lineNumber": 10,
    "testTargets": [
      "ResizeBrowserWindow"
    ]
  },
  {
    "__docId__": 1006,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe147",
    "access": null,
    "lineNumber": 14
  },
  {
    "__docId__": 1007,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe147.it148",
    "access": null,
    "description": "allows the actor to change width and height of the browser window",
    "lineNumber": 17,
    "testTargets": [
      "ResizeBrowserWindow.to"
    ]
  },
  {
    "__docId__": 1008,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe147.it149",
    "access": null,
    "description": "produces a sensible description of the interaction being performed",
    "lineNumber": 27,
    "testTargets": [
      "ResizeBrowserWindow#toString"
    ]
  },
  {
    "__docId__": 1009,
    "kind": "test",
    "name": "describe150",
    "testId": 150,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe150",
    "access": null,
    "description": "toMaximum()",
    "lineNumber": 32
  },
  {
    "__docId__": 1010,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe150",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe150.it151",
    "access": null,
    "description": "allows the actor to resize browser window to maximum",
    "lineNumber": 35,
    "testTargets": [
      "ResizeBrowserWindow.toMaximum"
    ]
  },
  {
    "__docId__": 1011,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe150",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/ResizeBrowserWindow.spec.ts~describe146.describe150.it152",
    "access": null,
    "description": "produces a sensible description of the interaction being performed",
    "lineNumber": 46,
    "testTargets": [
      "ResizeBrowserWindow#toString"
    ]
  },
  {
    "__docId__": 1012,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Scroll.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, isGreaterThan, isLessThan } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { ExecuteScript, LastScriptExecution, Navigate, Scroll, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Scroll} */\ndescribe('Scroll', function () {\n\n    const aLongSpell = pageFromTemplate(`\n        <html>\n            <body style=\"margin:0; padding:0 0 1024px 0;\">\n                <input type=\"submit\" value=\"Cast!\" id=\"cast\" style=\"margin-top:10000px;\" />\n            </body>\n        </html>\n    `);\n\n    const Page = {\n        Execute_Button: Target.the('\"Cast!\" button').located(by.id('cast')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Scroll.to} */\n    it('allows the actor to scroll to a given target so that it appears in the viewport', () => actorCalled('Gandalf').attemptsTo(\n        Navigate.to(aLongSpell),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isGreaterThan(9000)),\n\n        Scroll.to(Page.Execute_Button),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isLessThan(9000)),\n    ));\n\n    /** @test {Scroll.to} */\n    /** @test {Scroll#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Scroll.to(Page.Execute_Button).toString())\n            .to.equal(`#actor scrolls to the \"Cast!\" button`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Scroll.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1013,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe153",
    "access": null,
    "description": "Scroll",
    "lineNumber": 13,
    "testTargets": [
      "Scroll"
    ]
  },
  {
    "__docId__": 1014,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe153.it154",
    "access": null,
    "description": "allows the actor to scroll to a given target so that it appears in the viewport",
    "lineNumber": 30,
    "testTargets": [
      "Scroll.to"
    ]
  },
  {
    "__docId__": 1015,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe153",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe153.it155",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 44,
    "testTargets": [
      "Scroll#toString"
    ]
  },
  {
    "__docId__": 1016,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Select.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { LocalServer, StartLocalServer, StopLocalServer } from '@serenity-js/local-server';\nimport { by } from 'protractor';\n\nimport { Select, Selected, Target, Text } from '../../../src';\nimport { UIActors } from '../../UIActors';\nimport { CreatePage, DeletePage, VisitPage } from '../../pages';\nimport { ChangeApiConfig } from '@serenity-js/rest';\n\n/** @test {Select} */\ndescribe('Select', () => {\n\n    const pageWithSingleSelect = `\n            <html>\n                <body>\n                <form>\n                    <fieldset name='options'>\n                        <legend>Working with single option</legend>\n                        <label for='single-option-select'>\n                            Country\n                            <select id='single-option-select'>\n                                <option value='UK'>United Kingdom</option>\n                                <option value='PL'>Poland</option>\n                                <option value='DE'>Germany</option>\n                                <option value='FR'>France</option>\n                            </select>\n                        </label>\n                    </fieldset>\n                    <p id='country-of-interest-code'>PL</p>\n                    <p id='country-of-interest-name'>Poland</p>\n                </form>\n                </body>\n            </html>\n        `;\n\n    class SingleSelectPage {\n        static pageName = 'single-select';\n        static selector = Target.the('country selector').located(by.id('single-option-select'));\n        static countryCode = Target.the('country code').located(by.id('country-of-interest-code'));\n        static countryName = Target.the('country name').located(by.id('country-of-interest-name'));\n    }\n\n    const pageWithMultiSelect = `\n            <html>\n                <body>\n                <form>\n                    <fieldset name='options'>\n                        <legend>Working with options</legend>\n                        <label for='multi-option-select'>\n                            Country\n                            <select multiple id='multi-option-select'>\n                                <option value='UK'>United Kingdom</option>\n                                <option value='PL'>Poland</option>\n                                <option value='DE'>Germany</option>\n                                <option value='FR'>France</option>\n                            </select>\n                        </label>\n                    </fieldset>\n                </form>\n                <ul id='country-of-interest-codes'>\n                    <li>PL</li>\n                    <li>UK</li>\n                </ul>\n                <ul id='country-of-interest-names'>\n                    <li>Poland</li>\n                    <li>United Kingdom</li>\n                </ul>\n                <p id='another-country-of-interest-code'>DE</p>\n                <p id='another-country-of-interest-name'>Germany</p>\n                </body>\n            </html>\n        `;\n\n    class MultiSelectPage {\n        static pageName = 'multi-select';\n        static selector = Target.the('country selector').located(by.id('multi-option-select'));\n        static countryCodes = Target.all('country codes').located(by.css('#country-of-interest-codes li'));\n        static countryNames = Target.all('country names').located(by.css('#country-of-interest-names li'));\n        static anotherCountryCode = Target.the('another country code').located(by.css('#another-country-of-interest-code'));\n        static anotherCountryName = Target.the('another country name').located(by.css('#another-country-of-interest-name'));\n    }\n\n    before(() => engage(new UIActors()));\n\n    before(() =>\n        actorCalled('Nick').attemptsTo(\n            StartLocalServer.onRandomPort(),\n            ChangeApiConfig.setUrlTo(LocalServer.url()),\n            CreatePage(SingleSelectPage.pageName, pageWithSingleSelect),\n            CreatePage(MultiSelectPage.pageName, pageWithMultiSelect),\n        )\n    );\n\n    after(() =>\n        actorCalled('Nick').attemptsTo(\n            DeletePage(SingleSelectPage.pageName),\n            DeletePage(MultiSelectPage.pageName),\n            StopLocalServer.ifRunning(),\n        )\n    )\n\n    describe('when working with single-option selects', () => {\n\n        describe('Select.value()', () => {\n\n            /** @test {Select.value} */\n            /** @test {Selected.valueOf} */\n            it('should select a single option by its static value', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(SingleSelectPage.pageName),\n                    Select.value('FR').from(SingleSelectPage.selector),\n                    Ensure.that(Selected.valueOf(SingleSelectPage.selector), equals('FR'))\n                ));\n\n            /** @test {Select.value} */\n            /** @test {Selected.valueOf} */\n            it('should select a single option by its Answerable value', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(SingleSelectPage.pageName),\n                    Select.value(Text.of(SingleSelectPage.countryCode)).from(SingleSelectPage.selector),\n                    Ensure.that(Selected.valueOf(SingleSelectPage.selector), equals('PL'))\n                ));\n        });\n\n        describe('Select.option()', () => {\n\n            /** @test {Select.option} */\n            /** @test {Selected.optionIn} */\n            it('should select a single option by its static pageName', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(SingleSelectPage.pageName),\n                    Select.option('France').from(SingleSelectPage.selector),\n                    Ensure.that(Selected.optionIn(SingleSelectPage.selector), equals('France'))\n                ));\n\n            /** @test {Select.option} */\n            /** @test {Selected.optionIn} */\n            it('should select a single option by its Answerable name', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(SingleSelectPage.pageName),\n                    Select.option(Text.of(SingleSelectPage.countryName)).from(SingleSelectPage.selector),\n                    Ensure.that(Selected.optionIn(SingleSelectPage.selector), equals('Poland'))\n                ));\n        });\n    });\n\n    describe('when working with multi-option selects', () => {\n\n        describe('Select.values()', () => {\n\n            /** @test {Select.values} */\n            /** @test {Selected.valuesOf} */\n            it('should select multiple options by their static value', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.values('PL', 'DE').from(MultiSelectPage.selector),\n                    Ensure.that(Selected.valuesOf(MultiSelectPage.selector), equals(['PL', 'DE']))\n                ));\n\n            /** @test {Select.values} */\n            /** @test {Selected.valuesOf} */\n            it('should select multiple options by their Answerable value', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.values(Text.ofAll(MultiSelectPage.countryCodes)).from(MultiSelectPage.selector),\n                    Ensure.that(Selected.valuesOf(MultiSelectPage.selector), equals(['UK', 'PL']))\n                ));\n\n            /** @test {Select.values} */\n            /** @test {Selected.valuesOf} */\n            it('should concatenate option values from several Answerables', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.values(\n                        Text.ofAll(MultiSelectPage.countryCodes),\n                        Text.of(MultiSelectPage.anotherCountryCode),\n                        'FR'\n                    ).from(MultiSelectPage.selector),\n                    Ensure.that(Selected.valuesOf(MultiSelectPage.selector), equals(['UK', 'PL', 'DE', 'FR']))\n                ));\n\n            /** @test {Select.values} */\n            /** @test {Selected.valuesOf} */\n            it('should concatenate option values from several static values', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.values('UK', 'PL').from(MultiSelectPage.selector),\n                    Ensure.that(Selected.valuesOf(MultiSelectPage.selector), equals(['UK', 'PL']))\n                ));\n        });\n\n        describe('Select.options()', () => {\n\n            /** @test {Select.options} */\n            /** @test {Selected.optionsIn} */\n            it('should select multiple options by their static pageName', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.options(['Poland', 'France']).from(MultiSelectPage.selector),\n                    Ensure.that(Selected.optionsIn(MultiSelectPage.selector), equals(['Poland', 'France']))));\n\n            /** @test {Select.options} */\n            /** @test {Selected.optionsIn} */\n            it('should select multiple options by their Answerable name', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.options(Text.ofAll(MultiSelectPage.countryNames)).from(MultiSelectPage.selector),\n                    Ensure.that(Selected.optionsIn(MultiSelectPage.selector), equals(['United Kingdom', 'Poland']))\n                ));\n\n            /** @test {Select.options} */\n            /** @test {Selected.optionsIn} */\n            it('should concatenate option values from several Answerables', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.options(\n                        Text.ofAll(MultiSelectPage.countryNames),\n                        Text.of(MultiSelectPage.anotherCountryName),\n                        'France'\n                    ).from(MultiSelectPage.selector),\n                    Ensure.that(Selected.optionsIn(MultiSelectPage.selector), equals(['United Kingdom', 'Poland', 'Germany', 'France']))\n                ));\n\n            /** @test {Select.options} */\n            /** @test {Selected.optionsIn} */\n            it('should concatenate option values from several static values', () =>\n                actorCalled('Nick').attemptsTo(\n                    VisitPage(MultiSelectPage.pageName),\n                    Select.options(['Poland', 'Germany'], 'France').from(MultiSelectPage.selector),\n                    Ensure.that(Selected.optionsIn(MultiSelectPage.selector), equals(['Poland', 'Germany', 'France']))\n                ));\n        });\n    });\n\n    describe('toString()', () => {\n\n        /** @test {Select.value} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Select.value()', () => {\n            expect(Select.value('FR').from(SingleSelectPage.selector).toString())\n                .to.equal(`#actor selects value 'FR' from the country selector`);\n        });\n\n        /** @test {Selected.valueOf} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Selected.valueOf', () => {\n            expect(Selected.valueOf(SingleSelectPage.selector).toString())\n                .to.equal(`value selected in the country selector`);\n        });\n\n        /** @test {Select.option} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Select.option()', () => {\n            expect(Select.option('France').from(SingleSelectPage.selector).toString())\n                .to.equal(`#actor selects 'France' from the country selector`);\n        });\n\n        /** @test {Selected.optionIn} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Selected.optionIn()', () => {\n            expect(Selected.optionIn(SingleSelectPage.selector).toString())\n                .to.equal(`option selected in the country selector`);\n        });\n\n        /** @test {Select.values} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Select.values()', () => {\n            expect(Select.values(['PL', 'DE'], 'FR').from(MultiSelectPage.selector).toString())\n                .to.equal(`#actor selects values 'PL', 'DE' and 'FR' from the country selector`);\n        });\n\n        /** @test {Selected.valuesOf} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Select.valuesOf()', () => {\n            expect(Selected.valuesOf(MultiSelectPage.selector).toString())\n                .to.equal(`values selected in the country selector`);\n        });\n\n        /** @test {Select.options} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Select.options()', () => {\n            expect(\n                Select.options(\n                    ['Poland', 'Germany' ],\n                    'France',\n                    Text.of(MultiSelectPage.anotherCountryName)\n                ).from(MultiSelectPage.selector).toString()\n            ).to.equal(`#actor selects 'Poland', 'Germany', 'France' and the text of the another country name from the country selector`);\n        });\n\n        /** @test {Selected.optionsIn} */\n        /** @test {Select#toString} */\n        it('provides a sensible description of Selected.optionsIn()', () => {\n            expect(Selected.optionsIn(MultiSelectPage.selector).toString())\n                .to.equal(`options selected in the country selector`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Select.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1017,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "spec/screenplay/interactions/Select.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156",
    "access": null,
    "description": "Select",
    "lineNumber": 15,
    "testTargets": [
      "Select"
    ]
  },
  {
    "__docId__": 1018,
    "kind": "test",
    "name": "describe157",
    "testId": 157,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157",
    "access": null,
    "description": "when working with single-option selects",
    "lineNumber": 230
  },
  {
    "__docId__": 1019,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe158",
    "access": null,
    "description": "Select.value()",
    "lineNumber": 232
  },
  {
    "__docId__": 1020,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe158",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe158.it159",
    "access": null,
    "description": "should select a single option by its static value",
    "lineNumber": 236,
    "testTargets": [
      "Selected.valueOf"
    ]
  },
  {
    "__docId__": 1021,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe158",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe158.it160",
    "access": null,
    "description": "should select a single option by its Answerable value",
    "lineNumber": 245,
    "testTargets": [
      "Selected.valueOf"
    ]
  },
  {
    "__docId__": 1022,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe161",
    "access": null,
    "description": "Select.option()",
    "lineNumber": 253
  },
  {
    "__docId__": 1023,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe161",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe161.it162",
    "access": null,
    "description": "should select a single option by its static pageName",
    "lineNumber": 257,
    "testTargets": [
      "Selected.optionIn"
    ]
  },
  {
    "__docId__": 1024,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe161",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe157.describe161.it163",
    "access": null,
    "description": "should select a single option by its Answerable name",
    "lineNumber": 266,
    "testTargets": [
      "Selected.optionIn"
    ]
  },
  {
    "__docId__": 1025,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164",
    "access": null,
    "description": "when working with multi-option selects",
    "lineNumber": 275
  },
  {
    "__docId__": 1026,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165",
    "access": null,
    "description": "Select.values()",
    "lineNumber": 277
  },
  {
    "__docId__": 1027,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165.it166",
    "access": null,
    "description": "should select multiple options by their static value",
    "lineNumber": 281,
    "testTargets": [
      "Selected.valuesOf"
    ]
  },
  {
    "__docId__": 1028,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165.it167",
    "access": null,
    "description": "should select multiple options by their Answerable value",
    "lineNumber": 290,
    "testTargets": [
      "Selected.valuesOf"
    ]
  },
  {
    "__docId__": 1029,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165.it168",
    "access": null,
    "description": "should concatenate option values from several Answerables",
    "lineNumber": 299,
    "testTargets": [
      "Selected.valuesOf"
    ]
  },
  {
    "__docId__": 1030,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe165.it169",
    "access": null,
    "description": "should concatenate option values from several static values",
    "lineNumber": 312,
    "testTargets": [
      "Selected.valuesOf"
    ]
  },
  {
    "__docId__": 1031,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170",
    "access": null,
    "description": "Select.options()",
    "lineNumber": 320
  },
  {
    "__docId__": 1032,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170.it171",
    "access": null,
    "description": "should select multiple options by their static pageName",
    "lineNumber": 324,
    "testTargets": [
      "Selected.optionsIn"
    ]
  },
  {
    "__docId__": 1033,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170.it172",
    "access": null,
    "description": "should select multiple options by their Answerable name",
    "lineNumber": 332,
    "testTargets": [
      "Selected.optionsIn"
    ]
  },
  {
    "__docId__": 1034,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170.it173",
    "access": null,
    "description": "should concatenate option values from several Answerables",
    "lineNumber": 341,
    "testTargets": [
      "Selected.optionsIn"
    ]
  },
  {
    "__docId__": 1035,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe164.describe170.it174",
    "access": null,
    "description": "should concatenate option values from several static values",
    "lineNumber": 354,
    "testTargets": [
      "Selected.optionsIn"
    ]
  },
  {
    "__docId__": 1036,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "access": null,
    "description": "toString()",
    "lineNumber": 363
  },
  {
    "__docId__": 1037,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it176",
    "access": null,
    "description": "provides a sensible description of Select.value()",
    "lineNumber": 367,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1038,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it177",
    "access": null,
    "description": "provides a sensible description of Selected.valueOf",
    "lineNumber": 374,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1039,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it178",
    "access": null,
    "description": "provides a sensible description of Select.option()",
    "lineNumber": 381,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1040,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it179",
    "access": null,
    "description": "provides a sensible description of Selected.optionIn()",
    "lineNumber": 388,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1041,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it180",
    "access": null,
    "description": "provides a sensible description of Select.values()",
    "lineNumber": 395,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1042,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it181",
    "access": null,
    "description": "provides a sensible description of Select.valuesOf()",
    "lineNumber": 402,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1043,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it182",
    "access": null,
    "description": "provides a sensible description of Select.options()",
    "lineNumber": 409,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1044,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Select.spec.ts~describe156.describe175.it183",
    "access": null,
    "description": "provides a sensible description of Selected.optionsIn()",
    "lineNumber": 421,
    "testTargets": [
      "Select#toString"
    ]
  },
  {
    "__docId__": 1045,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Switch.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, LogicError } from '@serenity-js/core';\nimport { by } from 'protractor';\nimport { error } from 'selenium-webdriver';\n\nimport { Click, Close, Navigate, Switch, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Switch} */\ndescribe('Switch', () => {\n\n    const\n        h1 = Target.the('header').located(by.css('h1')),\n        iframe = Target.the('test iframe').located(by.tagName('iframe')),\n        newTabLink = Target.the('link').located(by.linkText('open new tab'));\n\n    const page =\n        (header: string) =>\n            pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1>${ header }</h1>\n                    </body>\n                </html>\n            `);\n\n    const pageWithIframe =\n        (header: string, iframeSrc: string) =>\n            pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1>${ header }</h1>\n                        <iframe name=\"example-iframe\" src=\"${ iframeSrc.replace(/\"/g, '&quot;') }\" />\n                    </body>\n                </html>\n            `);\n\n    const pageWithLinkToNewTab =\n        (header: string) =>\n            pageFromTemplate(`\n                <html>\n                    <body>\n                        <h1>${ header }</h1>\n                        <a href=\"javascript:void(0)\" onclick=\"popup()\">open new tab</a>\n                        <script>\n                            function popup() {\n                                var w = window.open('', 'new-tab');\n                                w.document.write('<h1>New tab</h1>');\n                                w.document.close();\n                            }\n                        </script>\n                    </body>\n                </html>\n            `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('when working with frames', () => {\n\n        describe('toFrame()', () => {\n\n            /** @test {Switch.toFrame} */\n            it(`should complain if there's no frame to switch to`, () =>\n                expect(actorCalled('Franceska').attemptsTo(\n                    Navigate.to(page('main page')),\n                    Switch.toFrame(0),\n                )).to.be.rejectedWith(error.NoSuchFrameError));\n\n            /** @test {Switch.toFrame} */\n            it('should switch to an iframe identified by Question<ElementFinder>', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('main page', page('an iframe'))),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('an iframe')),\n                ));\n\n            /** @test {Switch.toFrame} */\n            it('should switch to an iframe identified by index', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('main page', page('an iframe'))),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toFrame(0),\n                    Ensure.that(Text.of(h1), equals('an iframe')),\n                ));\n\n            /** @test {Switch.toFrame} */\n            it('should switch to an iframe identified by name', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('main page', page('an iframe'))),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toFrame('example-iframe'),\n                    Ensure.that(Text.of(h1), equals('an iframe')),\n                ));\n\n            describe('should provide a sensible description when the iframe', () => {\n\n                /** @test {Switch.toFrame} */\n                /** @test {Switch#toString} */\n                it('is specified by Question<ElementFinder>', () => {\n                    expect(Switch.toFrame(iframe).toString()).to.equal('#actor switches to frame: the test iframe')\n                });\n\n                /** @test {Switch.toFrame} */\n                /** @test {Switch#toString} */\n                it('is specified by index number', () => {\n                    expect(Switch.toFrame(1).toString()).to.equal('#actor switches to frame: 1')\n                });\n\n                /** @test {Switch.toFrame} */\n                /** @test {Switch#toString} */\n                it('is specified by name', () => {\n                    expect(Switch.toFrame('example-iframe').toString()).to.equal('#actor switches to frame: example-iframe')\n                });\n            });\n        });\n\n        describe('toParentFrame()', () => {\n\n            /** @test {Switch.toParentFrame} */\n            it('should not switch the frame if there are no parent frames', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(page('main page')),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toParentFrame(),\n                    Ensure.that(Text.of(h1), equals('main page')),\n                ));\n\n            /** @test {Switch.toParentFrame} */\n            it('should switch to the parent hosting an iframe', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('main page', page('an iframe'))),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('an iframe')),\n\n                    Switch.toParentFrame(),\n                    Ensure.that(Text.of(h1), equals('main page')),\n                ));\n\n            /** @test {Switch.toFrame} */\n            /** @test {Switch.toParentFrame} */\n            it('should support nested frames', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('Level 0', pageWithIframe('Level 1', page('Level 2')))),\n                    Ensure.that(Text.of(h1), equals('Level 0')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('Level 1')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('Level 2')),\n\n                    Switch.toParentFrame(),\n                    Ensure.that(Text.of(h1), equals('Level 1')),\n                ));\n\n            /** @test {Switch.toParentFrame} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toParentFrame().toString()).to.equal('#actor switches to parent frame')\n            });\n        });\n\n        describe('toDefaultContent()', () => {\n\n            /** @test {Switch.toDefaultContent} */\n            it('should not switch the frame if there are no parent frames', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(page('main page')),\n                    Ensure.that(Text.of(h1), equals('main page')),\n\n                    Switch.toDefaultContent(),\n                    Ensure.that(Text.of(h1), equals('main page')),\n                ));\n\n            /** @test {Switch.toFrame} */\n            /** @test {Switch.toDefaultContent} */\n            it('should support nested frames', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('Level 0', pageWithIframe('Level 1', page('Level 2')))),\n                    Ensure.that(Text.of(h1), equals('Level 0')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('Level 1')),\n\n                    Switch.toFrame(iframe),\n                    Ensure.that(Text.of(h1), equals('Level 2')),\n\n                    Switch.toDefaultContent(),\n                    Ensure.that(Text.of(h1), equals('Level 0')),\n                ));\n\n            /** @test {Switch.toDefaultContent} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toDefaultContent().toString()).to.equal('#actor switches to default content')\n            });\n        });\n\n        describe('toFrame().and()', () => {\n\n            /** @test {Switch.toFrame} */\n            it('should perform any activities in the context of the frame it switched to', () =>\n                actorCalled('Franceska').attemptsTo(\n                    Navigate.to(pageWithIframe('Level 0', pageWithIframe('Level 1', page('Level 2')))),\n                    Ensure.that(Text.of(h1), equals('Level 0')),\n\n                    Switch.toFrame(iframe).and(\n                        Switch.toFrame(iframe).and(\n                            Ensure.that(Text.of(h1), equals('Level 2')),\n                        ),\n                        Ensure.that(Text.of(h1), equals('Level 1')),\n                    ),\n                    Ensure.that(Text.of(h1), equals('Level 0')),\n                ));\n\n            /** @test {Switch.toFrame} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toFrame(0).and().toString()).to.equal('#actor switches to frame: 0')\n            });\n        });\n    });\n\n    describe('when working with windows', () => {\n\n        afterEach(() =>\n            actorCalled('Ventana').attemptsTo(\n                Close.anyNewWindows(),\n            ));\n\n        describe('toWindow()', () => {\n\n            /** @test {Switch.toWindow} */\n            it('should switch to a window identified by its index', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toWindow(1),\n                    Ensure.that(Text.of(h1), equals('New tab')),\n                ));\n\n            /** @test {Switch.toWindow} */\n            it('should switch to a window identified by its name', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toWindow('new-tab'),\n                    Ensure.that(Text.of(h1), equals('New tab')),\n                ));\n\n            /** @test {Switch.toWindow} */\n            it(`should complain if the desired window doesn't exit`, () =>\n                expect(actorCalled('Ventana').attemptsTo(\n                    Navigate.to(page('Main window')),\n\n                    Switch.toWindow(10),\n                )).to.be.rejectedWith(LogicError, `Window 10 doesn't exist`));\n\n            describe('should provide a sensible description when the window', () => {\n\n                /** @test {Switch.toWindow} */\n                /** @test {Switch#toString} */\n                it('is specified by its index', () => {\n                    expect(Switch.toWindow(1).toString()).to.equal('#actor switches to window: 1')\n                });\n\n                /** @test {Switch.toWindow} */\n                /** @test {Switch#toString} */\n                it('is specified by name', () => {\n                    expect(Switch.toWindow('example-window').toString()).to.equal('#actor switches to window: example-window')\n                });\n            });\n        });\n\n        describe('toWindow().and()', () => {\n\n            /** @test {Switch.toWindow} */\n            it('should perform any activities in the context of the window it switched to', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toWindow('new-tab').and(\n                        Ensure.that(Text.of(h1), equals('New tab')),\n                    ),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                ));\n\n            /** @test {Switch.toWindow} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toWindow('new-tab').and().toString()).to.equal('#actor switches to window: new-tab')\n            });\n        });\n\n        describe(`toNewWindow()`, () => {\n\n            /** @test {Switch.toNewWindow} */\n            it(`should complain if no new window has been opened`, () =>\n                expect(actorCalled('Ventana').attemptsTo(\n                    Navigate.to(page('Main window')),\n\n                    Switch.toNewWindow(),\n                )).to.be.rejectedWith(LogicError, `No new window has been opened to switch to`));\n\n            /** @test {Switch.toNewWindow} */\n            it('should switch to a newly opened window', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toNewWindow(),\n                    Ensure.that(Text.of(h1), equals('New tab')),\n                ));\n\n            /** @test {Switch.toNewWindow} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toNewWindow().toString()).to.equal('#actor switches to the new browser window')\n            });\n        });\n\n        describe('toNewWindow().and()', () => {\n\n            /** @test {Switch.toNewWindow} */\n            it('should perform any activities in the context of the new window it switched to', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toNewWindow().and(\n                        Ensure.that(Text.of(h1), equals('New tab')),\n                    ),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                ));\n\n            /** @test {Switch.toNewWindow} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toNewWindow().and().toString()).to.equal('#actor switches to the new window')\n            });\n        });\n\n        describe(`toOriginalWindow()`, function () {\n\n            /** @test {Switch.toOriginalWindow} */\n            it(`should not complain if it's already in the original window`, () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(page('Main window')),\n\n                    Switch.toOriginalWindow(),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                ));\n\n            /** @test {Switch.toOriginalWindow} */\n            it('should switch back from a newly opened window', () =>\n                actorCalled('Ventana').attemptsTo(\n                    Navigate.to(pageWithLinkToNewTab('Main window')),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                    Click.on(newTabLink),\n\n                    Switch.toNewWindow(),\n                    Ensure.that(Text.of(h1), equals('New tab')),\n\n                    Switch.toOriginalWindow(),\n                    Ensure.that(Text.of(h1), equals('Main window')),\n                ));\n\n            /** @test {Switch.toOriginalWindow} */\n            /** @test {Switch#toString} */\n            it('should provide a sensible description of the interaction being performed', () => {\n                expect(Switch.toOriginalWindow().toString()).to.equal('#actor switches back to the original browser window')\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Switch.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1046,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184",
    "access": null,
    "description": "Switch",
    "lineNumber": 14,
    "testTargets": [
      "Switch"
    ]
  },
  {
    "__docId__": 1047,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185",
    "access": null,
    "description": "when working with frames",
    "lineNumber": 62
  },
  {
    "__docId__": 1048,
    "kind": "test",
    "name": "describe186",
    "testId": 186,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "access": null,
    "description": "toFrame()",
    "lineNumber": 64
  },
  {
    "__docId__": 1049,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.it187",
    "access": null,
    "lineNumber": 67,
    "testTargets": [
      "Switch.toFrame"
    ]
  },
  {
    "__docId__": 1050,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.it188",
    "access": null,
    "description": "should switch to an iframe identified by Question<ElementFinder>",
    "lineNumber": 74,
    "testTargets": [
      "Switch.toFrame"
    ]
  },
  {
    "__docId__": 1051,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.it189",
    "access": null,
    "description": "should switch to an iframe identified by index",
    "lineNumber": 84,
    "testTargets": [
      "Switch.toFrame"
    ]
  },
  {
    "__docId__": 1052,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.it190",
    "access": null,
    "description": "should switch to an iframe identified by name",
    "lineNumber": 94,
    "testTargets": [
      "Switch.toFrame"
    ]
  },
  {
    "__docId__": 1053,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191",
    "access": null,
    "description": "should provide a sensible description when the iframe",
    "lineNumber": 103
  },
  {
    "__docId__": 1054,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191.it192",
    "access": null,
    "description": "is specified by Question<ElementFinder>",
    "lineNumber": 107,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1055,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191.it193",
    "access": null,
    "description": "is specified by index number",
    "lineNumber": 113,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1056,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe186.describe191.it194",
    "access": null,
    "description": "is specified by name",
    "lineNumber": 119,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1057,
    "kind": "test",
    "name": "describe195",
    "testId": 195,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195",
    "access": null,
    "description": "toParentFrame()",
    "lineNumber": 125
  },
  {
    "__docId__": 1058,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195.it196",
    "access": null,
    "description": "should not switch the frame if there are no parent frames",
    "lineNumber": 128,
    "testTargets": [
      "Switch.toParentFrame"
    ]
  },
  {
    "__docId__": 1059,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195.it197",
    "access": null,
    "description": "should switch to the parent hosting an iframe",
    "lineNumber": 138,
    "testTargets": [
      "Switch.toParentFrame"
    ]
  },
  {
    "__docId__": 1060,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195.it198",
    "access": null,
    "description": "should support nested frames",
    "lineNumber": 152,
    "testTargets": [
      "Switch.toParentFrame"
    ]
  },
  {
    "__docId__": 1061,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe195.it199",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 169,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1062,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200",
    "access": null,
    "description": "toDefaultContent()",
    "lineNumber": 174
  },
  {
    "__docId__": 1063,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200.it201",
    "access": null,
    "description": "should not switch the frame if there are no parent frames",
    "lineNumber": 177,
    "testTargets": [
      "Switch.toDefaultContent"
    ]
  },
  {
    "__docId__": 1064,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200.it202",
    "access": null,
    "description": "should support nested frames",
    "lineNumber": 188,
    "testTargets": [
      "Switch.toDefaultContent"
    ]
  },
  {
    "__docId__": 1065,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe200.it203",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 205,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1066,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe204",
    "access": null,
    "description": "toFrame().and()",
    "lineNumber": 210
  },
  {
    "__docId__": 1067,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe204",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe204.it205",
    "access": null,
    "description": "should perform any activities in the context of the frame it switched to",
    "lineNumber": 213,
    "testTargets": [
      "Switch.toFrame"
    ]
  },
  {
    "__docId__": 1068,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe204",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe185.describe204.it206",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 229,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1069,
    "kind": "test",
    "name": "describe207",
    "testId": 207,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "access": null,
    "description": "when working with windows",
    "lineNumber": 235
  },
  {
    "__docId__": 1070,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208",
    "access": null,
    "description": "toWindow()",
    "lineNumber": 242
  },
  {
    "__docId__": 1071,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.it209",
    "access": null,
    "description": "should switch to a window identified by its index",
    "lineNumber": 245,
    "testTargets": [
      "Switch.toWindow"
    ]
  },
  {
    "__docId__": 1072,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.it210",
    "access": null,
    "description": "should switch to a window identified by its name",
    "lineNumber": 256,
    "testTargets": [
      "Switch.toWindow"
    ]
  },
  {
    "__docId__": 1073,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.it211",
    "access": null,
    "lineNumber": 267,
    "testTargets": [
      "Switch.toWindow"
    ]
  },
  {
    "__docId__": 1074,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.describe212",
    "access": null,
    "description": "should provide a sensible description when the window",
    "lineNumber": 274
  },
  {
    "__docId__": 1075,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.describe212.it213",
    "access": null,
    "description": "is specified by its index",
    "lineNumber": 278,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1076,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe208.describe212.it214",
    "access": null,
    "description": "is specified by name",
    "lineNumber": 284,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1077,
    "kind": "test",
    "name": "describe215",
    "testId": 215,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe215",
    "access": null,
    "description": "toWindow().and()",
    "lineNumber": 290
  },
  {
    "__docId__": 1078,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe215",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe215.it216",
    "access": null,
    "description": "should perform any activities in the context of the window it switched to",
    "lineNumber": 293,
    "testTargets": [
      "Switch.toWindow"
    ]
  },
  {
    "__docId__": 1079,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe215",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe215.it217",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 307,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1080,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218",
    "access": null,
    "lineNumber": 312
  },
  {
    "__docId__": 1081,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218.it219",
    "access": null,
    "lineNumber": 315,
    "testTargets": [
      "Switch.toNewWindow"
    ]
  },
  {
    "__docId__": 1082,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218.it220",
    "access": null,
    "description": "should switch to a newly opened window",
    "lineNumber": 323,
    "testTargets": [
      "Switch.toNewWindow"
    ]
  },
  {
    "__docId__": 1083,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe218.it221",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 335,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1084,
    "kind": "test",
    "name": "describe222",
    "testId": 222,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe222",
    "access": null,
    "description": "toNewWindow().and()",
    "lineNumber": 340
  },
  {
    "__docId__": 1085,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe222",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe222.it223",
    "access": null,
    "description": "should perform any activities in the context of the new window it switched to",
    "lineNumber": 343,
    "testTargets": [
      "Switch.toNewWindow"
    ]
  },
  {
    "__docId__": 1086,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe222",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe222.it224",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 357,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1087,
    "kind": "test",
    "name": "describe225",
    "testId": 225,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225",
    "access": null,
    "lineNumber": 362
  },
  {
    "__docId__": 1088,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225.it226",
    "access": null,
    "lineNumber": 365,
    "testTargets": [
      "Switch.toOriginalWindow"
    ]
  },
  {
    "__docId__": 1089,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225.it227",
    "access": null,
    "description": "should switch back from a newly opened window",
    "lineNumber": 374,
    "testTargets": [
      "Switch.toOriginalWindow"
    ]
  },
  {
    "__docId__": 1090,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/Switch.spec.ts~describe184.describe207.describe225.it228",
    "access": null,
    "description": "should provide a sensible description of the interaction being performed",
    "lineNumber": 389,
    "testTargets": [
      "Switch#toString"
    ]
  },
  {
    "__docId__": 1091,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { actorCalled, configure, engage } from '@serenity-js/core';\nimport { ActivityRelatedArtifactGenerated } from '@serenity-js/core/lib/events';\n\nimport { Navigate, TakeScreenshot } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {TakeScreenshot} */\ndescribe('TakeScreenshot', () => {\n\n    let recorder: EventRecorder;\n\n    beforeEach(() => {\n        recorder = new EventRecorder();\n\n        configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n    });\n\n    const page = pageFromTemplate(`\n            <html>\n                <body>\n                    <form>\n                        <input type=\"text\" name=\"text\" />\n                    </form>\n                </body>\n            </html>\n        `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {TakeScreenshot.of} */\n    it('allows the actor to take a screenshot with an arbitrary name', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(page),\n        TakeScreenshot.of('the page'),\n    ).then(() => {\n        PickEvent.from(recorder.events)\n            .next(ActivityRelatedArtifactGenerated, (e: ActivityRelatedArtifactGenerated) => {\n                expect(e.name.value).to.equal('the page');\n            });\n    }));\n\n    /** @test {TakeScreenshot.of} */\n    /** @test {TakeScreenshot#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(TakeScreenshot.of('the page').toString()).to.equal(`#actor takes a screenshot of 'the page'`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1092,
    "kind": "test",
    "name": "describe229",
    "testId": 229,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe229",
    "access": null,
    "description": "TakeScreenshot",
    "lineNumber": 12,
    "testTargets": [
      "TakeScreenshot"
    ]
  },
  {
    "__docId__": 1093,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe229",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe229.it230",
    "access": null,
    "description": "allows the actor to take a screenshot with an arbitrary name",
    "lineNumber": 38,
    "testTargets": [
      "TakeScreenshot.of"
    ]
  },
  {
    "__docId__": 1094,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe229",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/TakeScreenshot.spec.ts~describe229.it231",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 50,
    "testTargets": [
      "TakeScreenshot#toString"
    ]
  },
  {
    "__docId__": 1095,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/UseAngular.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals, isTrue } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question } from '@serenity-js/core';\n\nimport { protractor } from 'protractor';\nimport { UseAngular } from '../../../src';\nimport { promiseOf } from '../../../src/promiseOf';\nimport { UIActors } from '../../UIActors';\n\n/** @test {UseAngular} */\ndescribe('UseAngular', function () {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('synchronisation', () => {\n\n        afterEach(() => protractor.browser.waitForAngularEnabled(false));    // same as protractor.conf.js\n\n        const IsSynchronisationEnabled = () => Question.about('angular synchronisation',\n                actor => promiseOf(protractor.browser.waitForAngularEnabled()),\n        );\n\n        describe('when enabled', () => {\n            beforeEach(() => promiseOf(protractor.browser.waitForAngularEnabled(true)));\n\n            /** @test {UseAngular.disableSynchronisation} */\n            it('can be disabled', () => actorCalled('Bernie').attemptsTo(\n                UseAngular.disableSynchronisation(),\n                Ensure.that(IsSynchronisationEnabled(), equals(false)),\n            ));\n        });\n\n        describe('when disabled', () => {\n            beforeEach(() => promiseOf(protractor.browser.waitForAngularEnabled(false)));\n\n            /** @test {UseAngular.enableSynchronisation} */\n            it('can be enabled', () => actorCalled('Bernie').attemptsTo(\n                UseAngular.enableSynchronisation(),\n                Ensure.that(IsSynchronisationEnabled(), isTrue()),\n            ));\n        });\n\n        /** @test {UseAngular.enableSynchronisation} */\n        /** @test {UseAngular.disableSynchronisation} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(UseAngular.enableSynchronisation().toString())\n                .to.equal(`#actor enables synchronisation with Angular`);\n\n            expect(UseAngular.disableSynchronisation().toString())\n                .to.equal(`#actor disables synchronisation with Angular`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/UseAngular.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1096,
    "kind": "test",
    "name": "describe232",
    "testId": 232,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232",
    "access": null,
    "description": "UseAngular",
    "lineNumber": 13,
    "testTargets": [
      "UseAngular"
    ]
  },
  {
    "__docId__": 1097,
    "kind": "test",
    "name": "describe233",
    "testId": 233,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233",
    "access": null,
    "description": "synchronisation",
    "lineNumber": 17
  },
  {
    "__docId__": 1098,
    "kind": "test",
    "name": "describe234",
    "testId": 234,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe234",
    "access": null,
    "description": "when enabled",
    "lineNumber": 25
  },
  {
    "__docId__": 1099,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe234",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe234.it235",
    "access": null,
    "description": "can be disabled",
    "lineNumber": 29,
    "testTargets": [
      "UseAngular.disableSynchronisation"
    ]
  },
  {
    "__docId__": 1100,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe236",
    "access": null,
    "description": "when disabled",
    "lineNumber": 35
  },
  {
    "__docId__": 1101,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe236",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.describe236.it237",
    "access": null,
    "description": "can be enabled",
    "lineNumber": 39,
    "testTargets": [
      "UseAngular.enableSynchronisation"
    ]
  },
  {
    "__docId__": 1102,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/UseAngular.spec.ts~describe232.describe233.it238",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 47,
    "testTargets": [
      "UseAngular.disableSynchronisation"
    ]
  },
  {
    "__docId__": 1103,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Wait.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, Duration, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Text, Wait } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {Wait} */\ndescribe('Wait', () => {\n\n    const Status = Target.the('header').located(by.id('status'));\n\n    const Test_Page = pageFromTemplate(`\n        <html>\n            <body>\n                <h1 id=\"status\">Loading...</h1>\n                <script>\n                    (function () {\n                        setTimeout(function () {\n                            document.getElementById('status').textContent = 'Ready!'\n                        }, 200);\n                    })();\n                </script>\n            </body>\n        </html>\n    `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('for', () => {\n\n        /** @test {Wait.for} */\n        it('pauses the actor flow for the length of an explicitly-set duration', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.for(Duration.ofMilliseconds(300)),\n\n            Ensure.that(Text.of(Status), equals('Ready!')),\n        ));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.for(Duration.ofMilliseconds(300)).toString())\n                .to.equal(`#actor waits for 300ms`);\n        });\n    });\n\n    describe('until', () => {\n\n        /** @test {Wait.until} */\n        it('pauses the actor flow until the expectation is met', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.until(Text.of(Status), equals('Ready!')),\n\n            Ensure.that(Text.of(Status), equals('Ready!')),\n        ));\n\n        /** @test {Wait.upTo} */\n        /** @test {Wait.until} */\n        it('fails the actor flow when the timeout expires', () => expect(actorCalled('Bernie').attemptsTo(\n            Navigate.to(Test_Page),\n\n            Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(Status), equals('Ready!')),\n        )).to.be.rejected.then((error: AssertionError) => {\n            expect(error).to.be.instanceOf(AssertionError);\n            expect(error.message).to.be.equal(`Waited 10ms for the text of the header to equal 'Ready!'`);\n            expect(error.actual).to.be.equal('Loading...');\n            expect(error.expected).to.be.equal('Ready!');\n\n            expect(error.cause.name).to.equal('TimeoutError');\n            expect(error.cause.message).to.match(/^Wait timed out after.*/);\n        }));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(Status), equals('Ready!')).toString())\n                .to.equal(`#actor waits up to 10ms until the text of the header does equal 'Ready!'`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/Wait.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1104,
    "kind": "test",
    "name": "describe239",
    "testId": 239,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239",
    "access": null,
    "description": "Wait",
    "lineNumber": 13,
    "testTargets": [
      "Wait"
    ]
  },
  {
    "__docId__": 1105,
    "kind": "test",
    "name": "describe240",
    "testId": 240,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe240",
    "access": null,
    "description": "for",
    "lineNumber": 34
  },
  {
    "__docId__": 1106,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe240.it241",
    "access": null,
    "description": "pauses the actor flow for the length of an explicitly-set duration",
    "lineNumber": 37,
    "testTargets": [
      "Wait.for"
    ]
  },
  {
    "__docId__": 1107,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe240.it242",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 46,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 1108,
    "kind": "test",
    "name": "describe243",
    "testId": 243,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243",
    "access": null,
    "description": "until",
    "lineNumber": 52
  },
  {
    "__docId__": 1109,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243.it244",
    "access": null,
    "description": "pauses the actor flow until the expectation is met",
    "lineNumber": 55,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 1110,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243.it245",
    "access": null,
    "description": "fails the actor flow when the timeout expires",
    "lineNumber": 65,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 1111,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe239.describe243.it246",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 80,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 1112,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by } from 'protractor';\nimport { ExecuteScript, Navigate, Target, Value } from '../../../../src';\nimport { pageFromTemplate } from '../../../fixtures';\nimport { UIActors } from '../../../UIActors';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteAsynchronousScript', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = 'Joe';\n                callback();\n            }, 100);\n        `),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a static argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = name;\n                callback();\n            }, 100);\n        `).withArguments(actorCalled('Joe').name),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a promised argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                document.getElementById('name').value = name;\n                callback();\n            }, 100);\n        `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a Target argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var name = arguments[0];\n            var field = arguments[1];\n            var callback = arguments[arguments.length - 1];\n\n            setTimeout(function () {\n                field.value = name;\n                callback();\n            }, 100);\n        `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.async(`\n            arguments[arguments.length - 1]();\n        `).toString()).to.equal(`#actor executes an asynchronous script`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.async(`arguments[arguments.length - 1]();`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes an asynchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('complains if the script has failed', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.async(`\n            var callback = arguments[arguments.length - 1];\n\n            throw new Error(\"something's not quite right here\");\n        `),\n    )).to.be.rejectedWith(Error, `something's not quite right here`));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.async(`arguments[arguments.length - 1]();`),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events).to.have.lengthOf(3);\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'arguments[arguments.length - 1]();',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1113,
    "kind": "test",
    "name": "describe247",
    "testId": 247,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "access": null,
    "description": "ExecuteAsynchronousScript",
    "lineNumber": 16,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 1114,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it248",
    "access": null,
    "description": "allows the actor to execute an asynchronous script",
    "lineNumber": 54,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1115,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it249",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a static argument",
    "lineNumber": 71,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1116,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it250",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a promised argument",
    "lineNumber": 89,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1117,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it251",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a Target argument",
    "lineNumber": 107,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1118,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it252",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 127,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 1119,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it253",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 135,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 1120,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it254",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 145,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1121,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe247.it255",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 157,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 1122,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled, engage, LogicError } from '@serenity-js/core';\n\nimport { by } from 'protractor';\nimport { Browser, ExecuteScript, Navigate, Target, Text } from '../../../../src';\nimport { UIActors } from '../../../UIActors';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteScriptFromUrl', function () {\n\n    this.timeout(10 * 1000);\n\n    const\n        pathToScript = fileUrl(require.resolve('./resources/execute-script-sample.js')),\n        pathToPage = fileUrl(require.resolve('./resources/execute-script-sandbox.html'));\n\n    class Sandbox {\n        static Result = Target.the('sandbox result').located(by.id('result'));\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('allows the actor to execute a script stored at a specific location', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript),\n\n        Ensure.that(Text.of(Sandbox.Result), equals('Script loaded successfully')),\n    ));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script could not be loaded', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript + '.invalid'),\n    )).to.be.rejected\n        .then(error => {\n            expect(error).to.be.instanceOf(LogicError);\n            expect(error.message).to.match(new RegExp(`Couldn't load script from.*?${ pathToScript }.invalid`))\n        })\n        .then(() => actorCalled('Joe').attemptsTo(\n            Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('execute-script-sample.js.invalid - Failed to load resource')))),\n        )));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script has already been loaded', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(pathToPage),\n\n        ExecuteScript.from(pathToScript),\n        ExecuteScript.from(pathToScript),\n    )).to.be.rejectedWith(LogicError, `Script from ${ pathToScript } has already been loaded`));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(ExecuteScript.from(pathToScript).toString())\n            .to.equal(`#actor executes a script from ${ pathToScript }`);\n    });\n\n    // based on https://github.com/sindresorhus/file-url/blob/main/index.js\n    function fileUrl(filePath: string) {\n        let pathName = filePath.replace(/\\\\/g, '/');\n\n        // Windows drive letter must be prefixed with a slash\n        if (pathName[0] !== '/') {\n            pathName = `/${pathName}`;\n        }\n\n        // Escape required characters for path components\n        // See: https://tools.ietf.org/html/rfc3986#section-3.3\n        return encodeURI(`file://${pathName}`).replace(/[?#]/g, encodeURIComponent);\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1123,
    "kind": "test",
    "name": "describe256",
    "testId": 256,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256",
    "access": null,
    "description": "ExecuteScriptFromUrl",
    "lineNumber": 12,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 1124,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256.it257",
    "access": null,
    "description": "allows the actor to execute a script stored at a specific location",
    "lineNumber": 46,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 1125,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256.it258",
    "access": null,
    "description": "complains if the script could not be loaded",
    "lineNumber": 56,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 1126,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256.it259",
    "access": null,
    "description": "complains if the script has already been loaded",
    "lineNumber": 71,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 1127,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe256.it260",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 80,
    "testTargets": [
      "ExecuteScriptFromUrl#toString"
    ]
  },
  {
    "__docId__": 1128,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect } from '@integration/testing-tools';\nimport { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by, error } from 'protractor';\nimport { Browser, ExecuteScript, LastScriptExecution, Navigate, Target, Value } from '../../../../src';\nimport { pageFromTemplate } from '../../../fixtures';\nimport { UIActors } from '../../../UIActors';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteSynchronousScript', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            document.getElementById('name').value = 'Joe';\n        `),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {LastScriptExecution.result} */\n    it('allows the actor to retrieve the value returned by the script', () =>\n        actorCalled('Joe')\n            .attemptsTo(\n                ExecuteScript.sync('return navigator.userAgent'),\n                Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n            ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a static argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n\n            document.getElementById('name').value = name;\n        `).withArguments(actorCalled('Joe').name),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a promised argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n\n            document.getElementById('name').value = name;\n        `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a Target argument', () => actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n            var name = arguments[0];\n            var field = arguments[1];\n\n            field.value = name;\n        `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n        Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n    ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.sync(`\n            console.log('hello world');\n        `).toString()).to.equal(`#actor executes a synchronous script`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.sync(`console.log('hello world');`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes a synchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {LastScriptExecution} */\n    it('complains if the script has failed', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        ExecuteScript.sync(`\n                throw new Error(\"something's not quite right here\");\n            `),\n    )).to.be.rejectedWith(error.JavascriptError, `javascript error: something's not quite right here`));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new UIActors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.sync(`console.log('hello world');`),\n            Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('hello world')))),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events).to.have.lengthOf(5);\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'console.log(\\'hello world\\');',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1129,
    "kind": "test",
    "name": "describe261",
    "testId": 261,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "access": null,
    "description": "ExecuteSynchronousScript",
    "lineNumber": 16,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 1130,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it262",
    "access": null,
    "description": "allows the actor to execute a synchronous script",
    "lineNumber": 54,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 1131,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it263",
    "access": null,
    "description": "allows the actor to retrieve the value returned by the script",
    "lineNumber": 67,
    "testTargets": [
      "LastScriptExecution.result"
    ]
  },
  {
    "__docId__": 1132,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it264",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a static argument",
    "lineNumber": 76,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 1133,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it265",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a promised argument",
    "lineNumber": 90,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 1134,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it266",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a Target argument",
    "lineNumber": 104,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 1135,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it267",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 120,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 1136,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it268",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 129,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 1137,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it269",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 140,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1138,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe261.it270",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 150,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 1139,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Attribute.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Attribute, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Attribute', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Attribute} */\n    it('allows the actor to read an attribute of a DOM element', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\" />\n        `)),\n\n        Ensure.that(Attribute.of(Target.the('DOM').located(by.tagName('html'))).called('lang'), equals('en')),\n    ));\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Attribute.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1140,
    "kind": "test",
    "name": "describe271",
    "testId": 271,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe271",
    "access": null,
    "description": "Attribute",
    "lineNumber": 11
  },
  {
    "__docId__": 1141,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe271.it272",
    "access": null,
    "description": "allows the actor to read an attribute of a DOM element",
    "lineNumber": 16,
    "testTargets": [
      "Attribute"
    ]
  },
  {
    "__docId__": 1142,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Browser.spec.ts",
    "content": "import 'mocha';\n\nimport { containAtLeastOneItemThat, Ensure, equals, includes, property } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Browser, Click, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Browser', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {Browser.log} */\n    it('returns no entries if the console log is empty', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\" />\n        `)),\n\n        Ensure.that(Browser.log(), property('length', equals(0))),\n    ));\n\n    /** @test {Browser.log} */\n    it('allows the actor to read the browser log entries', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\">\n                <body>\n                    <script>\n                        console.log('Hello from the console!');\n                    </script>\n                </body>\n            </html>\n        `)),\n\n        Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('Hello from the console!')))),\n    ));\n\n    const Trigger = Target.the('trigger button').located(by.id('trigger'));\n\n    /** @test {Browser.log} */\n    it('clears the log upon invocation', () => actorCalled('Bernie').attemptsTo(\n        Navigate.to(pageFromTemplate(`\n            <html lang=\"en\">\n                <body>\n                    <button id=\"trigger\" onclick=\"console.log('new entry')\">Print to console</button>\n                </body>\n            </html>\n        `)),\n\n        Click.on(Trigger),\n        Ensure.that(Browser.log(), property('length', equals(1))),\n\n        Click.on(Trigger),\n        Ensure.that(Browser.log(), property('length', equals(1))),\n    ));\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Browser.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1143,
    "kind": "test",
    "name": "describe273",
    "testId": 273,
    "memberof": "spec/screenplay/questions/Browser.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe273",
    "access": null,
    "description": "Browser",
    "lineNumber": 11
  },
  {
    "__docId__": 1144,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe273",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe273.it274",
    "access": null,
    "description": "returns no entries if the console log is empty",
    "lineNumber": 16,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 1145,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe273",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe273.it275",
    "access": null,
    "description": "allows the actor to read the browser log entries",
    "lineNumber": 25,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 1146,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "spec/screenplay/questions/Browser.spec.ts~describe273",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Browser.spec.ts~describe273.it276",
    "access": null,
    "description": "clears the log upon invocation",
    "lineNumber": 42,
    "testTargets": [
      "Browser.log"
    ]
  },
  {
    "__docId__": 1147,
    "kind": "testFile",
    "name": "spec/screenplay/questions/CSSClasses.spec.ts",
    "content": "import 'mocha';\n\nimport { contain, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by } from 'protractor';\n\nimport { CSSClasses, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('CSSClasses', () => {\n\n    const testPage = pageFromTemplate(`\n            <html>\n            <body>\n                <ul>\n                    <li id=\"no-class-attribute\"></li>\n                    <li id=\"empty-class-attribute\" class=\"\"></li>\n                    <li id=\"class-attribute-with-whitespace-only\" class=\"   \"></li>\n                    <li id=\"single-class\" class=\"pretty\"></li>\n                    <li id=\"several-classes\" class=\"pretty css classes\"></li>\n                    <li id=\"several-classes-with-whitespace\" class=\"  pretty   css  classes     \"></li>\n                </ul>\n            </body>\n            </html>\n        `);\n\n    beforeEach(() => engage(new UIActors()));\n\n    /** @test {CSSClasses} */\n    /** @test {CSSClasses.of} */\n    describe('of', () => {\n\n        given([\n            { description: 'no-class-attribute',                    expected: []                            },\n            { description: 'no-class-attribute',                    expected: []                            },\n            { description: 'class-attribute-with-whitespace-only',  expected: []                            },\n            { description: 'single-class',                          expected: ['pretty']                    },\n            { description: 'several-classes',                       expected: ['pretty', 'css', 'classes']  },\n            { description: 'several-classes-with-whitespace',       expected: ['pretty', 'css', 'classes']  },\n        ]).\n        it('allows the actor to read the css classes of a DOM element matching the locator', ({ description, expected }) =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(testPage),\n\n                Ensure.that(\n                    CSSClasses.of(Target.the(`Element with ${ description }`).located(by.id(description))),\n                    equals(expected),\n                ),\n            ));\n\n        /** @test {CSSClasses} */\n        /** @test {CSSClasses#of} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(\n                CSSClasses.of(\n                    Target.the(`Element with single-class`).located(by.id('single-class')),\n                ).of(Target.the(`list`).located(by.tagName('ul'))),\n                contain('pretty'),\n            ),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/CSSClasses.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1148,
    "kind": "test",
    "name": "describe277",
    "testId": 277,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe277",
    "access": null,
    "description": "CSSClasses",
    "lineNumber": 12
  },
  {
    "__docId__": 1149,
    "kind": "test",
    "name": "describe278",
    "testId": 278,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts~describe277",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe277.describe278",
    "access": null,
    "description": "of",
    "lineNumber": 33,
    "testTargets": [
      "CSSClasses.of"
    ]
  },
  {
    "__docId__": 1150,
    "kind": "test",
    "name": "it279",
    "testId": 279,
    "memberof": "spec/screenplay/questions/CSSClasses.spec.ts~describe277.describe278",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/CSSClasses.spec.ts~describe277.describe278.it279",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 55,
    "testTargets": [
      "CSSClasses#of"
    ]
  },
  {
    "__docId__": 1151,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Cookie.spec.ts",
    "content": "import 'mocha';\n\nimport { certificates, expect } from '@integration/testing-tools';\nimport { Ensure, equals, isTrue } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question, Transform } from '@serenity-js/core';\nimport { LocalServer, ManageALocalServer, StartLocalServer, StopLocalServer } from '@serenity-js/local-server';\nimport express = require('express');\n\nimport { protractor } from 'protractor';\nimport { BrowseTheWeb, DeleteCookies, Navigate } from '../../../src';\nimport { Cookie } from '../../../src/screenplay';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Cookie', () => {\n\n    // a tiny express server, setting response cookies\n    const cookieCutterApp = express().\n        get('/cookie', (req: express.Request & { query: { [key: string]: string }}, res: express.Response) => {\n            res.cookie(req.query.name, req.query.value, {\n                path:       '/cookie',\n                domain:     req.query.domain,\n                httpOnly:   !! req.query.httpOnly,\n                secure:     !! req.query.secure,\n                expires:    req.query.expires && new Date(req.query.expires),\n                // https://www.chromestatus.com/feature/5633521622188032\n                // sameSite:   !! req.query.secure ? 'None' : undefined,\n            }).status(200).send();\n        });\n\n    function cookieCutterURLFor(path: string): Question<Promise<string>> {\n        return Transform.the(LocalServer.url(), url => `${ url }${ path }`);\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('over HTTP', () => {\n\n        // Fun fact: Before Cookie Monster ate his first cookie, he believed his name was Sid. You're welcome.\n        const Sid = actorCalled('Sid').whoCan(\n            BrowseTheWeb.using(protractor.browser),\n            ManageALocalServer.runningAHttpListener(cookieCutterApp),\n        );\n\n        beforeEach(() => Sid.attemptsTo(StartLocalServer.onRandomPort()));\n        afterEach(() => Sid.attemptsTo(StopLocalServer.ifRunning()));\n        afterEach(() => Sid.attemptsTo(DeleteCookies.all()));\n\n        describe('when working with the value', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.valueOf('favourite'), equals('chocolate-chip')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.valueOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.valueOf('favourite').toString()).to.equal('the value of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with the path', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.pathOf('favourite'), equals('/cookie')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#pathOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.pathOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.pathOf('favourite').toString()).to.equal('the path of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with the domain', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#valueOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.domainOf('favourite'), equals('127.0.0.1')),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#domainOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.domainOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.domainOf('favourite').toString()).to.equal('the domain of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with http-only cookies', () => {\n\n            /** @test {Cookie} */\n            /** @test {Cookie#isHTTPOnly} */\n            it('allows the actor to confirm that a cookie is http-only', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.isHTTPOnly('favourite'), equals(false)),\n\n                Navigate.to(cookieCutterURLFor('/cookie?name=second_choice&value=shortbread&httpOnly=true')),\n                Ensure.that(Cookie.isHTTPOnly('second_choice'), isTrue()),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#isHTTPOnly} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.isHTTPOnly('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.isHTTPOnly('favourite').toString()).to.equal('the HTTP-only status of the \"favourite\" cookie');\n            });\n        });\n\n        describe('when working with an expiry date', () => {\n\n            function tomorrow(): Date {\n                const now = new Date();\n                const nextDay = new Date(now);\n                nextDay.setDate(nextDay.getDate() + 1);\n\n                return nextDay;\n            }\n\n            const expectedExpiryDate = tomorrow();\n\n            /** @test {Cookie} */\n            /** @test {Cookie#expiryDateOf} */\n            it('allows the actor to retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor(`/cookie?name=expiring&value=chocolate-chip&expires=${ expectedExpiryDate.toISOString() }`)),\n                Ensure.that(Transform.the(Cookie.expiryDateOf('expiring'), date => date.getDay()), equals(expectedExpiryDate.getDay())),\n            ));\n\n            /** @test {Cookie} */\n            /** @test {Cookie#expiryDateOf} */\n            it('returns an undefined when it can\\'t retrieve it', () => Sid.attemptsTo(\n                Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n                Ensure.that(Cookie.expiryDateOf('not-so-favourite'), equals(undefined)),\n            ));\n\n            /** @test {Cookie} */\n            it('provides a sensible description of the question being asked', () => {\n                expect(Cookie.expiryDateOf('favourite').toString()).to.equal('the expiry date of the \"favourite\" cookie');\n            });\n        });\n\n    });\n\n    describe('when working with secure cookies', () => {\n\n        const Sid = actorCalled('Secure Sid').whoCan(\n            BrowseTheWeb.using(protractor.browser),\n            ManageALocalServer.runningAHttpsListener(cookieCutterApp, {\n                cert:               certificates.cert,\n                key:                certificates.key,\n                requestCert:        true,\n                rejectUnauthorized: false,\n            }),\n        );\n\n        beforeEach(() => Sid.attemptsTo(StartLocalServer.onRandomPort()));\n        afterEach(() => Sid.attemptsTo(StopLocalServer.ifRunning()));\n        afterEach(() => Sid.attemptsTo(DeleteCookies.all()));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it('allows the actor to confirm that a cookie is not secure', () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n            Ensure.that(Cookie.isSecure('favourite'), equals(false)),\n        ));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it('allows the actor to confirm that a cookie is secure', () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip&secure=1')),\n            Ensure.that(Cookie.isSecure('favourite'), isTrue()),\n        ));\n\n        /** @test {Cookie} */\n        /** @test {Cookie#isSecure} */\n        it(`returns an undefined when it can't retrieve it`, () => Sid.attemptsTo(\n            Navigate.to(cookieCutterURLFor('/cookie?name=favourite&value=chocolate-chip')),\n            Ensure.that(Cookie.isSecure('not-so-favourite'), equals(undefined)),\n        ));\n\n        /** @test {Cookie} */\n        it('provides a sensible description of the question being asked', () => {\n            expect(Cookie.isSecure('favourite').toString()).to.equal('the \"secure\" status of the \"favourite\" cookie');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Cookie.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1152,
    "kind": "test",
    "name": "describe280",
    "testId": 280,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280",
    "access": null,
    "description": "Cookie",
    "lineNumber": 14
  },
  {
    "__docId__": 1153,
    "kind": "test",
    "name": "describe281",
    "testId": 281,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "access": null,
    "description": "over HTTP",
    "lineNumber": 58
  },
  {
    "__docId__": 1154,
    "kind": "test",
    "name": "describe282",
    "testId": 282,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282",
    "access": null,
    "description": "when working with the value",
    "lineNumber": 70
  },
  {
    "__docId__": 1155,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282.it283",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 74,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 1156,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282.it284",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 81,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 1157,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe282.it285",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 87,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1158,
    "kind": "test",
    "name": "describe286",
    "testId": 286,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286",
    "access": null,
    "description": "when working with the path",
    "lineNumber": 92
  },
  {
    "__docId__": 1159,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286.it287",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 96,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 1160,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286.it288",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 103,
    "testTargets": [
      "Cookie#pathOf"
    ]
  },
  {
    "__docId__": 1161,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe286.it289",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 109,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1162,
    "kind": "test",
    "name": "describe290",
    "testId": 290,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290",
    "access": null,
    "description": "when working with the domain",
    "lineNumber": 114
  },
  {
    "__docId__": 1163,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290.it291",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 118,
    "testTargets": [
      "Cookie#valueOf"
    ]
  },
  {
    "__docId__": 1164,
    "kind": "test",
    "name": "it292",
    "testId": 292,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290.it292",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 125,
    "testTargets": [
      "Cookie#domainOf"
    ]
  },
  {
    "__docId__": 1165,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe290.it293",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 131,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1166,
    "kind": "test",
    "name": "describe294",
    "testId": 294,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294",
    "access": null,
    "description": "when working with http-only cookies",
    "lineNumber": 136
  },
  {
    "__docId__": 1167,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294.it295",
    "access": null,
    "description": "allows the actor to confirm that a cookie is http-only",
    "lineNumber": 140,
    "testTargets": [
      "Cookie#isHTTPOnly"
    ]
  },
  {
    "__docId__": 1168,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294.it296",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 150,
    "testTargets": [
      "Cookie#isHTTPOnly"
    ]
  },
  {
    "__docId__": 1169,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe294.it297",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 156,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1170,
    "kind": "test",
    "name": "describe298",
    "testId": 298,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298",
    "access": null,
    "description": "when working with an expiry date",
    "lineNumber": 161
  },
  {
    "__docId__": 1171,
    "kind": "test",
    "name": "it299",
    "testId": 299,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298.it299",
    "access": null,
    "description": "allows the actor to retrieve it",
    "lineNumber": 184,
    "testTargets": [
      "Cookie#expiryDateOf"
    ]
  },
  {
    "__docId__": 1172,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298.it300",
    "access": null,
    "description": "returns an undefined when it can't retrieve it",
    "lineNumber": 191,
    "testTargets": [
      "Cookie#expiryDateOf"
    ]
  },
  {
    "__docId__": 1173,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe281.describe298.it301",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 197,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1174,
    "kind": "test",
    "name": "describe302",
    "testId": 302,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302",
    "access": null,
    "description": "when working with secure cookies",
    "lineNumber": 204
  },
  {
    "__docId__": 1175,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302.it303",
    "access": null,
    "description": "allows the actor to confirm that a cookie is not secure",
    "lineNumber": 222,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 1176,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302.it304",
    "access": null,
    "description": "allows the actor to confirm that a cookie is secure",
    "lineNumber": 229,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 1177,
    "kind": "test",
    "name": "it305",
    "testId": 305,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302.it305",
    "access": null,
    "lineNumber": 236,
    "testTargets": [
      "Cookie#isSecure"
    ]
  },
  {
    "__docId__": 1178,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Cookie.spec.ts~describe280.describe302.it306",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 242,
    "testTargets": [
      "Cookie"
    ]
  },
  {
    "__docId__": 1179,
    "kind": "testFile",
    "name": "spec/screenplay/questions/LastScriptExecution.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, LogicError } from '@serenity-js/core';\nimport { by } from 'protractor';\nimport { Enter, ExecuteScript, LastScriptExecution, Navigate, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {LastScriptExecution} */\ndescribe('LastScriptExecution', function () {\n\n    const page = pageFromTemplate(`\n        <html>\n            <body>\n                <form>\n                    <input type=\"text\" id=\"name\" />\n                </form>\n            </body>\n        </html>\n    `);\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('when used with ExecuteScript.sync', () => {\n\n        /** @test {ExecuteScript.sync} */\n        /** @test {ExecuteSynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('allows the actor to retrieve the result of the script execution', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            Enter.theValue(actorCalled('Joe').name).into(Sandbox.Input),\n\n            ExecuteScript.sync(`\n                var field = arguments[0];\n                return field.value;\n            `).withArguments(Sandbox.Input),\n\n            Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n        ));\n\n        /** @test {ExecuteScript.sync} */\n        /** @test {ExecuteSynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('returns null if the script did not return any result', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            ExecuteScript.sync(`\n                /* do nothing */\n            `),\n\n            Ensure.that(LastScriptExecution.result<null>(), equals(null)),\n        ));\n    });\n\n    describe('when used with ExecuteScript.async', () => {\n\n        /** @test {ExecuteScript.async} */\n        /** @test {ExecuteAsynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('allows the actor to retrieve the result of the script execution', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            Enter.theValue(actorCalled('Joe').name).into(Sandbox.Input),\n\n            ExecuteScript.async(`\n                var field = arguments[0];\n                var callback = arguments[arguments.length - 1];\n                callback(field.value);\n            `).withArguments(Sandbox.Input),\n\n            Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n        ));\n\n        /** @test {ExecuteScript.async} */\n        /** @test {ExecuteAsynchronousScript} */\n        /** @test {LastScriptExecution} */\n        it('returns null if the script did not return any result', () => actorCalled('Joe').attemptsTo(\n            Navigate.to(page),\n\n            ExecuteScript.async(`\n                var callback = arguments[arguments.length - 1];\n                callback();\n            `),\n\n            Ensure.that(LastScriptExecution.result<null>(), equals(null)),\n        ));\n    });\n\n    /** @test {ExecuteAsynchronousScript} */\n    /** @test {LastScriptExecution} */\n    it('complains if the script hasn\\'t been executed yet', () => expect(actorCalled('Joe').attemptsTo(\n        Navigate.to(page),\n\n        Ensure.that(LastScriptExecution.result<string>(), equals(actorCalled('Joe').name)),\n    )).to.be.rejectedWith(LogicError, 'Make sure to execute a script before checking on the result'));\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/LastScriptExecution.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1180,
    "kind": "test",
    "name": "describe307",
    "testId": 307,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307",
    "access": null,
    "description": "LastScriptExecution",
    "lineNumber": 12,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1181,
    "kind": "test",
    "name": "describe308",
    "testId": 308,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe308",
    "access": null,
    "description": "when used with ExecuteScript.sync",
    "lineNumber": 48
  },
  {
    "__docId__": 1182,
    "kind": "test",
    "name": "it309",
    "testId": 309,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe308.it309",
    "access": null,
    "description": "allows the actor to retrieve the result of the script execution",
    "lineNumber": 53,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1183,
    "kind": "test",
    "name": "it310",
    "testId": 310,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe308",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe308.it310",
    "access": null,
    "description": "returns null if the script did not return any result",
    "lineNumber": 69,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1184,
    "kind": "test",
    "name": "describe311",
    "testId": 311,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe311",
    "access": null,
    "description": "when used with ExecuteScript.async",
    "lineNumber": 80
  },
  {
    "__docId__": 1185,
    "kind": "test",
    "name": "it312",
    "testId": 312,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe311.it312",
    "access": null,
    "description": "allows the actor to retrieve the result of the script execution",
    "lineNumber": 85,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1186,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.describe311.it313",
    "access": null,
    "description": "returns null if the script did not return any result",
    "lineNumber": 102,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1187,
    "kind": "test",
    "name": "it314",
    "testId": 314,
    "memberof": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/LastScriptExecution.spec.ts~describe307.it314",
    "access": null,
    "description": "complains if the script hasn't been executed yet",
    "lineNumber": 116,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 1188,
    "kind": "testFile",
    "name": "spec/screenplay/questions/ModalDialog.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { Ensure, equals, isFalse, isTrue } from '@serenity-js/assertions';\nimport { actorCalled, configure, engage } from '@serenity-js/core';\nimport { AsyncOperationCompleted, AsyncOperationFailed, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { Name } from '@serenity-js/core/lib/model';\nimport { by } from 'protractor';\nimport { Accept, Click, Dismiss, Enter, ModalDialog, Navigate, Photographer, TakePhotosOfInteractions, Target, Text, Wait } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\n/** @test {ModalDialog} */\ndescribe('ModalDialog,', function () {\n\n    const Example = {\n        trigger:    Target.the('alert trigger').located(by.id('trigger')),\n        result:     Target.the('result').located(by.id('result')),\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('when working with alert(),', () => {\n\n        beforeEach(() =>\n            actorCalled('Nick').attemptsTo(\n                Navigate.to(sandboxWith(`\n                    function() {\n                        alert('Hello!');\n                        // alert is blocking\n                        return 'accepted';\n                    }\n                `)),\n                Click.on(Example.trigger),\n            ));\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Accept} */\n        /** @test {Accept.the} */\n        it('allows the actor to accept an alert', () =>\n            actorCalled('Nick').attemptsTo(\n                Accept.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('accepted')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Dismiss} */\n        /** @test {Dismiss.the} */\n        it('allows the actor to dismiss an alert', () =>\n            actorCalled('Nick').attemptsTo(\n                Dismiss.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('accepted')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.message} */\n        /** @test {Dismiss} */\n        /** @test {Dismiss.the} */\n        it('allows the actor to read the message on an alert', () =>\n            actorCalled('Nick').attemptsTo(\n                Ensure.that(ModalDialog.message(), equals('Hello!')),\n                Dismiss.the(ModalDialog.window()),\n            ),\n        );\n    });\n\n    describe('when working with confirm(),', () => {\n\n        beforeEach(() =>\n            actorCalled('Nick').attemptsTo(\n                Navigate.to(sandboxWith(`\n                    function() {\n                        return confirm('Continue?')\n                            ? 'accepted'\n                            : 'dismissed';\n                    }\n                `)),\n                Click.on(Example.trigger),\n            ));\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Accept} */\n        /** @test {Accept.the} */\n        it('allows the actor to accept a confirmation dialog', () =>\n            actorCalled('Nick').attemptsTo(\n                Accept.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('accepted')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Dismiss} */\n        /** @test {Dismiss.the} */\n        it('allows the actor to dismiss a confirmation dialog', () =>\n            actorCalled('Nick').attemptsTo(\n                Dismiss.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('dismissed')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.message} */\n        it('allows the actor to read the message on a confirmation dialog', () =>\n            actorCalled('Nick').attemptsTo(\n                Ensure.that(ModalDialog.message(), equals('Continue?')),\n                Dismiss.the(ModalDialog.window()),\n            ),\n        );\n    });\n\n    describe('when working with prompt(),', () => {\n\n        beforeEach(() =>\n            actorCalled('Nick').attemptsTo(\n                Navigate.to(sandboxWith(`\n                    function() {\n                        return prompt('Feeling lucky?', 'sure');\n                    }\n                `)),\n                Click.on(Example.trigger),\n            ));\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Accept} */\n        /** @test {Accept.the} */\n        it('allows the actor to accept a prompt', () =>\n            actorCalled('Nick').attemptsTo(\n                Accept.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('sure')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.window} */\n        /** @test {Dismiss} */\n        /** @test {Dismiss.the} */\n        it('allows the actor to dismiss a prompt', () =>\n            actorCalled('Nick').attemptsTo(\n                Dismiss.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('')),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.message} */\n        it('allows the actor to read the message on a prompt', () =>\n            actorCalled('Nick').attemptsTo(\n                Ensure.that(ModalDialog.message(), equals('Feeling lucky?')),\n                Dismiss.the(ModalDialog.window()),\n            ),\n        );\n\n        /** @test {ModalDialog} */\n        /** @test {ModalDialog.message} */\n        /** @test {Enter.theValue} */\n        it('allows the actor to enter value into a prompt', () =>\n            actorCalled('Nick').attemptsTo(\n                Enter.theValue('certainly').into(ModalDialog.window()),\n                Accept.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('certainly')),\n            ),\n        );\n    });\n\n    describe('when waiting', () => {\n\n        beforeEach(() =>\n            actorCalled('Nick').attemptsTo(\n                Navigate.to(sandboxWith(`\n                    function() {\n                        setTimeout(function() {\n                            alert('Almost there!');\n                            document.getElementById(\"result\").innerHTML = 'And the wait is over :-)';\n                        }, 250);\n                        return 'The wait has began';\n                    }\n                `)),\n            ));\n\n        /** @test {ModalDialog.hasPoppedUp} */\n        /** @test {Wait.until} */\n        it('allows the actor to wait until a modal dialog is present', () =>\n            actorCalled('Nick').attemptsTo(\n                Ensure.that(ModalDialog.hasPoppedUp(), isFalse()),\n                Click.on(Example.trigger),\n                Wait.until(ModalDialog.hasPoppedUp(), isTrue()),\n                Accept.the(ModalDialog.window()),\n                Ensure.that(Text.of(Example.result), equals('And the wait is over :-)')),\n            ),\n        );\n    });\n\n    describe('when interacting with the Photographer,', () => {\n\n        let recorder: EventRecorder;\n\n        beforeEach(() => {\n            recorder = new EventRecorder();\n\n            configure({\n                actors: new UIActors(),\n                crew: [\n                    Photographer.whoWill(TakePhotosOfInteractions),\n                    recorder,\n                ]\n            })\n        });\n\n        /** @test {Photographer} */\n        it('is does not negatively impact the screenshot capture process', () =>\n            actorCalled('Nick').attemptsTo(\n                Navigate.to(sandboxWith(`\n                    function() {\n                        return alert('All good?');\n                    }\n                `)),\n                Click.on(Example.trigger),\n                Accept.the(ModalDialog.window()),\n            ).\n            then(() => {\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationCompleted, ({ taskDescription }: AsyncOperationCompleted) => {\n                        expect(taskDescription.value).to.include(`Took screenshot of 'Nick navigates`);\n                    })\n                    .next(AsyncOperationCompleted, ({ taskDescription }: AsyncOperationCompleted) => {\n                        expect(taskDescription.value).to.include(`Aborted taking screenshot of 'Nick clicks on the alert trigger' because of UnexpectedAlertOpenError`);\n                    })\n                    .next(InteractionFinished, ({ details }: InteractionFinished) => {\n                        expect(details.name).to.equal(new Name('Nick accepts the modal dialog window'));\n                    })\n            }),\n        );\n\n    });\n\n    function sandboxWith(script: string) {\n        return pageFromTemplate(`\n                <html>\n                <body>\n                    <button id=\"trigger\" onclick=\"trigger()\">Trigger Alert</button>\n                    <p id=\"result\"></p>\n                    <script>\n                        function trigger() {\n                            document.getElementById(\"result\").innerHTML = (${script})();\n                        }\n                    </script>\n                </body>\n                </html>\n            `)\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/ModalDialog.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1189,
    "kind": "test",
    "name": "describe315",
    "testId": 315,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "access": null,
    "description": "ModalDialog,",
    "lineNumber": 14,
    "testTargets": [
      "ModalDialog"
    ]
  },
  {
    "__docId__": 1190,
    "kind": "test",
    "name": "describe316",
    "testId": 316,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316",
    "access": null,
    "description": "when working with alert(),",
    "lineNumber": 23
  },
  {
    "__docId__": 1191,
    "kind": "test",
    "name": "it317",
    "testId": 317,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316.it317",
    "access": null,
    "description": "allows the actor to accept an alert",
    "lineNumber": 41,
    "testTargets": [
      "Accept.the"
    ]
  },
  {
    "__docId__": 1192,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316.it318",
    "access": null,
    "description": "allows the actor to dismiss an alert",
    "lineNumber": 52,
    "testTargets": [
      "Dismiss.the"
    ]
  },
  {
    "__docId__": 1193,
    "kind": "test",
    "name": "it319",
    "testId": 319,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe316.it319",
    "access": null,
    "description": "allows the actor to read the message on an alert",
    "lineNumber": 63,
    "testTargets": [
      "Dismiss.the"
    ]
  },
  {
    "__docId__": 1194,
    "kind": "test",
    "name": "describe320",
    "testId": 320,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320",
    "access": null,
    "description": "when working with confirm(),",
    "lineNumber": 71
  },
  {
    "__docId__": 1195,
    "kind": "test",
    "name": "it321",
    "testId": 321,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320.it321",
    "access": null,
    "description": "allows the actor to accept a confirmation dialog",
    "lineNumber": 89,
    "testTargets": [
      "Accept.the"
    ]
  },
  {
    "__docId__": 1196,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320.it322",
    "access": null,
    "description": "allows the actor to dismiss a confirmation dialog",
    "lineNumber": 100,
    "testTargets": [
      "Dismiss.the"
    ]
  },
  {
    "__docId__": 1197,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe320.it323",
    "access": null,
    "description": "allows the actor to read the message on a confirmation dialog",
    "lineNumber": 109,
    "testTargets": [
      "ModalDialog.message"
    ]
  },
  {
    "__docId__": 1198,
    "kind": "test",
    "name": "describe324",
    "testId": 324,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324",
    "access": null,
    "description": "when working with prompt(),",
    "lineNumber": 117
  },
  {
    "__docId__": 1199,
    "kind": "test",
    "name": "it325",
    "testId": 325,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324.it325",
    "access": null,
    "description": "allows the actor to accept a prompt",
    "lineNumber": 133,
    "testTargets": [
      "Accept.the"
    ]
  },
  {
    "__docId__": 1200,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324.it326",
    "access": null,
    "description": "allows the actor to dismiss a prompt",
    "lineNumber": 144,
    "testTargets": [
      "Dismiss.the"
    ]
  },
  {
    "__docId__": 1201,
    "kind": "test",
    "name": "it327",
    "testId": 327,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324.it327",
    "access": null,
    "description": "allows the actor to read the message on a prompt",
    "lineNumber": 153,
    "testTargets": [
      "ModalDialog.message"
    ]
  },
  {
    "__docId__": 1202,
    "kind": "test",
    "name": "it328",
    "testId": 328,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe324.it328",
    "access": null,
    "description": "allows the actor to enter value into a prompt",
    "lineNumber": 163,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 1203,
    "kind": "test",
    "name": "describe329",
    "testId": 329,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe329",
    "access": null,
    "description": "when waiting",
    "lineNumber": 172
  },
  {
    "__docId__": 1204,
    "kind": "test",
    "name": "it330",
    "testId": 330,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe329",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe329.it330",
    "access": null,
    "description": "allows the actor to wait until a modal dialog is present",
    "lineNumber": 189,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 1205,
    "kind": "test",
    "name": "describe331",
    "testId": 331,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe331",
    "access": null,
    "description": "when interacting with the Photographer,",
    "lineNumber": 200
  },
  {
    "__docId__": 1206,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe331",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/ModalDialog.spec.ts~describe315.describe331.it332",
    "access": null,
    "description": "is does not negatively impact the screenshot capture process",
    "lineNumber": 217,
    "testTargets": [
      "Photographer"
    ]
  },
  {
    "__docId__": 1207,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Pick.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { contain, Ensure, equals, startsWith } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport { by, ElementArrayFinder, ElementFinder } from 'protractor';\nimport { Click, CSSClasses, Navigate, Pick, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Pick', () => {\n\n    const shoppingListPage = pageFromTemplate(`\n        <html>\n        <body>\n        <div id=\"shopping-list-app\">\n            <h1>Shopping list</h1>\n            <ul>\n                <li class=\"buy 1st\">\n                    <span class=\"item-name\">oats</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n                <li class=\"buy 2nd\">\n                    <span class=\"item-name\">coconut milk</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n                <li class=\"3rd\">\n                    <span class=\"item-name\">coffee</span>\n                    <a onclick=\"toggle(this)\">x</a>\n                </li>\n            </ul>\n        </div>\n        <script>\n            function toggle(event) {\n                event.parentNode.classList.toggle('buy');\n            }\n        </script>\n        </body>\n        </html>\n    `);\n\n    class ShoppingList {\n        static Items        = Target.all('shopping list items').located(by.css('li'));\n        static Item         = Target.the('shopping list item').located(by.css('li'));\n        static Titles       = Target.all('shopping list item titles').located(by.css('li span.item-name'));\n        static Item_Name    = Target.the('item name').located(by.tagName('span.item-name'));\n        static Item_Names   = Target.all('item names').located(by.tagName('span.item-name'));\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('(when no filters are applied)', () => {\n\n        describe('lets the actor interact with the list of matching elements so that it', () => {\n\n            const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Titles);\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(3)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), equals('oats')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), equals('coffee')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(1)), equals('coconut milk')),\n            ));\n\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            const picked = Pick.from(ShoppingList.Items);\n\n            /** @test {Pick} */\n            it('returns the number of items', () =>\n                expect(picked.count().toString())\n                    .to.equal('the number of the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal('the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal('the first of the shopping list items'));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal('the last of the shopping list items'));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString())\n                    .to.equal(`the ${ description } of the shopping list items`);\n            });\n        });\n\n        describe('provides a custom description when the name of its subject is overridden and it', () => {\n\n            const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Titles);\n\n            /** @test {Pick} */\n            it('returns the number of items', () =>\n                expect(picked.count().describedAs('item count').toString())\n                    .to.equal('item count'));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().describedAs('all items').toString())\n                    .to.equal('all items'));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().describedAs('top item').toString())\n                    .to.equal('top item'));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().describedAs('last one').toString())\n                    .to.equal('last one'));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => {\n                expect(picked.get(0).describedAs('first one').toString())\n                    .to.equal(`first one`);\n            });\n        });\n    });\n\n    describe('(when a filter is applied)', () => {\n\n        const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items).where(CSSClasses, contain('buy'));\n\n        describe('lets the actor filter the list of matching elements so that it', () => {\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(2)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk x')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), startsWith('oats')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(1)), startsWith('coconut milk')),\n            ));\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            /** @test {Pick} */\n            it('returns the number of answers', () =>\n                expect(picked.count().toString())\n                    .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal(`the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy'`));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString()).to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy'`);\n            });\n        });\n    });\n\n    describe('(when multiple filters are applied)', () => {\n\n        const picked = Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items).where(CSSClasses, contain('buy')).where(Text, startsWith('coconut'));\n\n        describe('lets the actor filter the list of matching elements so that it', () => {\n\n            /** @test {Pick} */\n            it('gets the number of items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(picked.count(), equals(1)),\n            ));\n\n            /** @test {Pick} */\n            it('picks all the items', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(picked.all()), contain('coconut milk x')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the first item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.first()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the last item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.last()), startsWith('coconut milk')),\n            ));\n\n            /** @test {Pick} */\n            it('picks the nth item', () => actorCalled('Peter').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(picked.get(0)), startsWith('coconut milk')),\n            ));\n        });\n\n        describe('provides a sensible description when it', () => {\n\n            /** @test {Pick} */\n            it('returns the number of answers', () =>\n                expect(picked.count().toString())\n                    .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks all the items', () =>\n                expect(picked.all().toString())\n                    .to.equal(`the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks the first item', () =>\n                expect(picked.first().toString())\n                    .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            /** @test {Pick} */\n            it('picks the last item', () =>\n                expect(picked.last().toString())\n                    .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n            ]).\n            it('picks the nth item', ({ description, index }) => {\n                expect(picked.get(index).toString())\n                    .to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`);\n            });\n        });\n    });\n\n    describe('(when interacting with elements on screen)', () => {\n\n        const ItemCalled = (name: string) =>\n            Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items)\n                .where(Text.of(ShoppingList.Item_Name), equals(name)).first();\n\n        const ItemsLeftToBuy = () =>\n            Pick.from<ElementFinder, ElementArrayFinder>(ShoppingList.Items)\n                .where(CSSClasses, contain('buy'))\n                .all();\n\n        const LinkTo = (item: Question<ElementFinder> | ElementFinder) => Target.the('link to element').of(item).located(by.css('a'));\n\n        /** @test {Pick} */\n        it('makes it easy for an actor to pick the element of interest', () => actorCalled('Peter').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Click.on(LinkTo(ItemCalled('coffee'))),\n\n            Ensure.that(CSSClasses.of(ItemCalled('coffee')), contain('buy')),\n        ));\n\n        /** @test {Pick} */\n        it('makes it easy for an actor to pick all elements of interest', () => actorCalled('Peter').attemptsTo(\n            Navigate.to(shoppingListPage),\n\n            Click.on(LinkTo(ItemCalled('coconut milk'))),\n            Click.on(LinkTo(ItemCalled('coffee'))),\n\n            Ensure.that(Text.ofAll(ItemsLeftToBuy()), equals([ 'oats x', 'coffee x' ])),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Pick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1208,
    "kind": "test",
    "name": "describe333",
    "testId": 333,
    "memberof": "spec/screenplay/questions/Pick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333",
    "access": null,
    "description": "Pick",
    "lineNumber": 12
  },
  {
    "__docId__": 1209,
    "kind": "test",
    "name": "describe334",
    "testId": 334,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334",
    "access": null,
    "description": "(when no filters are applied)",
    "lineNumber": 115
  },
  {
    "__docId__": 1210,
    "kind": "test",
    "name": "describe335",
    "testId": 335,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "access": null,
    "description": "lets the actor interact with the list of matching elements so that it",
    "lineNumber": 117
  },
  {
    "__docId__": 1211,
    "kind": "test",
    "name": "it336",
    "testId": 336,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335.it336",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 122,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1212,
    "kind": "test",
    "name": "it337",
    "testId": 337,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335.it337",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 129,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1213,
    "kind": "test",
    "name": "it338",
    "testId": 338,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335.it338",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 136,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1214,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335.it339",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 143,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1215,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe335.it340",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 150,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1216,
    "kind": "test",
    "name": "describe341",
    "testId": 341,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 158
  },
  {
    "__docId__": 1217,
    "kind": "test",
    "name": "it342",
    "testId": 342,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341.it342",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 163,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1218,
    "kind": "test",
    "name": "it343",
    "testId": 343,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341.it343",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 168,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1219,
    "kind": "test",
    "name": "it344",
    "testId": 344,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341.it344",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 173,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1220,
    "kind": "test",
    "name": "it345",
    "testId": 345,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe341.it345",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 178,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1221,
    "kind": "test",
    "name": "describe346",
    "testId": 346,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "access": null,
    "description": "provides a custom description when the name of its subject is overridden and it",
    "lineNumber": 202
  },
  {
    "__docId__": 1222,
    "kind": "test",
    "name": "it347",
    "testId": 347,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346.it347",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 207,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1223,
    "kind": "test",
    "name": "it348",
    "testId": 348,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346.it348",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 212,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1224,
    "kind": "test",
    "name": "it349",
    "testId": 349,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346.it349",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 217,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1225,
    "kind": "test",
    "name": "it350",
    "testId": 350,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346.it350",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 222,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1226,
    "kind": "test",
    "name": "it351",
    "testId": 351,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe334.describe346.it351",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 227,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1227,
    "kind": "test",
    "name": "describe352",
    "testId": 352,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352",
    "access": null,
    "description": "(when a filter is applied)",
    "lineNumber": 234
  },
  {
    "__docId__": 1228,
    "kind": "test",
    "name": "describe353",
    "testId": 353,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 238
  },
  {
    "__docId__": 1229,
    "kind": "test",
    "name": "it354",
    "testId": 354,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353.it354",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 241,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1230,
    "kind": "test",
    "name": "it355",
    "testId": 355,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353.it355",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 248,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1231,
    "kind": "test",
    "name": "it356",
    "testId": 356,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353.it356",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 255,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1232,
    "kind": "test",
    "name": "it357",
    "testId": 357,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353.it357",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 262,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1233,
    "kind": "test",
    "name": "it358",
    "testId": 358,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe353.it358",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 269,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1234,
    "kind": "test",
    "name": "describe359",
    "testId": 359,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 276
  },
  {
    "__docId__": 1235,
    "kind": "test",
    "name": "it360",
    "testId": 360,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359.it360",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 279,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1236,
    "kind": "test",
    "name": "it361",
    "testId": 361,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359.it361",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 284,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1237,
    "kind": "test",
    "name": "it362",
    "testId": 362,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359.it362",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 289,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1238,
    "kind": "test",
    "name": "it363",
    "testId": 363,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe352.describe359.it363",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 294,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1239,
    "kind": "test",
    "name": "describe364",
    "testId": 364,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364",
    "access": null,
    "description": "(when multiple filters are applied)",
    "lineNumber": 317
  },
  {
    "__docId__": 1240,
    "kind": "test",
    "name": "describe365",
    "testId": 365,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 321
  },
  {
    "__docId__": 1241,
    "kind": "test",
    "name": "it366",
    "testId": 366,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365.it366",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 324,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1242,
    "kind": "test",
    "name": "it367",
    "testId": 367,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365.it367",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 331,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1243,
    "kind": "test",
    "name": "it368",
    "testId": 368,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365.it368",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 338,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1244,
    "kind": "test",
    "name": "it369",
    "testId": 369,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365.it369",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 345,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1245,
    "kind": "test",
    "name": "it370",
    "testId": 370,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe365.it370",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 352,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1246,
    "kind": "test",
    "name": "describe371",
    "testId": 371,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 359
  },
  {
    "__docId__": 1247,
    "kind": "test",
    "name": "it372",
    "testId": 372,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371.it372",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 362,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1248,
    "kind": "test",
    "name": "it373",
    "testId": 373,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371.it373",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 367,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1249,
    "kind": "test",
    "name": "it374",
    "testId": 374,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371.it374",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 372,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1250,
    "kind": "test",
    "name": "it375",
    "testId": 375,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe364.describe371.it375",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 377,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1251,
    "kind": "test",
    "name": "describe376",
    "testId": 376,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe376",
    "access": null,
    "description": "(when interacting with elements on screen)",
    "lineNumber": 401
  },
  {
    "__docId__": 1252,
    "kind": "test",
    "name": "it377",
    "testId": 377,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe376",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe376.it377",
    "access": null,
    "description": "makes it easy for an actor to pick the element of interest",
    "lineNumber": 415,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1253,
    "kind": "test",
    "name": "it378",
    "testId": 378,
    "memberof": "spec/screenplay/questions/Pick.spec.ts~describe333.describe376",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Pick.spec.ts~describe333.describe376.it378",
    "access": null,
    "description": "makes it easy for an actor to pick all elements of interest",
    "lineNumber": 424,
    "testTargets": [
      "Pick"
    ]
  },
  {
    "__docId__": 1254,
    "kind": "testFile",
    "name": "spec/screenplay/questions/ProtractorParam.spec.ts",
    "content": "import 'mocha';\nimport { expect } from '@integration/testing-tools';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, ConfigurationError, engage } from '@serenity-js/core';\n\nimport { ProtractorParam } from '../../../src';\nimport { UIActors } from '../../UIActors';\n\ndescribe('ProtractorParam', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    /**\n     * @test {ProtractorParam}\n     * @test {ProtractorParam.called}\n     */\n    it('lets the actor read the value of a primitive Protractor parameter specified in protractor.conf.js', () =>\n        actorCalled('Bernie').attemptsTo(\n            Ensure.that(ProtractorParam.called<string>('env'), equals('test')),\n        ));\n\n    /**\n     * @test {ProtractorParam}\n     * @test {ProtractorParam.called}\n     */\n    it('lets the actor read the value of an object Protractor parameter specified in protractor.conf.js', () =>\n        actorCalled('Bernie').attemptsTo(\n            Ensure.that(\n                ProtractorParam.called<{ id: number, firstName: string, lastName: string }>('user'),\n                equals({ id: 1, firstName: 'Jan', lastName: 'Molak' })\n            ),\n        ));\n\n    /**\n     * @test {ProtractorParam}\n     * @test {ProtractorParam.called}\n     */\n    it('lets the actor read the value of a Protractor parameter specified by path', () =>\n        actorCalled('Bernie').attemptsTo(\n            Ensure.that(ProtractorParam.called<string>('user.firstName'), equals('Jan')),\n        ));\n\n    /**\n     * @test {ProtractorParam}\n     * @test {ProtractorParam.called}\n     */\n    it('complains if the parameter is undefined', () =>\n        expect(actorCalled('Bernie').attemptsTo(\n            Ensure.that(ProtractorParam.called<string>('user.address'), equals('London, UK')),\n        )).to.be.rejectedWith(ConfigurationError, `Protractor param 'user.address' is undefined`));\n\n    /**\n     * @test {ProtractorParam}\n     * @test {ProtractorParam.called}\n     */\n    it('contributes to a human-readable description of an activity', () => {\n        expect(Ensure.that(ProtractorParam.called<string>('user.firstName'), equals('Jan')).toString())\n            .to.equal(`#actor ensures that the 'user.firstName' param specified in Protractor config does equal 'Jan'`)\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/ProtractorParam.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1255,
    "kind": "test",
    "name": "describe379",
    "testId": 379,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "access": null,
    "description": "ProtractorParam",
    "lineNumber": 10
  },
  {
    "__docId__": 1256,
    "kind": "test",
    "name": "it380",
    "testId": 380,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379.it380",
    "access": null,
    "description": "lets the actor read the value of a primitive Protractor parameter specified in protractor.conf.js",
    "lineNumber": 18,
    "testTargets": [
      "ProtractorParam",
      "ProtractorParam.called"
    ]
  },
  {
    "__docId__": 1257,
    "kind": "test",
    "name": "it381",
    "testId": 381,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379.it381",
    "access": null,
    "description": "lets the actor read the value of an object Protractor parameter specified in protractor.conf.js",
    "lineNumber": 27,
    "testTargets": [
      "ProtractorParam",
      "ProtractorParam.called"
    ]
  },
  {
    "__docId__": 1258,
    "kind": "test",
    "name": "it382",
    "testId": 382,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379.it382",
    "access": null,
    "description": "lets the actor read the value of a Protractor parameter specified by path",
    "lineNumber": 72,
    "testTargets": [
      "ProtractorParam",
      "ProtractorParam.called"
    ]
  },
  {
    "__docId__": 1259,
    "kind": "test",
    "name": "it383",
    "testId": 383,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379.it383",
    "access": null,
    "description": "complains if the parameter is undefined",
    "lineNumber": 81,
    "testTargets": [
      "ProtractorParam",
      "ProtractorParam.called"
    ]
  },
  {
    "__docId__": 1260,
    "kind": "test",
    "name": "it384",
    "testId": 384,
    "memberof": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/ProtractorParam.spec.ts~describe379.it384",
    "access": null,
    "description": "contributes to a human-readable description of an activity",
    "lineNumber": 90,
    "testTargets": [
      "ProtractorParam",
      "ProtractorParam.called"
    ]
  },
  {
    "__docId__": 1261,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Target.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { contain, Ensure, equals, isGreaterThan, startsWith } from '@serenity-js/assertions';\nimport { actorCalled, engage, Question, toNumber } from '@serenity-js/core';\nimport { by, ElementFinder } from 'protractor';\nimport { Click, CSSClasses, Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\nimport { given } from 'mocha-testdata';\n\n/** @test {Target} */\ndescribe('Target', () => {\n\n    const shoppingListPage = pageFromTemplate(`\n        <html>\n            <body>\n                <div id=\"shopping-list-app\">\n                    <h1>Shopping <span>list</span></h1>\n                    <h2 class=\"progress\"><span>2</span> out of 3</h2>\n                    <ul>\n                        <li class=\"buy\">oats</li>\n                        <li class=\"buy\">coconut milk</li>\n                        <li class=\"bought\">coffee</li>\n                    </ul>\n                </div>\n            </body>\n        </html>\n    `);\n\n    class ShoppingList {\n        static App = Target.the('shopping list app').located(by.id('shopping-list-app'));\n        static Progress = Target.the('progress bar').located(by.css('.progress')).of(ShoppingList.App);\n        static Number_Of_Items_Left = Target.the('number of items left').of(ShoppingList.Progress).located(by.css('span'));\n\n        static Header = Target.the('header').located(by.tagName('h1'));\n        static List = Target.the('shopping list').located(by.tagName('ul'));\n        static Items = Target.all('items').of(ShoppingList.App).located(by.tagName('li'));\n        static Bought_Items = Target.all('bought items').located(by.css('.bought')).of(ShoppingList.List);\n    }\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('allows the actor to locate', () => {\n\n        /**\n         * @test {Target}\n         * @test {Target.the}\n         * @test {TargetElement}\n         */\n        it('a single web element matching the selector', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(ShoppingList.Header), equals('Shopping list')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.all}\n         * @test {TargetElements}\n         */\n        it('all web elements matching the selector', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(ShoppingList.Items), contain('oats')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.the}\n         * @test {TargetNestedElement}\n         * @test {TargetNestedElement#of}\n         */\n        it('an element relative to another target', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.of(ShoppingList.Number_Of_Items_Left), equals('2')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.all}\n         * @test {TargetNestedElements}\n         * @test {TargetNestedElements#of}\n         */\n        it('all elements relative to another target', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(shoppingListPage),\n\n                Ensure.that(Text.ofAll(ShoppingList.Bought_Items), equals(['coffee'])),\n            ));\n    });\n\n    describe('provides a sensible description of', () => {\n\n        describe('an element that', () => {\n\n            /**\n             * @test {Target}\n             * @test {Target.the}\n             * @test {TargetElement}\n             */\n            it('is being targeted', () => {\n                expect(ShoppingList.Header.toString())\n                    .to.equal('the header');\n            });\n\n            /**\n             * @test {Target}\n             * @test {Target.the}\n             * @test {TargetElement}\n             */\n            it('has been located', () => {\n                expect(ShoppingList.Header.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the header');\n            });\n\n            /**\n             * @test {Target}\n             * @test {Target.the}\n             * @test {TargetNestedElement}\n             * @test {TargetNestedElement#of}\n             */\n            it('is nested', () =>\n                expect(ShoppingList.Number_Of_Items_Left.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the number of items left of the progress bar of the shopping list app'));\n        });\n\n        describe('elements that', () => {\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements}\n             */\n            it('are being targeted', () => {\n                expect(ShoppingList.Items.toString())\n                    .to.equal('the items of the shopping list app');\n            });\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements}\n             */\n            it('have been located', () =>\n                expect(ShoppingList.Items.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the items of the shopping list app'));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('are nested', () =>\n                expect(ShoppingList.Bought_Items.answeredBy(actorCalled('Bernie')).toString())\n                    .to.equal('the bought items of the shopping list'));\n        });\n    });\n\n    describe('when nesting targets', () => {\n        const pageWithNestedTargets = pageFromTemplate(`\n            <html>\n                <body>\n                    <article>\n                        <header>\n                            <h1>Title</h1>\n                        </header>\n                        <ul id=\"toc\">\n                            <li>topic <span class=\"number\">1</span></li>\n                            <li>topic <span class=\"number\">2</span></li>\n                            <li>topic <span class=\"number\">3</span></li>\n                        </ul>\n                    </article>\n                </body>\n            </html>\n        `);\n\n        class Page {\n            static Article = Target.the('article').located(by.css('article'));\n            static Header = Target.the('header').located(by.css('header'));\n            static Title = Target.the('title').located(by.css('h1'));\n            static TOC = Target.the('table of contents').located(by.css('ul#toc'));\n            static Topics = Target.all('topics').located(by.css('li'));\n            static Topic_Number = Target.the('topic number').located(by.css('.number'));\n        }\n\n        /**\n         * @test {Target}\n         * @test {Target.the}\n         * @test {TargetElement#of}\n         * @test {TargetNestedElement}\n         */\n        it('allows for Target<ElementFinder> to be nested within another Target<ElementFinder>', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageWithNestedTargets),\n\n                Ensure.that(Text.of(Page.Header.of(Page.Article)), equals('Title')),\n                Ensure.that(Page.Header.of(Page.Article).toString(), equals('the header of the article')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.the}\n         * @test {TargetElement#of}\n         * @test {TargetNestedElement}\n         * @test {TargetNestedElement#of}\n         */\n        it('allows for Target<ElementFinder> to form a chain with other Target<ElementFinder>s', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageWithNestedTargets),\n\n                Ensure.that(Text.of(Page.Title.of(Page.Header).of(Page.Article)), equals('Title')),\n                Ensure.that(Page.Title.of(Page.Header.of(Page.Article)).toString(), equals('the title of the header of the article')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.all}\n         * @test {TargetElements#of}\n         * @test {TargetNestedElements}\n         * @test {TargetNestedElements#of}\n         */\n        it('allows for Target<ElementArrayFinder> to be nested within another Target<ElementFinder>', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageWithNestedTargets),\n\n                Ensure.that(Text.ofAll(Page.Topics.of(Page.TOC).of(Page.Article)), equals(['topic 1', 'topic 2', 'topic 3'])),\n                Ensure.that(Page.Topics.of(Page.TOC).of(Page.Article).toString(), equals('the topics of the table of contents of the article')),\n            ));\n\n        describe('and filtering them', () => {\n\n            const filteredTopics = Page.Topics.of(Page.TOC).where(Text.of(Page.Topic_Number), equals('2'));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('allows for nested Target<ElementArrayFinder> to be filtered', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageWithNestedTargets),\n\n                    Ensure.that(\n                        Text.ofAll(filteredTopics),\n                        equals(['topic 2']),\n                    ),\n                    Ensure.that(\n                        filteredTopics.toString(),\n                        equals(`the topics of the table of contents where the text of the topic number does equal '2'`),\n                    ),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('allows for nested Target<ElementArrayFinder> to be counted', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageWithNestedTargets),\n\n                    Ensure.that(\n                        filteredTopics.count(),\n                        equals(1),\n                    ),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('allows for the first of nested Target<ElementArrayFinder> to be retrieved', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageWithNestedTargets),\n\n                    Ensure.that(\n                        Text.of(filteredTopics.first()),\n                        equals('topic 2'),\n                    ),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('allows for the last of nested Target<ElementArrayFinder> to be retrieved', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageWithNestedTargets),\n\n                    Ensure.that(\n                        Text.of(filteredTopics.last()),\n                        equals('topic 2'),\n                    ),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('allows for the nth of nested Target<ElementArrayFinder> to be retrieved', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageWithNestedTargets),\n\n                    Ensure.that(\n                        Text.of(filteredTopics.get(0)),\n                        equals('topic 2'),\n                    ),\n                ));\n        });\n    });\n\n    describe('when filtering a list of targets', () => {\n\n        const advancedShoppingList = pageFromTemplate(`\n            <html>\n            <body>\n            <div id=\"shopping-list-app\">\n                <h1>Shopping list</h1>\n                <ul>\n                    <li class=\"buy 1st\">\n                        <span class=\"item-name\">oats</span>\n                        <a onclick=\"toggle(this)\">x</a>\n                    </li>\n                    <li class=\"buy 2nd\">\n                        <span class=\"item-name\">coconut milk</span>\n                        <a onclick=\"toggle(this)\">x</a>\n                    </li>\n                    <li class=\"3rd\">\n                        <span class=\"item-name\">coffee</span>\n                        <a onclick=\"toggle(this)\">x</a>\n                    </li>\n                </ul>\n            </div>\n            <script>\n                function toggle(event) {\n                    event.parentNode.classList.toggle('buy');\n                }\n            </script>\n            </body>\n            </html>\n        `);\n\n        class AdvancedShoppingList {\n            static Items = Target.all('shopping list items').located(by.css('li'));\n            static Item = Target.the('shopping list item').located(by.css('li'));\n            static Titles = Target.all('shopping list item titles').located(by.css('li span.item-name'));\n            static Item_Name = Target.the('item name').located(by.tagName('span.item-name'));\n            static Item_Names = Target.all('item names').located(by.tagName('span.item-name'));\n        }\n\n        beforeEach(() => engage(new UIActors()));\n\n        describe('and no filters are applied', () => {\n\n            describe('lets the actor interact with the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#count}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(AdvancedShoppingList.Titles.count(), equals(3)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.ofAll(AdvancedShoppingList.Titles), contain('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#first}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.first()), equals('oats')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#last}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.last()), equals('coffee')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#get}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.get(1)), equals('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#count}\n                 * @test {TargetElements#toString}\n                 */\n                it('returns the number of items', () =>\n                    expect(AdvancedShoppingList.Items.count().toString())\n                        .to.equal('the number of the shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks all the items', () =>\n                    expect(AdvancedShoppingList.Items.toString())\n                        .to.equal('the shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#first}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks the first item', () =>\n                    expect(AdvancedShoppingList.Items.first().toString())\n                        .to.equal('the first of the shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#last}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks the last item', () =>\n                    expect(AdvancedShoppingList.Items.last().toString())\n                        .to.equal('the last of the shopping list items'));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(AdvancedShoppingList.Items.get(index).toString())\n                        .to.equal(`the ${ description } of the shopping list items`);\n                });\n            });\n        });\n\n        describe('and a filter is applied', () => {\n\n            const list = AdvancedShoppingList.Items.where(CSSClasses, contain('buy'));\n\n            describe('lets the actor filter the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(list.count(), equals(2)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.ofAll(list), contain('coconut milk x')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.first()), startsWith('oats')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.last()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.get(1)), startsWith('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('returns the number of items', () =>\n                    expect(list.count().toString())\n                        .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    expect(list.toString())\n                        .to.equal(`the shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    expect(list.first().toString())\n                        .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    expect(list.last().toString())\n                        .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy'`));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(list.get(index).toString()).to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy'`);\n                });\n            });\n        });\n\n        describe('and multiple filters are applied', () => {\n\n            const list = AdvancedShoppingList.Items.where(CSSClasses, contain('buy')).where(Text, startsWith('coconut'));\n\n            describe('lets the actor filter the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(list.count(), equals(1)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.ofAll(list), contain('coconut milk x')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.first()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.last()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Peter').attemptsTo(\n                        Navigate.to(advancedShoppingList),\n\n                        Ensure.that(Text.of(list.get(0)), startsWith('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('returns the number of answers', () =>\n                    expect(list.count().toString())\n                        .to.equal(`the number of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    expect(list.toString())\n                        .to.equal(`the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    expect(list.first().toString())\n                        .to.equal(`the first of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    expect(list.last().toString())\n                        .to.equal(`the last of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(list.get(index).toString())\n                        .to.equal(`the ${ description } of the shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`);\n                });\n            });\n        });\n\n        describe('and interacting with elements on screen', () => {\n\n            const ItemCalled = (name: string) =>\n                AdvancedShoppingList.Items\n                    .where(Text.of(AdvancedShoppingList.Item_Name), equals(name))\n                    .first();\n\n            const ItemsLeftToBuy = () =>\n                AdvancedShoppingList.Items\n                    .where(CSSClasses, contain('buy'));\n\n            const LinkTo = (item: Question<ElementFinder> | ElementFinder) =>\n                Target.the('link to element').of(item).located(by.css('a'));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             */\n            it('makes it easy for an actor to pick the element of interest', () =>\n                actorCalled('Peter').attemptsTo(\n                    Navigate.to(advancedShoppingList),\n\n                    Click.on(LinkTo(ItemCalled('coffee'))),\n\n                    Ensure.that(CSSClasses.of(ItemCalled('coffee')), contain('buy')),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             */\n            it('makes it easy for an actor to pick all elements of interest', () =>\n                actorCalled('Peter').attemptsTo(\n                    Navigate.to(advancedShoppingList),\n\n                    Click.on(LinkTo(ItemCalled('coconut milk'))),\n                    Click.on(LinkTo(ItemCalled('coffee'))),\n\n                    Ensure.that(Text.ofAll(ItemsLeftToBuy()), equals(['oats x', 'coffee x'])),\n                ));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Target.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1262,
    "kind": "test",
    "name": "describe385",
    "testId": 385,
    "memberof": "spec/screenplay/questions/Target.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385",
    "access": null,
    "description": "Target",
    "lineNumber": 13,
    "testTargets": [
      "Target"
    ]
  },
  {
    "__docId__": 1263,
    "kind": "test",
    "name": "describe386",
    "testId": 386,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe386",
    "access": null,
    "description": "allows the actor to locate",
    "lineNumber": 128
  },
  {
    "__docId__": 1264,
    "kind": "test",
    "name": "it387",
    "testId": 387,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe386",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe386.it387",
    "access": null,
    "description": "a single web element matching the selector",
    "lineNumber": 135,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement"
    ]
  },
  {
    "__docId__": 1265,
    "kind": "test",
    "name": "it388",
    "testId": 388,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe386",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe386.it388",
    "access": null,
    "description": "all web elements matching the selector",
    "lineNumber": 147,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1266,
    "kind": "test",
    "name": "it389",
    "testId": 389,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe386",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe386.it389",
    "access": null,
    "description": "an element relative to another target",
    "lineNumber": 160,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetNestedElement",
      "TargetNestedElement#of"
    ]
  },
  {
    "__docId__": 1267,
    "kind": "test",
    "name": "it390",
    "testId": 390,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe386",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe386.it390",
    "access": null,
    "description": "all elements relative to another target",
    "lineNumber": 173,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetNestedElements",
      "TargetNestedElements#of"
    ]
  },
  {
    "__docId__": 1268,
    "kind": "test",
    "name": "describe391",
    "testId": 391,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391",
    "access": null,
    "description": "provides a sensible description of",
    "lineNumber": 181
  },
  {
    "__docId__": 1269,
    "kind": "test",
    "name": "describe392",
    "testId": 392,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392",
    "access": null,
    "description": "an element that",
    "lineNumber": 183
  },
  {
    "__docId__": 1270,
    "kind": "test",
    "name": "it393",
    "testId": 393,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392.it393",
    "access": null,
    "description": "is being targeted",
    "lineNumber": 190,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement"
    ]
  },
  {
    "__docId__": 1271,
    "kind": "test",
    "name": "it394",
    "testId": 394,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392.it394",
    "access": null,
    "description": "has been located",
    "lineNumber": 200,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement"
    ]
  },
  {
    "__docId__": 1272,
    "kind": "test",
    "name": "it395",
    "testId": 395,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe392.it395",
    "access": null,
    "description": "is nested",
    "lineNumber": 211,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetNestedElement",
      "TargetNestedElement#of"
    ]
  },
  {
    "__docId__": 1273,
    "kind": "test",
    "name": "describe396",
    "testId": 396,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396",
    "access": null,
    "description": "elements that",
    "lineNumber": 216
  },
  {
    "__docId__": 1274,
    "kind": "test",
    "name": "it397",
    "testId": 397,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396.it397",
    "access": null,
    "description": "are being targeted",
    "lineNumber": 223,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1275,
    "kind": "test",
    "name": "it398",
    "testId": 398,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396.it398",
    "access": null,
    "description": "have been located",
    "lineNumber": 233,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1276,
    "kind": "test",
    "name": "it399",
    "testId": 399,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe391.describe396.it399",
    "access": null,
    "description": "are nested",
    "lineNumber": 243,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1277,
    "kind": "test",
    "name": "describe400",
    "testId": 400,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400",
    "access": null,
    "description": "when nesting targets",
    "lineNumber": 249
  },
  {
    "__docId__": 1278,
    "kind": "test",
    "name": "it401",
    "testId": 401,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.it401",
    "access": null,
    "description": "allows for Target<ElementFinder> to be nested within another Target<ElementFinder>",
    "lineNumber": 355,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement#of",
      "TargetNestedElement"
    ]
  },
  {
    "__docId__": 1279,
    "kind": "test",
    "name": "it402",
    "testId": 402,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.it402",
    "access": null,
    "description": "allows for Target<ElementFinder> to form a chain with other Target<ElementFinder>s",
    "lineNumber": 370,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement#of",
      "TargetNestedElement",
      "TargetNestedElement#of"
    ]
  },
  {
    "__docId__": 1280,
    "kind": "test",
    "name": "it403",
    "testId": 403,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.it403",
    "access": null,
    "description": "allows for Target<ElementArrayFinder> to be nested within another Target<ElementFinder>",
    "lineNumber": 385,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements",
      "TargetNestedElements#of"
    ]
  },
  {
    "__docId__": 1281,
    "kind": "test",
    "name": "describe404",
    "testId": 404,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "access": null,
    "description": "and filtering them",
    "lineNumber": 393
  },
  {
    "__docId__": 1282,
    "kind": "test",
    "name": "it405",
    "testId": 405,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404.it405",
    "access": null,
    "description": "allows for nested Target<ElementArrayFinder> to be filtered",
    "lineNumber": 403,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1283,
    "kind": "test",
    "name": "it406",
    "testId": 406,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404.it406",
    "access": null,
    "description": "allows for nested Target<ElementArrayFinder> to be counted",
    "lineNumber": 423,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1284,
    "kind": "test",
    "name": "it407",
    "testId": 407,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404.it407",
    "access": null,
    "description": "allows for the first of nested Target<ElementArrayFinder> to be retrieved",
    "lineNumber": 439,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1285,
    "kind": "test",
    "name": "it408",
    "testId": 408,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404.it408",
    "access": null,
    "description": "allows for the last of nested Target<ElementArrayFinder> to be retrieved",
    "lineNumber": 455,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1286,
    "kind": "test",
    "name": "it409",
    "testId": 409,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe400.describe404.it409",
    "access": null,
    "description": "allows for the nth of nested Target<ElementArrayFinder> to be retrieved",
    "lineNumber": 471,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 1287,
    "kind": "test",
    "name": "describe410",
    "testId": 410,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410",
    "access": null,
    "description": "when filtering a list of targets",
    "lineNumber": 483
  },
  {
    "__docId__": 1288,
    "kind": "test",
    "name": "describe411",
    "testId": 411,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411",
    "access": null,
    "description": "and no filters are applied",
    "lineNumber": 586
  },
  {
    "__docId__": 1289,
    "kind": "test",
    "name": "describe412",
    "testId": 412,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "access": null,
    "description": "lets the actor interact with the list of matching elements so that it",
    "lineNumber": 588
  },
  {
    "__docId__": 1290,
    "kind": "test",
    "name": "it413",
    "testId": 413,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412.it413",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 595,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#count"
    ]
  },
  {
    "__docId__": 1291,
    "kind": "test",
    "name": "it414",
    "testId": 414,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412.it414",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 607,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1292,
    "kind": "test",
    "name": "it415",
    "testId": 415,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412.it415",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 620,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#first"
    ]
  },
  {
    "__docId__": 1293,
    "kind": "test",
    "name": "it416",
    "testId": 416,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412.it416",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 633,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#last"
    ]
  },
  {
    "__docId__": 1294,
    "kind": "test",
    "name": "it417",
    "testId": 417,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe412.it417",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 646,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#get"
    ]
  },
  {
    "__docId__": 1295,
    "kind": "test",
    "name": "describe418",
    "testId": 418,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 654
  },
  {
    "__docId__": 1296,
    "kind": "test",
    "name": "it419",
    "testId": 419,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418.it419",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 662,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#count",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 1297,
    "kind": "test",
    "name": "it420",
    "testId": 420,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418.it420",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 671,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 1298,
    "kind": "test",
    "name": "it421",
    "testId": 421,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418.it421",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 681,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#first",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 1299,
    "kind": "test",
    "name": "it422",
    "testId": 422,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe411.describe418.it422",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 691,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#last",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 1300,
    "kind": "test",
    "name": "describe423",
    "testId": 423,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423",
    "access": null,
    "description": "and a filter is applied",
    "lineNumber": 714
  },
  {
    "__docId__": 1301,
    "kind": "test",
    "name": "describe424",
    "testId": 424,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 718
  },
  {
    "__docId__": 1302,
    "kind": "test",
    "name": "it425",
    "testId": 425,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424.it425",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 725,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1303,
    "kind": "test",
    "name": "it426",
    "testId": 426,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424.it426",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 737,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1304,
    "kind": "test",
    "name": "it427",
    "testId": 427,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424.it427",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 749,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1305,
    "kind": "test",
    "name": "it428",
    "testId": 428,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424.it428",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 761,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1306,
    "kind": "test",
    "name": "it429",
    "testId": 429,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe424.it429",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 773,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 1307,
    "kind": "test",
    "name": "describe430",
    "testId": 430,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 781
  },
  {
    "__docId__": 1308,
    "kind": "test",
    "name": "it431",
    "testId": 431,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430.it431",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 787,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1309,
    "kind": "test",
    "name": "it432",
    "testId": 432,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430.it432",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 795,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1310,
    "kind": "test",
    "name": "it433",
    "testId": 433,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430.it433",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 803,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1311,
    "kind": "test",
    "name": "it434",
    "testId": 434,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe423.describe430.it434",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 811,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1312,
    "kind": "test",
    "name": "describe435",
    "testId": 435,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435",
    "access": null,
    "description": "and multiple filters are applied",
    "lineNumber": 833
  },
  {
    "__docId__": 1313,
    "kind": "test",
    "name": "describe436",
    "testId": 436,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 837
  },
  {
    "__docId__": 1314,
    "kind": "test",
    "name": "it437",
    "testId": 437,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436.it437",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 843,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1315,
    "kind": "test",
    "name": "it438",
    "testId": 438,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436.it438",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 854,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1316,
    "kind": "test",
    "name": "it439",
    "testId": 439,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436.it439",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 865,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1317,
    "kind": "test",
    "name": "it440",
    "testId": 440,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436.it440",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 876,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1318,
    "kind": "test",
    "name": "it441",
    "testId": 441,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe436.it441",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 887,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1319,
    "kind": "test",
    "name": "describe442",
    "testId": 442,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 895
  },
  {
    "__docId__": 1320,
    "kind": "test",
    "name": "it443",
    "testId": 443,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442.it443",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 901,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1321,
    "kind": "test",
    "name": "it444",
    "testId": 444,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442.it444",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 909,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1322,
    "kind": "test",
    "name": "it445",
    "testId": 445,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442.it445",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 917,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1323,
    "kind": "test",
    "name": "it446",
    "testId": 446,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe435.describe442.it446",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 925,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1324,
    "kind": "test",
    "name": "describe447",
    "testId": 447,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe447",
    "access": null,
    "description": "and interacting with elements on screen",
    "lineNumber": 948
  },
  {
    "__docId__": 1325,
    "kind": "test",
    "name": "it448",
    "testId": 448,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe447",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe447.it448",
    "access": null,
    "description": "makes it easy for an actor to pick the element of interest",
    "lineNumber": 966,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1326,
    "kind": "test",
    "name": "it449",
    "testId": 449,
    "memberof": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe447",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Target.spec.ts~describe385.describe410.describe447.it449",
    "access": null,
    "description": "makes it easy for an actor to pick all elements of interest",
    "lineNumber": 979,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 1327,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Text.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage, replace, toNumber, trim } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Text', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('of', () => {\n\n        const Header = Target.the('header').located(by.tagName('h1'));\n\n        /** @test {Text.of} */\n        it('allows the actor to read the text of the DOM element matching the locator', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageFromTemplate(`\n                    <html>\n                        <body>\n                            <h1>Hello World!</h1>\n                        </body>\n                    </html>\n                `)),\n\n                Ensure.that(Text.of(Header), equals('Hello World!')),\n            ));\n\n        /** @test {Text.of} */\n        /** @test {Text#toString} */\n        it('produces a sensible description of the question being asked', () => {\n            expect(Text.of(Target.the('header').located(by.tagName('h1'))).toString())\n                .to.equal('the text of the header');\n        });\n\n        describe('when mapping', () => {\n\n            /** @test {Text.of} */\n            /** @test {Text#map} */\n            it('allows for the answer to be mapped to another type', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageFromTemplate(`\n                        <html>\n                        <body>\n                            <h1>2</h1>\n                        </body>\n                        </html>\n                    `)),\n\n                    Ensure.that(Text.of(Header).map(toNumber()), equals(2)),\n                ));\n\n            /** @test {Text.of} */\n            /** @test {Text#map} */\n            it('allows for the transformations to be chained', () =>\n                actorCalled('Bernie').attemptsTo(\n                    Navigate.to(pageFromTemplate(`\n                        <html>\n                        <body>\n                            <h1>\n                            2020-09-11T19:53:18.160Z\n                            </h1>\n                        </body>\n                        </html>\n                    `)),\n\n                    Ensure.that(\n                        Text.of(Header).map(trim()).map(actor => value => new Date(value)),\n                        equals(new Date('2020-09-11T19:53:18.160Z'))\n                    ),\n                ));\n        });\n    });\n\n    describe('ofAll', () => {\n\n        const Shopping_List_Items = Target.all('shopping list items').located(by.css('li'));\n\n        const testPage = pageFromTemplate(`\n                <html>\n                <body>\n                    <h1>Shopping list</h1>\n                    <ul>\n                        <li>milk</li>\n                        <li>oats</li>\n                    </ul>\n                </body>\n                </html>\n            `);\n\n        /** @test {Text.ofAll} */\n        it('allows the actor to read the text of all DOM elements matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(Text.ofAll(Shopping_List_Items), equals(['milk', 'oats'])),\n        ));\n\n        /** @test {Text.ofAll} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(testPage),\n\n            Ensure.that(Text.ofAll(Shopping_List_Items).of(Target.the('body').located(by.tagName('body'))), equals(['milk', 'oats'])),\n        ));\n\n        /** @test {Text.ofAll} */\n        /** @test {Text#toString} */\n        it('produces sensible description of the question being asked', () => {\n            expect(Text.ofAll(Shopping_List_Items).toString())\n                .to.equal('the text of the shopping list items');\n        });\n\n        /** @test {Text.ofAll} */\n        /** @test {Text#map} */\n        it('allows for the answer to be mapped', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to(pageFromTemplate(`\n                        <html>\n                        <body>\n                            <ul id=\"answers\">\n                                <li>\n                                    6.67%\n                                </li>\n                                <li>\n                                    3.34%\n                                </li>\n                            </ul>\n                        </body>\n                        </html>\n                    `)),\n\n                Ensure.that(\n                    Text.ofAll(Target.all('possible answers').located(by.css('#answers li')))\n                        .map(trim())\n                        .map(replace('%', ''))\n                        .map(toNumber()),\n                    equals([6.67, 3.34])\n                ),\n            ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Text.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1328,
    "kind": "test",
    "name": "describe450",
    "testId": 450,
    "memberof": "spec/screenplay/questions/Text.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450",
    "access": null,
    "description": "Text",
    "lineNumber": 12
  },
  {
    "__docId__": 1329,
    "kind": "test",
    "name": "describe451",
    "testId": 451,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451",
    "access": null,
    "description": "of",
    "lineNumber": 16
  },
  {
    "__docId__": 1330,
    "kind": "test",
    "name": "it452",
    "testId": 452,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe451",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.it452",
    "access": null,
    "description": "allows the actor to read the text of the DOM element matching the locator",
    "lineNumber": 21,
    "testTargets": [
      "Text.of"
    ]
  },
  {
    "__docId__": 1331,
    "kind": "test",
    "name": "it453",
    "testId": 453,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe451",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.it453",
    "access": null,
    "description": "produces a sensible description of the question being asked",
    "lineNumber": 36,
    "testTargets": [
      "Text#toString"
    ]
  },
  {
    "__docId__": 1332,
    "kind": "test",
    "name": "describe454",
    "testId": 454,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe451",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.describe454",
    "access": null,
    "description": "when mapping",
    "lineNumber": 41
  },
  {
    "__docId__": 1333,
    "kind": "test",
    "name": "it455",
    "testId": 455,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.describe454",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.describe454.it455",
    "access": null,
    "description": "allows for the answer to be mapped to another type",
    "lineNumber": 45,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 1334,
    "kind": "test",
    "name": "it456",
    "testId": 456,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.describe454",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe451.describe454.it456",
    "access": null,
    "description": "allows for the transformations to be chained",
    "lineNumber": 60,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 1335,
    "kind": "test",
    "name": "describe457",
    "testId": 457,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe457",
    "access": null,
    "description": "ofAll",
    "lineNumber": 80
  },
  {
    "__docId__": 1336,
    "kind": "test",
    "name": "it458",
    "testId": 458,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe457.it458",
    "access": null,
    "description": "allows the actor to read the text of all DOM elements matching the locator",
    "lineNumber": 97,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 1337,
    "kind": "test",
    "name": "it459",
    "testId": 459,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe457.it459",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 104,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 1338,
    "kind": "test",
    "name": "it460",
    "testId": 460,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe457.it460",
    "access": null,
    "description": "produces sensible description of the question being asked",
    "lineNumber": 112,
    "testTargets": [
      "Text#toString"
    ]
  },
  {
    "__docId__": 1339,
    "kind": "test",
    "name": "it461",
    "testId": 461,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe450.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe450.describe457.it461",
    "access": null,
    "description": "allows for the answer to be mapped",
    "lineNumber": 119,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 1340,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Value.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\nimport { by } from 'protractor';\n\nimport { Navigate, Target, Value } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Value', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('of', () => {\n\n        /** @test {Text} */\n        /** @test {Text.of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n        ));\n\n        /** @test {Text} */\n        /** @test {Text#of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n        ));\n\n        /** @test {CSSClasses} */\n        /** @test {CSSClasses#of} */\n        it('allows for a question relative to another target to be asked', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                <body>\n                    <form>\n                        <input name=\"username\" value=\"jan-molak\" />\n                    </form>\n                </body>\n                </html>\n            `)),\n\n            Ensure.that(\n                Value.of(Target.the('username field').located(by.tagName('input')))\n                    .of(Target.the(`form`).located(by.tagName('form'))),\n                equals('jan-molak'),\n            ),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Value.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1341,
    "kind": "test",
    "name": "describe462",
    "testId": 462,
    "memberof": "spec/screenplay/questions/Value.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe462",
    "access": null,
    "description": "Value",
    "lineNumber": 11
  },
  {
    "__docId__": 1342,
    "kind": "test",
    "name": "describe463",
    "testId": 463,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe462",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe462.describe463",
    "access": null,
    "description": "of",
    "lineNumber": 15
  },
  {
    "__docId__": 1343,
    "kind": "test",
    "name": "it464",
    "testId": 464,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe462.describe463",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe462.describe463.it464",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 19,
    "testTargets": [
      "Text.of"
    ]
  },
  {
    "__docId__": 1344,
    "kind": "test",
    "name": "it465",
    "testId": 465,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe462.describe463",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe462.describe463.it465",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 35,
    "testTargets": [
      "Text#of"
    ]
  },
  {
    "__docId__": 1345,
    "kind": "test",
    "name": "it466",
    "testId": 466,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe462.describe463",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe462.describe463.it466",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 51,
    "testTargets": [
      "CSSClasses#of"
    ]
  },
  {
    "__docId__": 1346,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Website.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, engage } from '@serenity-js/core';\n\nimport { Navigate, Website } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Website', () => {\n\n    beforeEach(() => engage(new UIActors()));\n\n    describe('title', () => {\n        /** @test {Website} */\n        it('allows the actor to read the title of the website', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(pageFromTemplate(`\n                <html>\n                    <head>\n                        <title>Hello World</title>\n                    </head>\n                </html>\n            `)),\n\n            Ensure.that(Website.title(), equals(`Hello World`)),\n        ));\n    });\n\n    describe('url', () => {\n\n        /** @test {Website} */\n        it('allows the actor to read the URL of the website', () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://accessibility/`),\n\n            Ensure.that(Website.url(), equals(`chrome://accessibility/`)),\n        ));\n\n        /**\n         *  @test {Website}\n         *  @see https://github.com/serenity-js/serenity-js/issues/273\n         */\n        it(`correctly represents the URL containing special characters`, () => actorCalled('Bernie').attemptsTo(\n            Navigate.to(`chrome://accessibility/fr/noworries/#`),\n\n            Ensure.that(Website.url(), equals(`chrome://accessibility/fr/noworries/#`)),\n        ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/questions/Website.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1347,
    "kind": "test",
    "name": "describe467",
    "testId": 467,
    "memberof": "spec/screenplay/questions/Website.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467",
    "access": null,
    "description": "Website",
    "lineNumber": 10
  },
  {
    "__docId__": 1348,
    "kind": "test",
    "name": "describe468",
    "testId": 468,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe467",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467.describe468",
    "access": null,
    "description": "title",
    "lineNumber": 14
  },
  {
    "__docId__": 1349,
    "kind": "test",
    "name": "it469",
    "testId": 469,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe467.describe468",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467.describe468.it469",
    "access": null,
    "description": "allows the actor to read the title of the website",
    "lineNumber": 16,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 1350,
    "kind": "test",
    "name": "describe470",
    "testId": 470,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe467",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467.describe470",
    "access": null,
    "description": "url",
    "lineNumber": 29
  },
  {
    "__docId__": 1351,
    "kind": "test",
    "name": "it471",
    "testId": 471,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe467.describe470",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467.describe470.it471",
    "access": null,
    "description": "allows the actor to read the URL of the website",
    "lineNumber": 32,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 1352,
    "kind": "test",
    "name": "it472",
    "testId": 472,
    "memberof": "spec/screenplay/questions/Website.spec.ts~describe467.describe470",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Website.spec.ts~describe467.describe470.it472",
    "access": null,
    "see": [
      "https://github.com/serenity-js/serenity-js/issues/273"
    ],
    "lineNumber": 42,
    "testTargets": [
      "Website"
    ]
  },
  {
    "__docId__": 1353,
    "kind": "testFile",
    "name": "spec/screenplay/tasks/Loop.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals, not } from '@serenity-js/assertions';\nimport { actorCalled, engage, Loop } from '@serenity-js/core';\n\nimport { by, ElementFinder } from 'protractor';\nimport { Click, isSelected, Navigate, Target, Text } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\nimport { UIActors } from '../../UIActors';\n\ndescribe('Loop', () => {\n\n    const pageWithAComplexForm = pageFromTemplate(`\n        <html>\n          <body>\n            <form>\n              <div>\n                  <label for=\"option1\">\n                      <input type=\"checkbox\" id=\"option1\" />\n                      Option 1\n                  </label>\n              </div>\n              <div>\n                  <label for=\"option2\">\n                      <input type=\"checkbox\" id=\"option2\" />\n                      Option 2\n                  </label>\n              </div>\n              <div>\n                  <label for=\"option3\">\n                      <input type=\"checkbox\" id=\"option3\" />\n                      Option 3\n                  </label>\n              </div>\n              <code><pre id=\"output\"></pre></code>\n            </form>\n            <script>\n              document.querySelectorAll('input').forEach(function (item) {\n                item.addEventListener('click', function(event) {\n                  document.getElementById('output').insertAdjacentHTML(\n                        'beforeend',\n                        item.id + ' ' + ( item.checked ? 'checked' : 'unchecked' ) + '\\\\n'\n                    );\n                })\n              });\n            </script>\n          </body>\n        </html>\n    `);\n\n    const Form = {\n        Labels:     Target.all('form labels').located(by.tagName('label')),\n        Checkbox:   Target.the('checkbox').located(by.tagName('input')),\n        Output:     Target.the('output').located(by.id('output')),\n    };\n\n    beforeEach(() => engage(new UIActors()));\n\n    it('allows the actor to perform a sequence of activities for every element given', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to(pageWithAComplexForm),\n\n            Loop.over(Form.Labels).to(\n                Ensure.that(Form.Checkbox.of(Loop.item<ElementFinder>()), not(isSelected())),\n                Click.on(Loop.item()),\n                Ensure.that(Form.Checkbox.of(Loop.item()), isSelected()),\n            ),\n\n            Ensure.that(Text.of(Form.Output), equals('option1 checked\\noption2 checked\\noption3 checked')),\n        ));\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/screenplay/tasks/Loop.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1354,
    "kind": "test",
    "name": "describe473",
    "testId": 473,
    "memberof": "spec/screenplay/tasks/Loop.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/tasks/Loop.spec.ts~describe473",
    "access": null,
    "description": "Loop",
    "lineNumber": 11
  },
  {
    "__docId__": 1355,
    "kind": "test",
    "name": "it474",
    "testId": 474,
    "memberof": "spec/screenplay/tasks/Loop.spec.ts~describe473",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/tasks/Loop.spec.ts~describe473.it474",
    "access": null,
    "description": "allows the actor to perform a sequence of activities for every element given",
    "lineNumber": 59
  },
  {
    "__docId__": 1356,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/Photographer.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, givenFollowingEvents } from '@integration/testing-tools';\nimport { AssertionError, ImplementationPendingError, LogicError } from '@serenity-js/core';\nimport { SceneFinished, SceneStarts, TaskFinished, TaskStarts, TestRunFinished } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    ActivityDetails,\n    Category,\n    CorrelationId,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Name,\n    Outcome,\n    ScenarioDetails,\n} from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\nimport { Photographer, TakePhotosOfFailures } from '../../../../src/stage';\nimport { create } from './create';\n\ndescribe('Photographer', () => {\n\n    const\n        defaultCardScenario = new ScenarioDetails(\n            new Name('Paying with a default card'),\n            new Category('Online Checkout'),\n            new FileSystemLocation(\n                new Path(`payments/checkout.feature`),\n            ),\n        ),\n        pickACard = new ActivityDetails(new Name('Pick the default credit card')),\n        sceneId = new CorrelationId('a-scene-id'),\n        activityId = new CorrelationId('activity-id');\n\n    it('complains when sent DomainEvents before getting assigned to a Stage', () => {\n        const photographer = new Photographer(new TakePhotosOfFailures());\n        expect(() => photographer.notifyOf(new SceneStarts(sceneId, defaultCardScenario)))\n            .to.throw(LogicError, `Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n    });\n\n    describe(`when there's no actor in the spotlight`, () => {\n\n        given(\n            new ExecutionSkipped(),\n            new ExecutionSuccessful(),\n        ).\n        it('doesn\\'t take a picture if everything goes well', (outcome: Outcome) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(sceneId, defaultCardScenario),\n                new TaskStarts(sceneId, activityId, pickACard),\n                new TaskFinished(sceneId, activityId, pickACard, outcome),\n                new SceneFinished(sceneId, defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n\n        given(\n            { description: 'compromised',               outcome: new ExecutionCompromised(new Error('Database is down'))                                                },\n            { description: 'error',                     outcome: new ExecutionFailedWithError(new TypeError())                                                          },\n            { description: 'assertion error',           outcome: new ExecutionFailedWithAssertionError(new AssertionError(`expected false to equal true`, false, true)) },\n            { description: 'implementation pending',    outcome: new ImplementationPending(new ImplementationPendingError('method missing'))                            },\n            { description: 'ignored',                   outcome: new ExecutionIgnored(new Error('Failed, retrying'))                                                    },\n        ).\n        it('does nothing, even when a problem occurs', ({ outcome }) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(sceneId, defaultCardScenario),\n                new SceneFinished(sceneId, defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/Photographer.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1357,
    "kind": "test",
    "name": "describe475",
    "testId": 475,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe475",
    "access": null,
    "description": "Photographer",
    "lineNumber": 26
  },
  {
    "__docId__": 1358,
    "kind": "test",
    "name": "it476",
    "testId": 476,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe475",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe475.it476",
    "access": null,
    "description": "complains when sent DomainEvents before getting assigned to a Stage",
    "lineNumber": 40
  },
  {
    "__docId__": 1359,
    "kind": "test",
    "name": "describe477",
    "testId": 477,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe475",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe475.describe477",
    "access": null,
    "lineNumber": 46
  },
  {
    "__docId__": 1360,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { Duration } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated, AsyncOperationAttempted, DomainEvent } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosBeforeAndAfterInteractions } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', function () {\n\n    this.timeout(60 * 1000);\n\n    describe('when instructed to take photos before and after all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create(Duration.ofSeconds(10));\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosBeforeAndAfterInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a before and after photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty succeeds \\(#1\\)'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty succeeds \\(#1\\)'...$/);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty fails due to Error'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty fails due to Error'...$/);\n                    });\n            })));\n\n        it('takes a photo before and after Interaction, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty fails due to TypeError'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty fails due to TypeError'...$/);\n                    });\n            })));\n\n        it('takes two photos per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                let cid1: CorrelationId,\n                    cid2: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => { cid1 = event.activityId; })\n                    .next(ActivityStarts, event => { cid2 = event.activityId; });\n\n                const\n                    firstActivityEvents  = recorder.events.filter(withCorrelationIdOf(cid1)),\n                    secondActivityEvents = recorder.events.filter(withCorrelationIdOf(cid2));\n\n                expect(firstActivityEvents).to.have.lengthOf(4);\n                expect(secondActivityEvents).to.have.lengthOf(4);\n\n                PickEvent.from(firstActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n\n                PickEvent.from(secondActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value, events).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Before Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact, events).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value, events).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-After Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact, events).to.be.instanceof(Photo);\n                    });\n            })));\n\n        function stringified(events: DomainEvent[]): string {\n            return JSON.stringify(events.map(event => event.toJSON()), null, 4);\n        }\n\n        function withCorrelationIdOf(cid: CorrelationId) {\n            return (event: DomainEvent) => {\n                const activityId = (event as ActivityRelatedArtifactGenerated | ActivityStarts | ActivityFinished).activityId;\n\n                return activityId && cid.equals(activityId);\n            };\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1361,
    "kind": "test",
    "name": "describe478",
    "testId": 478,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478",
    "access": null,
    "description": "Photographer",
    "lineNumber": 14
  },
  {
    "__docId__": 1362,
    "kind": "test",
    "name": "describe479",
    "testId": 479,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "access": null,
    "description": "when instructed to take photos before and after all interactions",
    "lineNumber": 18
  },
  {
    "__docId__": 1363,
    "kind": "test",
    "name": "it480",
    "testId": 480,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479.it480",
    "access": null,
    "description": "takes a before and after photo when the interaction goes well",
    "lineNumber": 33
  },
  {
    "__docId__": 1364,
    "kind": "test",
    "name": "it481",
    "testId": 481,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479.it481",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 49
  },
  {
    "__docId__": 1365,
    "kind": "test",
    "name": "it482",
    "testId": 482,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479.it482",
    "access": null,
    "description": "takes a photo before and after Interaction, even though nested tasks might all be marked as failing",
    "lineNumber": 65
  },
  {
    "__docId__": 1366,
    "kind": "test",
    "name": "it483",
    "testId": 483,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479.it483",
    "access": null,
    "description": "takes two photos per interaction",
    "lineNumber": 85
  },
  {
    "__docId__": 1367,
    "kind": "test",
    "name": "it484",
    "testId": 484,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe478.describe479.it484",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 126
  },
  {
    "__docId__": 1368,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosOfFailures } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of failed interactions,', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const sut = create();\n            stage = sut.stage;\n            recorder = sut.recorder;\n\n            photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n        });\n\n        it('does nothing if everything goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(2);    // Interaction starts and finishes\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it is concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let activityId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        activityId = event.activityId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.activityId).to.equal(activityId);\n                    });\n            })));\n\n        it('takes only one picture, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`includes the browser context in the name of the emitted artifact`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Betty fails due to Error`,\n                        );\n                    });\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1369,
    "kind": "test",
    "name": "describe485",
    "testId": 485,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485",
    "access": null,
    "description": "Photographer",
    "lineNumber": 13
  },
  {
    "__docId__": 1370,
    "kind": "test",
    "name": "describe486",
    "testId": 486,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "access": null,
    "description": "when instructed to take a photo of failed interactions,",
    "lineNumber": 15
  },
  {
    "__docId__": 1371,
    "kind": "test",
    "name": "it487",
    "testId": 487,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486.it487",
    "access": null,
    "description": "does nothing if everything goes well",
    "lineNumber": 30
  },
  {
    "__docId__": 1372,
    "kind": "test",
    "name": "it488",
    "testId": 488,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486.it488",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 37
  },
  {
    "__docId__": 1373,
    "kind": "test",
    "name": "it489",
    "testId": 489,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486.it489",
    "access": null,
    "lineNumber": 49
  },
  {
    "__docId__": 1374,
    "kind": "test",
    "name": "it490",
    "testId": 490,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486.it490",
    "access": null,
    "description": "takes only one picture, even though nested tasks might all be marked as failing",
    "lineNumber": 65
  },
  {
    "__docId__": 1375,
    "kind": "test",
    "name": "it491",
    "testId": 491,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe485.describe486.it491",
    "access": null,
    "lineNumber": 81
  },
  {
    "__docId__": 1376,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\nimport { protractor } from 'protractor';\n\nimport { Photographer, TakePhotosOfInteractions } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create();\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosOfInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it's concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let activityId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        activityId = event.activityId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.activityId).to.equal(activityId);\n                    });\n            })));\n\n        it('takes only one photo, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes one photo per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => protractor.browser.getCapabilities()).\n            then(capabilities => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.get('platform') }-${ capabilities.get('browserName') }-${ capabilities.get('version') }-Betty succeeds (#1)`,\n                        );\n                    });\n            })));\n\n        it(`does not attempt to take a photo if the actor in the spotlight can't BrowseTheWeb`, () =>\n            expect(stage.theActorCalled('Adam').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                expect(recorder.events.length).to.equal(2);\n                expect(recorder.events[0]).to.be.instanceOf(InteractionStarts);\n                expect(recorder.events[1]).to.be.instanceOf(InteractionFinished);\n\n                // no artifacts generated for an actor with no ability to BrowseTheWeb\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/protractor/spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1377,
    "kind": "test",
    "name": "describe492",
    "testId": 492,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492",
    "access": null,
    "description": "Photographer",
    "lineNumber": 13
  },
  {
    "__docId__": 1378,
    "kind": "test",
    "name": "describe493",
    "testId": 493,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "access": null,
    "description": "when instructed to take a photo of all interactions",
    "lineNumber": 15
  },
  {
    "__docId__": 1379,
    "kind": "test",
    "name": "it494",
    "testId": 494,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it494",
    "access": null,
    "description": "takes a photo when the interaction goes well",
    "lineNumber": 30
  },
  {
    "__docId__": 1380,
    "kind": "test",
    "name": "it495",
    "testId": 495,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it495",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 42
  },
  {
    "__docId__": 1381,
    "kind": "test",
    "name": "it496",
    "testId": 496,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it496",
    "access": null,
    "lineNumber": 54
  },
  {
    "__docId__": 1382,
    "kind": "test",
    "name": "it497",
    "testId": 497,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it497",
    "access": null,
    "description": "takes only one photo, even though nested tasks might all be marked as failing",
    "lineNumber": 70
  },
  {
    "__docId__": 1383,
    "kind": "test",
    "name": "it498",
    "testId": 498,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it498",
    "access": null,
    "description": "takes one photo per interaction",
    "lineNumber": 86
  },
  {
    "__docId__": 1384,
    "kind": "test",
    "name": "it499",
    "testId": 499,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it499",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 103
  },
  {
    "__docId__": 1385,
    "kind": "test",
    "name": "it500",
    "testId": 500,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe492.describe493.it500",
    "access": null,
    "lineNumber": 118
  }
]